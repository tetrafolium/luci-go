// Copyright 2015 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

package messages;

option go_package = "github.com/tetrafolium/luci-go/cipd/client/cipd/internal/messages";

import "google/protobuf/timestamp.proto";

// BlobWithSHA256 is a wrapper around a binary blob with SHA256 hash to verify
// its integrity.
message BlobWithSHA256 {
  reserved 2; // was used for 'sha1' field

  bytes blob = 1;
  bytes sha256 = 3;
}

// TagCache stores a mapping (service, package name, tag) -> instance ID to
// speed up subsequent ResolveVersion calls when tags are used.
//
// It also contains a '(service, instance_id, file_name) -> encoded ObjectRef'
// mapping which is used for client self-update purposes. file_name is
// case-sensitive and must always use POSIX-style slashes.
//
// A service is specified by its hostname. We make it part of the key since
// same tags may point to different instances on different services.
message TagCache {
  message Entry {
    string service     = 4; // e.g. 'chrome-infra-packages.appspot.com'
    string package     = 1; // name of a tagged CIPD package
    string tag         = 2; // the tag, e.g. 'k:v'
    string instance_id = 3; // the instance ID it resolves to
  }

  // Capped list of entries, most recently resolved is last.
  repeated Entry entries = 1;

  message FileEntry {
    string service     = 5; // e.g. 'chrome-infra-packages.appspot.com'
    string package     = 1; // name of a CIPD package containing the file
    string instance_id = 2; // identifier of the CIPD package instance
    string file_name   = 3; // file name inside the package, POSIX-style slashes
    string object_ref  = 4; // file's ObjectRef as encoded by ObjectRefToInstanceID (for legacy reasons)
  }
  repeated FileEntry file_entries = 2;
}

// InstanceCache stores a list of instances and their last access time.
//
// This cache does not depend on a service being used, since an instance's ID is
// derived only from its contents (regardless from where it was downloaded).
message InstanceCache {
  // Entry stores info about an instance.
  message Entry {
    // LastAccess is last time this instance was retrieved from or put to the
    // cache.
    google.protobuf.Timestamp last_access = 2;
  }

  // Entries is a map of {instance id -> information about instance}.
  map<string, Entry> entries = 1;
  // LastSynced is timestamp when we synchronized Entries with actual
  // instance files.
  google.protobuf.Timestamp last_synced = 2;
}
