// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/dm/api/service/v1/service.proto

package dm

import prpc "github.com/tetrafolium/luci-go/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/dm/api/service/v1/service.proto", fileDescriptor_68bd6a527f0765eb)
}

var fileDescriptor_68bd6a527f0765eb = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x4d, 0x4b, 0xc4, 0x30,
	0x10, 0x86, 0x51, 0x44, 0x30, 0xb0, 0xa8, 0x41, 0x44, 0xea, 0x5f, 0x90, 0x04, 0x3f, 0xc0, 0x83,
	0xa8, 0x14, 0xb6, 0x7a, 0xf7, 0xe2, 0xb1, 0xcc, 0xb6, 0xb3, 0x6d, 0xd8, 0xa6, 0x89, 0x69, 0x52,
	0xf5, 0xc7, 0x0b, 0x92, 0xa4, 0x5d, 0xd0, 0x15, 0xe9, 0xde, 0xda, 0x37, 0xf3, 0xbc, 0xcc, 0xc3,
	0x90, 0x9b, 0x4a, 0xb1, 0xa2, 0x36, 0x4a, 0x0a, 0x27, 0x99, 0x32, 0x15, 0x6f, 0x5c, 0x21, 0x78,
	0x29, 0x39, 0x68, 0xc1, 0x3b, 0x34, 0xbd, 0x28, 0x90, 0xf7, 0x97, 0xe3, 0x27, 0xd3, 0x46, 0x59,
	0x45, 0x77, 0x4b, 0x99, 0x9c, 0x57, 0x4a, 0x55, 0x0d, 0xf2, 0x90, 0x2c, 0xdc, 0x92, 0xa3, 0xd4,
	0xf6, 0x33, 0x0e, 0x24, 0xb7, 0x13, 0x6b, 0x2b, 0x03, 0xba, 0xce, 0x4b, 0xb0, 0x30, 0x80, 0x0f,
	0x13, 0x41, 0x6c, 0x3b, 0x67, 0x30, 0xdf, 0xe0, 0x1f, 0x27, 0xf2, 0x50, 0x58, 0xd1, 0x83, 0xc5,
	0x1c, 0x3f, 0xb0, 0x70, 0x56, 0xa8, 0x76, 0x28, 0xb8, 0x9b, 0x58, 0xb0, 0x14, 0xad, 0xe8, 0xea,
	0x1c, 0xac, 0xf5, 0xde, 0x5b, 0x6a, 0xbf, 0x43, 0xb3, 0x8a, 0xbb, 0x47, 0xf0, 0xea, 0x6b, 0x87,
	0xec, 0xcd, 0x51, 0x77, 0x34, 0x25, 0x87, 0x59, 0x50, 0x7b, 0xf6, 0xaf, 0x73, 0xb0, 0x40, 0x4f,
	0x59, 0x29, 0xd9, 0xaf, 0xf0, 0x05, 0xdf, 0x92, 0x3f, 0xf3, 0x4e, 0xd3, 0x8c, 0x1c, 0xa7, 0x83,
	0x5d, 0x36, 0xca, 0xd1, 0x33, 0x3f, 0xbc, 0x11, 0xc7, 0x9a, 0x78, 0x48, 0x36, 0x1e, 0x92, 0x65,
	0xfe, 0x90, 0xf4, 0x9e, 0xcc, 0x9e, 0x82, 0x63, 0x1a, 0x15, 0xe9, 0x89, 0xaf, 0xf8, 0x11, 0xfd,
	0x87, 0x5f, 0x90, 0x83, 0x57, 0x68, 0x56, 0x61, 0x33, 0x7a, 0xe4, 0xd1, 0xf5, 0xaf, 0xc7, 0x66,
	0x3e, 0x59, 0xaf, 0xbd, 0xd8, 0x0f, 0xf4, 0xf5, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x54, 0x13,
	0x3c, 0x21, 0x8f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DepsClient is the client API for Deps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DepsClient interface {
	// allows you to add additional data to the current dependency graph.
	EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error)
	// is called by Execution clients to activate themselves with DM.
	ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// is called by Execution clients to indicate that an Attempt is finished.
	FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*empty.Empty, error)
	// runs queries, and walks along the dependency graph from the query results.
	WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error)
}
type depsPRPCClient struct {
	client *prpc.Client
}

func NewDepsPRPCClient(client *prpc.Client) DepsClient {
	return &depsPRPCClient{client}
}

func (c *depsPRPCClient) EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error) {
	out := new(EnsureGraphDataRsp)
	err := c.client.Call(ctx, "dm.Deps", "EnsureGraphData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "dm.Deps", "ActivateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "dm.Deps", "FinishAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsPRPCClient) WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error) {
	out := new(GraphData)
	err := c.client.Call(ctx, "dm.Deps", "WalkGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type depsClient struct {
	cc grpc.ClientConnInterface
}

func NewDepsClient(cc grpc.ClientConnInterface) DepsClient {
	return &depsClient{cc}
}

func (c *depsClient) EnsureGraphData(ctx context.Context, in *EnsureGraphDataReq, opts ...grpc.CallOption) (*EnsureGraphDataRsp, error) {
	out := new(EnsureGraphDataRsp)
	err := c.cc.Invoke(ctx, "/dm.Deps/EnsureGraphData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) ActivateExecution(ctx context.Context, in *ActivateExecutionReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dm.Deps/ActivateExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) FinishAttempt(ctx context.Context, in *FinishAttemptReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/dm.Deps/FinishAttempt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *depsClient) WalkGraph(ctx context.Context, in *WalkGraphReq, opts ...grpc.CallOption) (*GraphData, error) {
	out := new(GraphData)
	err := c.cc.Invoke(ctx, "/dm.Deps/WalkGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepsServer is the server API for Deps service.
type DepsServer interface {
	// allows you to add additional data to the current dependency graph.
	EnsureGraphData(context.Context, *EnsureGraphDataReq) (*EnsureGraphDataRsp, error)
	// is called by Execution clients to activate themselves with DM.
	ActivateExecution(context.Context, *ActivateExecutionReq) (*empty.Empty, error)
	// is called by Execution clients to indicate that an Attempt is finished.
	FinishAttempt(context.Context, *FinishAttemptReq) (*empty.Empty, error)
	// runs queries, and walks along the dependency graph from the query results.
	WalkGraph(context.Context, *WalkGraphReq) (*GraphData, error)
}

// UnimplementedDepsServer can be embedded to have forward compatible implementations.
type UnimplementedDepsServer struct {
}

func (*UnimplementedDepsServer) EnsureGraphData(ctx context.Context, req *EnsureGraphDataReq) (*EnsureGraphDataRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureGraphData not implemented")
}
func (*UnimplementedDepsServer) ActivateExecution(ctx context.Context, req *ActivateExecutionReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateExecution not implemented")
}
func (*UnimplementedDepsServer) FinishAttempt(ctx context.Context, req *FinishAttemptReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishAttempt not implemented")
}
func (*UnimplementedDepsServer) WalkGraph(ctx context.Context, req *WalkGraphReq) (*GraphData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalkGraph not implemented")
}

func RegisterDepsServer(s prpc.Registrar, srv DepsServer) {
	s.RegisterService(&_Deps_serviceDesc, srv)
}

func _Deps_EnsureGraphData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureGraphDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).EnsureGraphData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/EnsureGraphData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).EnsureGraphData(ctx, req.(*EnsureGraphDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_ActivateExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateExecutionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).ActivateExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/ActivateExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).ActivateExecution(ctx, req.(*ActivateExecutionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_FinishAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishAttemptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).FinishAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/FinishAttempt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).FinishAttempt(ctx, req.(*FinishAttemptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deps_WalkGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalkGraphReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepsServer).WalkGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Deps/WalkGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepsServer).WalkGraph(ctx, req.(*WalkGraphReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deps_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dm.Deps",
	HandlerType: (*DepsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnsureGraphData",
			Handler:    _Deps_EnsureGraphData_Handler,
		},
		{
			MethodName: "ActivateExecution",
			Handler:    _Deps_ActivateExecution_Handler,
		},
		{
			MethodName: "FinishAttempt",
			Handler:    _Deps_FinishAttempt_Handler,
		},
		{
			MethodName: "WalkGraph",
			Handler:    _Deps_WalkGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tetrafolium/luci-go/dm/api/service/v1/service.proto",
}
