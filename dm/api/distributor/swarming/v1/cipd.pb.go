// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/dm/api/distributor/swarming/v1/cipd.proto

package swarmingV1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CipdPackage struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CipdPackage) Reset()         { *m = CipdPackage{} }
func (m *CipdPackage) String() string { return proto.CompactTextString(m) }
func (*CipdPackage) ProtoMessage()    {}
func (*CipdPackage) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6ef6bc8018ba385, []int{0}
}

func (m *CipdPackage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CipdPackage.Unmarshal(m, b)
}
func (m *CipdPackage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CipdPackage.Marshal(b, m, deterministic)
}
func (m *CipdPackage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipdPackage.Merge(m, src)
}
func (m *CipdPackage) XXX_Size() int {
	return xxx_messageInfo_CipdPackage.Size(m)
}
func (m *CipdPackage) XXX_DiscardUnknown() {
	xxx_messageInfo_CipdPackage.DiscardUnknown(m)
}

var xxx_messageInfo_CipdPackage proto.InternalMessageInfo

func (m *CipdPackage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CipdPackage) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type CipdSpec struct {
	// Server to use for cipd packages. Required (though it may be specified
	// by the quest's designated distributor config). This must be
	// scheme://<hostname>, e.g. "https://example.appspot.com". The only
	// supported schemes are http and https.
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Specifies the CIPD package to use for the job to obtain the actual CIPD
	// client binary. You usually want to omit this.
	Client *CipdPackage `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty"`
	// A mapping from path-to-install to a list of cipd packages to install at
	// that location. To install packages in the root of the job, use the path
	// ''.
	ByPath               map[string]*CipdSpec_CipdPackages `protobuf:"bytes,3,rep,name=by_path,json=byPath,proto3" json:"by_path,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *CipdSpec) Reset()         { *m = CipdSpec{} }
func (m *CipdSpec) String() string { return proto.CompactTextString(m) }
func (*CipdSpec) ProtoMessage()    {}
func (*CipdSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6ef6bc8018ba385, []int{1}
}

func (m *CipdSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CipdSpec.Unmarshal(m, b)
}
func (m *CipdSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CipdSpec.Marshal(b, m, deterministic)
}
func (m *CipdSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipdSpec.Merge(m, src)
}
func (m *CipdSpec) XXX_Size() int {
	return xxx_messageInfo_CipdSpec.Size(m)
}
func (m *CipdSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_CipdSpec.DiscardUnknown(m)
}

var xxx_messageInfo_CipdSpec proto.InternalMessageInfo

func (m *CipdSpec) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *CipdSpec) GetClient() *CipdPackage {
	if m != nil {
		return m.Client
	}
	return nil
}

func (m *CipdSpec) GetByPath() map[string]*CipdSpec_CipdPackages {
	if m != nil {
		return m.ByPath
	}
	return nil
}

type CipdSpec_CipdPackages struct {
	Pkg                  []*CipdPackage `protobuf:"bytes,1,rep,name=pkg,proto3" json:"pkg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *CipdSpec_CipdPackages) Reset()         { *m = CipdSpec_CipdPackages{} }
func (m *CipdSpec_CipdPackages) String() string { return proto.CompactTextString(m) }
func (*CipdSpec_CipdPackages) ProtoMessage()    {}
func (*CipdSpec_CipdPackages) Descriptor() ([]byte, []int) {
	return fileDescriptor_d6ef6bc8018ba385, []int{1, 0}
}

func (m *CipdSpec_CipdPackages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CipdSpec_CipdPackages.Unmarshal(m, b)
}
func (m *CipdSpec_CipdPackages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CipdSpec_CipdPackages.Marshal(b, m, deterministic)
}
func (m *CipdSpec_CipdPackages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CipdSpec_CipdPackages.Merge(m, src)
}
func (m *CipdSpec_CipdPackages) XXX_Size() int {
	return xxx_messageInfo_CipdSpec_CipdPackages.Size(m)
}
func (m *CipdSpec_CipdPackages) XXX_DiscardUnknown() {
	xxx_messageInfo_CipdSpec_CipdPackages.DiscardUnknown(m)
}

var xxx_messageInfo_CipdSpec_CipdPackages proto.InternalMessageInfo

func (m *CipdSpec_CipdPackages) GetPkg() []*CipdPackage {
	if m != nil {
		return m.Pkg
	}
	return nil
}

func init() {
	proto.RegisterType((*CipdPackage)(nil), "swarmingV1.CipdPackage")
	proto.RegisterType((*CipdSpec)(nil), "swarmingV1.CipdSpec")
	proto.RegisterMapType((map[string]*CipdSpec_CipdPackages)(nil), "swarmingV1.CipdSpec.ByPathEntry")
	proto.RegisterType((*CipdSpec_CipdPackages)(nil), "swarmingV1.CipdSpec.CipdPackages")
}

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/dm/api/distributor/swarming/v1/cipd.proto", fileDescriptor_d6ef6bc8018ba385)
}

var fileDescriptor_d6ef6bc8018ba385 = []byte{
	// 288 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcf, 0x4a, 0xf4, 0x30,
	0x14, 0xc5, 0x69, 0xfb, 0x7d, 0x1d, 0xbd, 0x75, 0x21, 0x59, 0x68, 0x99, 0x55, 0x9d, 0xd5, 0xb8,
	0x49, 0x98, 0x71, 0xa1, 0xa3, 0xe0, 0x42, 0x71, 0x3f, 0x54, 0x70, 0x25, 0x48, 0x9a, 0x86, 0x36,
	0xf4, 0x4f, 0x42, 0x9a, 0x56, 0xfa, 0x44, 0xbe, 0xa6, 0x34, 0x66, 0xb0, 0x88, 0xee, 0xee, 0xb9,
	0x9c, 0x73, 0x7e, 0xb9, 0x81, 0xfb, 0x42, 0x62, 0x56, 0x6a, 0xd9, 0x88, 0xbe, 0xc1, 0x52, 0x17,
	0xa4, 0xee, 0x99, 0x20, 0x79, 0x43, 0xa8, 0x12, 0x24, 0x17, 0x9d, 0xd1, 0x22, 0xeb, 0x8d, 0xd4,
	0xa4, 0x7b, 0xa7, 0xba, 0x11, 0x6d, 0x41, 0x86, 0x0d, 0x61, 0x42, 0xe5, 0x58, 0x69, 0x69, 0x24,
	0x82, 0xc3, 0xfe, 0x65, 0xb3, 0xba, 0x83, 0xe8, 0x51, 0xa8, 0x7c, 0x4f, 0x59, 0x45, 0x0b, 0x8e,
	0x10, 0xfc, 0x6b, 0x69, 0xc3, 0x63, 0x2f, 0xf1, 0xd6, 0xc7, 0xa9, 0x9d, 0x51, 0x0c, 0x8b, 0x81,
	0xeb, 0x4e, 0xc8, 0x36, 0xf6, 0xed, 0xfa, 0x20, 0x57, 0x1f, 0x3e, 0x1c, 0x4d, 0xe9, 0x67, 0xc5,
	0x19, 0x3a, 0x83, 0xb0, 0xe3, 0x7a, 0xe0, 0xda, 0x85, 0x9d, 0x42, 0x04, 0x42, 0x56, 0x0b, 0xde,
	0x1a, 0x9b, 0x8e, 0xb6, 0xe7, 0xf8, 0x1b, 0x8f, 0x67, 0xec, 0xd4, 0xd9, 0xd0, 0x0e, 0x16, 0xd9,
	0xf8, 0xa6, 0xa8, 0x29, 0xe3, 0x20, 0x09, 0xd6, 0xd1, 0x36, 0xf9, 0x99, 0x98, 0x78, 0xf8, 0x61,
	0xdc, 0x53, 0x53, 0x3e, 0xb5, 0x46, 0x8f, 0x69, 0x98, 0x59, 0xb1, 0xdc, 0xc1, 0xc9, 0xac, 0xb1,
	0x43, 0x97, 0x10, 0xa8, 0xaa, 0x88, 0x3d, 0x5b, 0xf3, 0x27, 0x78, 0xf2, 0x2c, 0x5f, 0x21, 0x9a,
	0x35, 0xa2, 0x53, 0x08, 0x2a, 0x3e, 0xba, 0x53, 0xa6, 0x11, 0x5d, 0xc3, 0xff, 0x81, 0xd6, 0x3d,
	0x77, 0x67, 0x5c, 0xfc, 0xfa, 0xa8, 0x39, 0x3d, 0xfd, 0xf2, 0xdf, 0xfa, 0x37, 0x5e, 0x16, 0xda,
	0x9f, 0xbf, 0xfa, 0x0c, 0x00, 0x00, 0xff, 0xff, 0x75, 0xc9, 0x81, 0x0b, 0xbb, 0x01, 0x00, 0x00,
}
