// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/machine-db/api/crimson/v1/crimson.proto

package crimson

import prpc "github.com/tetrafolium/luci-go/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/machine-db/api/crimson/v1/crimson.proto", fileDescriptor_46e41eaf4c273b9a)
}

var fileDescriptor_46e41eaf4c273b9a = []byte{
	// 710 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x4f, 0xdb, 0x3e,
	0x14, 0x7d, 0xfb, 0x41, 0x2f, 0xf4, 0xb7, 0xcd, 0xd2, 0xbe, 0x0a, 0xec, 0x83, 0xf7, 0x25, 0x62,
	0x43, 0x62, 0x9b, 0x18, 0x2b, 0x4b, 0x87, 0x40, 0x90, 0x82, 0xca, 0xd6, 0x87, 0xbd, 0xa0, 0x90,
	0x9a, 0x36, 0x22, 0x89, 0xb3, 0x38, 0xed, 0xc4, 0x7f, 0xbe, 0xc7, 0xc9, 0xb1, 0x6f, 0x1a, 0x67,
	0xce, 0x50, 0xf2, 0xd6, 0x9e, 0x73, 0xcf, 0xb9, 0x1f, 0xb9, 0xb6, 0x61, 0x7f, 0xca, 0x2c, 0x7f,
	0x96, 0xb2, 0x28, 0x98, 0x47, 0x16, 0x4b, 0xa7, 0x76, 0x38, 0xf7, 0x03, 0x3b, 0xf2, 0xfc, 0x59,
	0x10, 0xd3, 0x37, 0x93, 0x6b, 0xdb, 0x4b, 0x02, 0xdb, 0x4f, 0x83, 0x88, 0xb3, 0xd8, 0x5e, 0xec,
	0xe0, 0x4f, 0x2b, 0x49, 0x59, 0xc6, 0xc8, 0x8a, 0xfa, 0xdb, 0xdb, 0x98, 0x32, 0x36, 0x0d, 0xa9,
	0x9d, 0xc3, 0xd7, 0xf3, 0x1b, 0x9b, 0x46, 0x49, 0x76, 0x27, 0xa3, 0x7a, 0xfd, 0x86, 0x39, 0x26,
	0x5e, 0xe6, 0xf9, 0x34, 0xce, 0x68, 0xca, 0x95, 0xc3, 0xc7, 0xa6, 0x0e, 0xa9, 0xe7, 0xb7, 0xd5,
	0xce, 0x18, 0xcf, 0x50, 0xfb, 0xbe, 0xa1, 0x36, 0x48, 0x50, 0xf9, 0xa1, 0xa1, 0xf2, 0x76, 0x11,
	0xa1, 0xf4, 0x53, 0x43, 0xa9, 0x62, 0xda, 0x66, 0x8e, 0x03, 0xbf, 0xad, 0x94, 0xf1, 0x22, 0xab,
	0xd3, 0x50, 0x9a, 0xcc, 0xee, 0x78, 0xe0, 0x7b, 0xe1, 0x55, 0x79, 0xdc, 0x07, 0x4d, 0x4d, 0x42,
	0x2f, 0xbb, 0x61, 0x69, 0xd4, 0xf6, 0x53, 0xa7, 0x9e, 0x7f, 0xdb, 0x76, 0xea, 0xfc, 0x57, 0x90,
	0xf9, 0x33, 0xda, 0x36, 0xf5, 0x22, 0xf4, 0xe2, 0xb6, 0xa9, 0x17, 0xd1, 0x15, 0x0f, 0x59, 0xeb,
	0x25, 0x2d, 0x36, 0xed, 0xed, 0xef, 0xff, 0x61, 0xc5, 0x91, 0x04, 0xf9, 0x06, 0x0f, 0xce, 0x02,
	0x9e, 0x0d, 0x96, 0x67, 0x8f, 0xbc, 0xb4, 0xf0, 0xb4, 0x57, 0x98, 0x11, 0xfd, 0x39, 0xa7, 0x3c,
	0xeb, 0xbd, 0xaa, 0x0f, 0xe0, 0x09, 0x8b, 0x39, 0x25, 0x03, 0x58, 0x13, 0xd4, 0x51, 0x4a, 0xe9,
	0xc9, 0x05, 0x27, 0x1b, 0x9a, 0x40, 0xa1, 0xe8, 0xf6, 0x4c, 0x23, 0x73, 0x42, 0xb9, 0x7c, 0x86,
	0x55, 0x01, 0x9d, 0x8e, 0x5d, 0x4e, 0xf4, 0x28, 0x01, 0xa1, 0xfe, 0xb9, 0x81, 0xd1, 0x0d, 0xce,
	0x2f, 0x69, 0xd5, 0x40, 0x40, 0x66, 0x03, 0xc9, 0x28, 0x83, 0x21, 0x74, 0x05, 0x76, 0x81, 0x0b,
	0x47, 0xb6, 0xb4, 0xd8, 0x02, 0x47, 0xab, 0x17, 0x75, 0xb4, 0xf2, 0xfb, 0x02, 0x1d, 0x41, 0x8c,
	0xc4, 0x02, 0x12, 0x3d, 0x6f, 0x8e, 0xa1, 0x4f, 0xcf, 0x44, 0x29, 0x8f, 0x53, 0x58, 0x17, 0xe0,
	0xa5, 0x5a, 0x44, 0xb2, 0xa9, 0xc5, 0x22, 0x8c, 0x4e, 0x5b, 0x35, 0xac, 0x5e, 0xd0, 0xf8, 0xec,
	0x70, 0x58, 0x2d, 0x28, 0xc7, 0xcc, 0x05, 0x29, 0x4a, 0x79, 0xf4, 0xa1, 0xeb, 0xa4, 0xd4, 0xcb,
	0xa8, 0x2b, 0x77, 0xaf, 0x34, 0x24, 0x0d, 0x47, 0xaf, 0x87, 0x05, 0x8d, 0x82, 0x23, 0xe8, 0x0e,
	0x68, 0x48, 0x4d, 0x0e, 0x1a, 0x8e, 0x0e, 0x4f, 0x2c, 0xf9, 0xee, 0x58, 0xf8, 0xee, 0x58, 0x5f,
	0xc5, 0xbb, 0x83, 0xa3, 0x51, 0xd1, 0xd5, 0xd1, 0x20, 0x6c, 0x1e, 0xcd, 0x92, 0x5d, 0xb6, 0x35,
	0xa2, 0xb1, 0x17, 0x19, 0x8a, 0xd2, 0xf0, 0xfa, 0xb6, 0xfa, 0xd0, 0xfd, 0x9e, 0x4c, 0x8c, 0x83,
	0xd1, 0xf0, 0x7a, 0x87, 0x5d, 0xe8, 0xc8, 0x11, 0x0e, 0x4f, 0x9c, 0xd2, 0xe7, 0x29, 0x30, 0x54,
	0xae, 0x17, 0x94, 0x08, 0x3c, 0x80, 0x8e, 0x1c, 0x9b, 0xae, 0x2a, 0xb0, 0xfb, 0xc6, 0xa8, 0x8e,
	0xcd, 0xf0, 0xc4, 0xa9, 0x1e, 0x1b, 0x01, 0x99, 0x8f, 0x8d, 0x64, 0xd4, 0xe8, 0x76, 0xa1, 0x23,
	0x1b, 0xd4, 0x0b, 0x28, 0x30, 0x73, 0xd9, 0x7b, 0x00, 0xb2, 0xb1, 0xc1, 0xe8, 0xd0, 0x21, 0xbd,
	0x4a, 0xb7, 0x02, 0x44, 0x5d, 0x77, 0xd9, 0x93, 0x08, 0x55, 0x4b, 0x2c, 0x7e, 0x57, 0x97, 0x38,
	0xc7, 0xcc, 0x4b, 0xac, 0x28, 0x55, 0xf2, 0x1e, 0x80, 0x2c, 0xaf, 0x92, 0x7c, 0x09, 0xd6, 0x24,
	0x3f, 0x07, 0x22, 0x0b, 0xbc, 0x50, 0x4f, 0xdb, 0x31, 0xe3, 0x19, 0xd9, 0xae, 0x54, 0x5f, 0x26,
	0xd1, 0xe8, 0x71, 0x11, 0xa3, 0x49, 0x7f, 0xc0, 0xa3, 0xfc, 0xf2, 0x28, 0x61, 0x9c, 0xbc, 0xd6,
	0x2f, 0x96, 0x32, 0x87, 0x76, 0xdb, 0xff, 0x0a, 0x51, 0x5d, 0x9e, 0x03, 0x91, 0x0d, 0xd5, 0x14,
	0xfb, 0x37, 0x79, 0x4f, 0xb1, 0xc7, 0xb0, 0x76, 0x14, 0xc4, 0x93, 0xb1, 0x7b, 0x29, 0x5e, 0xa6,
	0xd2, 0x45, 0x5f, 0x42, 0xd1, 0x62, 0xd3, 0x4c, 0xaa, 0xd2, 0x76, 0x60, 0x55, 0x8e, 0x6a, 0xec,
	0x96, 0x96, 0x0e, 0x21, 0xf4, 0x58, 0x2b, 0x98, 0xb1, 0x4b, 0xf6, 0x61, 0x25, 0xbf, 0x8d, 0x5c,
	0x4e, 0x9e, 0xea, 0xf7, 0x93, 0x5b, 0xf3, 0xba, 0x94, 0x1f, 0x87, 0x1d, 0x58, 0x95, 0xed, 0x6a,
	0x09, 0x11, 0x32, 0x26, 0xec, 0x03, 0xc8, 0x43, 0x94, 0xf7, 0xde, 0xab, 0x9c, 0xac, 0xf2, 0xb8,
	0x6a, 0x8e, 0xd6, 0xf5, 0x7f, 0xf9, 0xff, 0x77, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x90,
	0xdc, 0x27, 0x80, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrimsonClient is the client API for Crimson service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrimsonClient interface {
	// Lists datacenters in the database.
	ListDatacenters(ctx context.Context, in *ListDatacentersRequest, opts ...grpc.CallOption) (*ListDatacentersResponse, error)
	// Lists free IP addresses in the database.
	ListFreeIPs(ctx context.Context, in *ListFreeIPsRequest, opts ...grpc.CallOption) (*ListIPsResponse, error)
	// Lists KVMs in the database.
	ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error)
	// Lists operating systems in the database.
	ListOSes(ctx context.Context, in *ListOSesRequest, opts ...grpc.CallOption) (*ListOSesResponse, error)
	// Lists platforms in the database.
	ListPlatforms(ctx context.Context, in *ListPlatformsRequest, opts ...grpc.CallOption) (*ListPlatformsResponse, error)
	// Lists racks in the database.
	ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error)
	// Lists switches in the database.
	ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error)
	// Lists VLANs in the database.
	ListVLANs(ctx context.Context, in *ListVLANsRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error)
	// Creates a new machine in the database.
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	// Deletes a machine from the database.
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists machines in the database.
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	// Renames a machine in the database.
	RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	// Updates a machine in the database.
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	// Creates a new NIC in the database.
	CreateNIC(ctx context.Context, in *CreateNICRequest, opts ...grpc.CallOption) (*NIC, error)
	// Deletes a NIC from the database.
	DeleteNIC(ctx context.Context, in *DeleteNICRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Lists NICs in the database.
	ListNICs(ctx context.Context, in *ListNICsRequest, opts ...grpc.CallOption) (*ListNICsResponse, error)
	// Updates a NIC in the database.
	UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc.CallOption) (*NIC, error)
	// Creates a new DRAC in the database.
	CreateDRAC(ctx context.Context, in *CreateDRACRequest, opts ...grpc.CallOption) (*DRAC, error)
	// Lists DRACs in the database.
	ListDRACs(ctx context.Context, in *ListDRACsRequest, opts ...grpc.CallOption) (*ListDRACsResponse, error)
	// Updates a DRAC in the database.
	UpdateDRAC(ctx context.Context, in *UpdateDRACRequest, opts ...grpc.CallOption) (*DRAC, error)
	// Creates a new physical host in the database.
	CreatePhysicalHost(ctx context.Context, in *CreatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error)
	// Lists physical hosts in the database.
	ListPhysicalHosts(ctx context.Context, in *ListPhysicalHostsRequest, opts ...grpc.CallOption) (*ListPhysicalHostsResponse, error)
	// Updates a physical host in the database.
	UpdatePhysicalHost(ctx context.Context, in *UpdatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error)
	// Finds available VM slots in the database.
	FindVMSlots(ctx context.Context, in *FindVMSlotsRequest, opts ...grpc.CallOption) (*FindVMSlotsResponse, error)
	// Creates a new VM in the database.
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error)
	// Lists VMs in the database.
	ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error)
	// Updates a VM in the database.
	UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error)
	// Deletes a physical or virtual host from the database.
	DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}
type crimsonPRPCClient struct {
	client *prpc.Client
}

func NewCrimsonPRPCClient(client *prpc.Client) CrimsonClient {
	return &crimsonPRPCClient{client}
}

func (c *crimsonPRPCClient) ListDatacenters(ctx context.Context, in *ListDatacentersRequest, opts ...grpc.CallOption) (*ListDatacentersResponse, error) {
	out := new(ListDatacentersResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListFreeIPs(ctx context.Context, in *ListFreeIPsRequest, opts ...grpc.CallOption) (*ListIPsResponse, error) {
	out := new(ListIPsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListFreeIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListOSes(ctx context.Context, in *ListOSesRequest, opts ...grpc.CallOption) (*ListOSesResponse, error) {
	out := new(ListOSesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListOSes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListPlatforms(ctx context.Context, in *ListPlatformsRequest, opts ...grpc.CallOption) (*ListPlatformsResponse, error) {
	out := new(ListPlatformsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListPlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListVLANs(ctx context.Context, in *ListVLANsRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error) {
	out := new(ListVLANsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListVLANs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "crimson.Crimson", "DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.client.Call(ctx, "crimson.Crimson", "RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateNIC(ctx context.Context, in *CreateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) DeleteNIC(ctx context.Context, in *DeleteNICRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "crimson.Crimson", "DeleteNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListNICs(ctx context.Context, in *ListNICsRequest, opts ...grpc.CallOption) (*ListNICsResponse, error) {
	out := new(ListNICsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListNICs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateDRAC(ctx context.Context, in *CreateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListDRACs(ctx context.Context, in *ListDRACsRequest, opts ...grpc.CallOption) (*ListDRACsResponse, error) {
	out := new(ListDRACsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListDRACs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateDRAC(ctx context.Context, in *UpdateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreatePhysicalHost(ctx context.Context, in *CreatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.client.Call(ctx, "crimson.Crimson", "CreatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListPhysicalHosts(ctx context.Context, in *ListPhysicalHostsRequest, opts ...grpc.CallOption) (*ListPhysicalHostsResponse, error) {
	out := new(ListPhysicalHostsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListPhysicalHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdatePhysicalHost(ctx context.Context, in *UpdatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) FindVMSlots(ctx context.Context, in *FindVMSlotsRequest, opts ...grpc.CallOption) (*FindVMSlotsResponse, error) {
	out := new(FindVMSlotsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "FindVMSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.client.Call(ctx, "crimson.Crimson", "CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	out := new(ListVMsResponse)
	err := c.client.Call(ctx, "crimson.Crimson", "ListVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.client.Call(ctx, "crimson.Crimson", "UpdateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonPRPCClient) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "crimson.Crimson", "DeleteHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type crimsonClient struct {
	cc grpc.ClientConnInterface
}

func NewCrimsonClient(cc grpc.ClientConnInterface) CrimsonClient {
	return &crimsonClient{cc}
}

func (c *crimsonClient) ListDatacenters(ctx context.Context, in *ListDatacentersRequest, opts ...grpc.CallOption) (*ListDatacentersResponse, error) {
	out := new(ListDatacentersResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListDatacenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListFreeIPs(ctx context.Context, in *ListFreeIPsRequest, opts ...grpc.CallOption) (*ListIPsResponse, error) {
	out := new(ListIPsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListFreeIPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListKVMs(ctx context.Context, in *ListKVMsRequest, opts ...grpc.CallOption) (*ListKVMsResponse, error) {
	out := new(ListKVMsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListKVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListOSes(ctx context.Context, in *ListOSesRequest, opts ...grpc.CallOption) (*ListOSesResponse, error) {
	out := new(ListOSesResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListOSes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListPlatforms(ctx context.Context, in *ListPlatformsRequest, opts ...grpc.CallOption) (*ListPlatformsResponse, error) {
	out := new(ListPlatformsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListPlatforms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListRacks(ctx context.Context, in *ListRacksRequest, opts ...grpc.CallOption) (*ListRacksResponse, error) {
	out := new(ListRacksResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListRacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListSwitches(ctx context.Context, in *ListSwitchesRequest, opts ...grpc.CallOption) (*ListSwitchesResponse, error) {
	out := new(ListSwitchesResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListSwitches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListVLANs(ctx context.Context, in *ListVLANsRequest, opts ...grpc.CallOption) (*ListVLANsResponse, error) {
	out := new(ListVLANsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListVLANs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) RenameMachine(ctx context.Context, in *RenameMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/RenameMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	out := new(Machine)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateNIC(ctx context.Context, in *CreateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) DeleteNIC(ctx context.Context, in *DeleteNICRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/DeleteNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListNICs(ctx context.Context, in *ListNICsRequest, opts ...grpc.CallOption) (*ListNICsResponse, error) {
	out := new(ListNICsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListNICs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateNIC(ctx context.Context, in *UpdateNICRequest, opts ...grpc.CallOption) (*NIC, error) {
	out := new(NIC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateNIC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateDRAC(ctx context.Context, in *CreateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListDRACs(ctx context.Context, in *ListDRACsRequest, opts ...grpc.CallOption) (*ListDRACsResponse, error) {
	out := new(ListDRACsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListDRACs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateDRAC(ctx context.Context, in *UpdateDRACRequest, opts ...grpc.CallOption) (*DRAC, error) {
	out := new(DRAC)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateDRAC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreatePhysicalHost(ctx context.Context, in *CreatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListPhysicalHosts(ctx context.Context, in *ListPhysicalHostsRequest, opts ...grpc.CallOption) (*ListPhysicalHostsResponse, error) {
	out := new(ListPhysicalHostsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListPhysicalHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdatePhysicalHost(ctx context.Context, in *UpdatePhysicalHostRequest, opts ...grpc.CallOption) (*PhysicalHost, error) {
	out := new(PhysicalHost)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdatePhysicalHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) FindVMSlots(ctx context.Context, in *FindVMSlotsRequest, opts ...grpc.CallOption) (*FindVMSlotsResponse, error) {
	out := new(FindVMSlotsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/FindVMSlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/CreateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	out := new(ListVMsResponse)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/ListVMs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) UpdateVM(ctx context.Context, in *UpdateVMRequest, opts ...grpc.CallOption) (*VM, error) {
	out := new(VM)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/UpdateVM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crimsonClient) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/crimson.Crimson/DeleteHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrimsonServer is the server API for Crimson service.
type CrimsonServer interface {
	// Lists datacenters in the database.
	ListDatacenters(context.Context, *ListDatacentersRequest) (*ListDatacentersResponse, error)
	// Lists free IP addresses in the database.
	ListFreeIPs(context.Context, *ListFreeIPsRequest) (*ListIPsResponse, error)
	// Lists KVMs in the database.
	ListKVMs(context.Context, *ListKVMsRequest) (*ListKVMsResponse, error)
	// Lists operating systems in the database.
	ListOSes(context.Context, *ListOSesRequest) (*ListOSesResponse, error)
	// Lists platforms in the database.
	ListPlatforms(context.Context, *ListPlatformsRequest) (*ListPlatformsResponse, error)
	// Lists racks in the database.
	ListRacks(context.Context, *ListRacksRequest) (*ListRacksResponse, error)
	// Lists switches in the database.
	ListSwitches(context.Context, *ListSwitchesRequest) (*ListSwitchesResponse, error)
	// Lists VLANs in the database.
	ListVLANs(context.Context, *ListVLANsRequest) (*ListVLANsResponse, error)
	// Creates a new machine in the database.
	CreateMachine(context.Context, *CreateMachineRequest) (*Machine, error)
	// Deletes a machine from the database.
	DeleteMachine(context.Context, *DeleteMachineRequest) (*empty.Empty, error)
	// Lists machines in the database.
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	// Renames a machine in the database.
	RenameMachine(context.Context, *RenameMachineRequest) (*Machine, error)
	// Updates a machine in the database.
	UpdateMachine(context.Context, *UpdateMachineRequest) (*Machine, error)
	// Creates a new NIC in the database.
	CreateNIC(context.Context, *CreateNICRequest) (*NIC, error)
	// Deletes a NIC from the database.
	DeleteNIC(context.Context, *DeleteNICRequest) (*empty.Empty, error)
	// Lists NICs in the database.
	ListNICs(context.Context, *ListNICsRequest) (*ListNICsResponse, error)
	// Updates a NIC in the database.
	UpdateNIC(context.Context, *UpdateNICRequest) (*NIC, error)
	// Creates a new DRAC in the database.
	CreateDRAC(context.Context, *CreateDRACRequest) (*DRAC, error)
	// Lists DRACs in the database.
	ListDRACs(context.Context, *ListDRACsRequest) (*ListDRACsResponse, error)
	// Updates a DRAC in the database.
	UpdateDRAC(context.Context, *UpdateDRACRequest) (*DRAC, error)
	// Creates a new physical host in the database.
	CreatePhysicalHost(context.Context, *CreatePhysicalHostRequest) (*PhysicalHost, error)
	// Lists physical hosts in the database.
	ListPhysicalHosts(context.Context, *ListPhysicalHostsRequest) (*ListPhysicalHostsResponse, error)
	// Updates a physical host in the database.
	UpdatePhysicalHost(context.Context, *UpdatePhysicalHostRequest) (*PhysicalHost, error)
	// Finds available VM slots in the database.
	FindVMSlots(context.Context, *FindVMSlotsRequest) (*FindVMSlotsResponse, error)
	// Creates a new VM in the database.
	CreateVM(context.Context, *CreateVMRequest) (*VM, error)
	// Lists VMs in the database.
	ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error)
	// Updates a VM in the database.
	UpdateVM(context.Context, *UpdateVMRequest) (*VM, error)
	// Deletes a physical or virtual host from the database.
	DeleteHost(context.Context, *DeleteHostRequest) (*empty.Empty, error)
}

// UnimplementedCrimsonServer can be embedded to have forward compatible implementations.
type UnimplementedCrimsonServer struct {
}

func (*UnimplementedCrimsonServer) ListDatacenters(ctx context.Context, req *ListDatacentersRequest) (*ListDatacentersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatacenters not implemented")
}
func (*UnimplementedCrimsonServer) ListFreeIPs(ctx context.Context, req *ListFreeIPsRequest) (*ListIPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFreeIPs not implemented")
}
func (*UnimplementedCrimsonServer) ListKVMs(ctx context.Context, req *ListKVMsRequest) (*ListKVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKVMs not implemented")
}
func (*UnimplementedCrimsonServer) ListOSes(ctx context.Context, req *ListOSesRequest) (*ListOSesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOSes not implemented")
}
func (*UnimplementedCrimsonServer) ListPlatforms(ctx context.Context, req *ListPlatformsRequest) (*ListPlatformsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatforms not implemented")
}
func (*UnimplementedCrimsonServer) ListRacks(ctx context.Context, req *ListRacksRequest) (*ListRacksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRacks not implemented")
}
func (*UnimplementedCrimsonServer) ListSwitches(ctx context.Context, req *ListSwitchesRequest) (*ListSwitchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSwitches not implemented")
}
func (*UnimplementedCrimsonServer) ListVLANs(ctx context.Context, req *ListVLANsRequest) (*ListVLANsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVLANs not implemented")
}
func (*UnimplementedCrimsonServer) CreateMachine(ctx context.Context, req *CreateMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (*UnimplementedCrimsonServer) DeleteMachine(ctx context.Context, req *DeleteMachineRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (*UnimplementedCrimsonServer) ListMachines(ctx context.Context, req *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (*UnimplementedCrimsonServer) RenameMachine(ctx context.Context, req *RenameMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameMachine not implemented")
}
func (*UnimplementedCrimsonServer) UpdateMachine(ctx context.Context, req *UpdateMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (*UnimplementedCrimsonServer) CreateNIC(ctx context.Context, req *CreateNICRequest) (*NIC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNIC not implemented")
}
func (*UnimplementedCrimsonServer) DeleteNIC(ctx context.Context, req *DeleteNICRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNIC not implemented")
}
func (*UnimplementedCrimsonServer) ListNICs(ctx context.Context, req *ListNICsRequest) (*ListNICsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNICs not implemented")
}
func (*UnimplementedCrimsonServer) UpdateNIC(ctx context.Context, req *UpdateNICRequest) (*NIC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNIC not implemented")
}
func (*UnimplementedCrimsonServer) CreateDRAC(ctx context.Context, req *CreateDRACRequest) (*DRAC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDRAC not implemented")
}
func (*UnimplementedCrimsonServer) ListDRACs(ctx context.Context, req *ListDRACsRequest) (*ListDRACsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDRACs not implemented")
}
func (*UnimplementedCrimsonServer) UpdateDRAC(ctx context.Context, req *UpdateDRACRequest) (*DRAC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDRAC not implemented")
}
func (*UnimplementedCrimsonServer) CreatePhysicalHost(ctx context.Context, req *CreatePhysicalHostRequest) (*PhysicalHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhysicalHost not implemented")
}
func (*UnimplementedCrimsonServer) ListPhysicalHosts(ctx context.Context, req *ListPhysicalHostsRequest) (*ListPhysicalHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhysicalHosts not implemented")
}
func (*UnimplementedCrimsonServer) UpdatePhysicalHost(ctx context.Context, req *UpdatePhysicalHostRequest) (*PhysicalHost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhysicalHost not implemented")
}
func (*UnimplementedCrimsonServer) FindVMSlots(ctx context.Context, req *FindVMSlotsRequest) (*FindVMSlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindVMSlots not implemented")
}
func (*UnimplementedCrimsonServer) CreateVM(ctx context.Context, req *CreateVMRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (*UnimplementedCrimsonServer) ListVMs(ctx context.Context, req *ListVMsRequest) (*ListVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (*UnimplementedCrimsonServer) UpdateVM(ctx context.Context, req *UpdateVMRequest) (*VM, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVM not implemented")
}
func (*UnimplementedCrimsonServer) DeleteHost(ctx context.Context, req *DeleteHostRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}

func RegisterCrimsonServer(s prpc.Registrar, srv CrimsonServer) {
	s.RegisterService(&_Crimson_serviceDesc, srv)
}

func _Crimson_ListDatacenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatacentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListDatacenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListDatacenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListDatacenters(ctx, req.(*ListDatacentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListFreeIPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFreeIPsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListFreeIPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListFreeIPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListFreeIPs(ctx, req.(*ListFreeIPsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListKVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListKVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListKVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListKVMs(ctx, req.(*ListKVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListOSes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOSesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListOSes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListOSes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListOSes(ctx, req.(*ListOSesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListPlatforms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListPlatforms(ctx, req.(*ListPlatformsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListRacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRacksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListRacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListRacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListRacks(ctx, req.(*ListRacksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListSwitches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSwitchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListSwitches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListSwitches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListSwitches(ctx, req.(*ListSwitchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListVLANs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVLANsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListVLANs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListVLANs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListVLANs(ctx, req.(*ListVLANsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_RenameMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).RenameMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/RenameMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).RenameMachine(ctx, req.(*RenameMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateNIC(ctx, req.(*CreateNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_DeleteNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).DeleteNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/DeleteNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).DeleteNIC(ctx, req.(*DeleteNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListNICs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNICsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListNICs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListNICs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListNICs(ctx, req.(*ListNICsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateNIC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNICRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateNIC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateNIC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateNIC(ctx, req.(*UpdateNICRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateDRAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDRACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateDRAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateDRAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateDRAC(ctx, req.(*CreateDRACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListDRACs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDRACsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListDRACs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListDRACs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListDRACs(ctx, req.(*ListDRACsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateDRAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDRACRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateDRAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateDRAC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateDRAC(ctx, req.(*UpdateDRACRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreatePhysicalHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhysicalHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreatePhysicalHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreatePhysicalHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreatePhysicalHost(ctx, req.(*CreatePhysicalHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListPhysicalHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhysicalHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListPhysicalHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListPhysicalHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListPhysicalHosts(ctx, req.(*ListPhysicalHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdatePhysicalHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhysicalHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdatePhysicalHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdatePhysicalHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdatePhysicalHost(ctx, req.(*UpdatePhysicalHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_FindVMSlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindVMSlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).FindVMSlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/FindVMSlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).FindVMSlots(ctx, req.(*FindVMSlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/CreateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/ListVMs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).ListVMs(ctx, req.(*ListVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_UpdateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).UpdateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/UpdateVM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).UpdateVM(ctx, req.(*UpdateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Crimson_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrimsonServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crimson.Crimson/DeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrimsonServer).DeleteHost(ctx, req.(*DeleteHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crimson_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crimson.Crimson",
	HandlerType: (*CrimsonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDatacenters",
			Handler:    _Crimson_ListDatacenters_Handler,
		},
		{
			MethodName: "ListFreeIPs",
			Handler:    _Crimson_ListFreeIPs_Handler,
		},
		{
			MethodName: "ListKVMs",
			Handler:    _Crimson_ListKVMs_Handler,
		},
		{
			MethodName: "ListOSes",
			Handler:    _Crimson_ListOSes_Handler,
		},
		{
			MethodName: "ListPlatforms",
			Handler:    _Crimson_ListPlatforms_Handler,
		},
		{
			MethodName: "ListRacks",
			Handler:    _Crimson_ListRacks_Handler,
		},
		{
			MethodName: "ListSwitches",
			Handler:    _Crimson_ListSwitches_Handler,
		},
		{
			MethodName: "ListVLANs",
			Handler:    _Crimson_ListVLANs_Handler,
		},
		{
			MethodName: "CreateMachine",
			Handler:    _Crimson_CreateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Crimson_DeleteMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Crimson_ListMachines_Handler,
		},
		{
			MethodName: "RenameMachine",
			Handler:    _Crimson_RenameMachine_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _Crimson_UpdateMachine_Handler,
		},
		{
			MethodName: "CreateNIC",
			Handler:    _Crimson_CreateNIC_Handler,
		},
		{
			MethodName: "DeleteNIC",
			Handler:    _Crimson_DeleteNIC_Handler,
		},
		{
			MethodName: "ListNICs",
			Handler:    _Crimson_ListNICs_Handler,
		},
		{
			MethodName: "UpdateNIC",
			Handler:    _Crimson_UpdateNIC_Handler,
		},
		{
			MethodName: "CreateDRAC",
			Handler:    _Crimson_CreateDRAC_Handler,
		},
		{
			MethodName: "ListDRACs",
			Handler:    _Crimson_ListDRACs_Handler,
		},
		{
			MethodName: "UpdateDRAC",
			Handler:    _Crimson_UpdateDRAC_Handler,
		},
		{
			MethodName: "CreatePhysicalHost",
			Handler:    _Crimson_CreatePhysicalHost_Handler,
		},
		{
			MethodName: "ListPhysicalHosts",
			Handler:    _Crimson_ListPhysicalHosts_Handler,
		},
		{
			MethodName: "UpdatePhysicalHost",
			Handler:    _Crimson_UpdatePhysicalHost_Handler,
		},
		{
			MethodName: "FindVMSlots",
			Handler:    _Crimson_FindVMSlots_Handler,
		},
		{
			MethodName: "CreateVM",
			Handler:    _Crimson_CreateVM_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _Crimson_ListVMs_Handler,
		},
		{
			MethodName: "UpdateVM",
			Handler:    _Crimson_UpdateVM_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _Crimson_DeleteHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tetrafolium/luci-go/machine-db/api/crimson/v1/crimson.proto",
}
