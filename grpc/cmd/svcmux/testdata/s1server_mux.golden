// Code generated by svcmux; DO NOT EDIT

package test

import (
	"context"

	svcmux "github.com/tetrafolium/luci-go/server/svcmux"

	empty "github.com/golang/protobuf/ptypes/empty"
	sub "github.com/tetrafolium/luci-go/grpc/internal/svctool/testdata/sub"
)

type VersionedS1 struct {
	// Default is the version used if X-Luci-Service-Version metadata
	// is not present.
	Default string
	// Impls maps versions to service implementations.
	Impls map[string]S1Server
}

func (s *VersionedS1) M(c context.Context, req *M1) (*M2, error) {
	ver := svcmux.GetServiceVersion(c, s.Default)
	impl := s.Impls[ver]
	if impl == nil {
		return nil, svcmux.NoImplementation(ver)
	}
	return impl.M(c, req)
}

type VersionedS2 struct {
	// Default is the version used if X-Luci-Service-Version metadata
	// is not present.
	Default string
	// Impls maps versions to service implementations.
	Impls map[string]S2Server
}

func (s *VersionedS2) Get(c context.Context, req *Void) (*M1, error) {
	ver := svcmux.GetServiceVersion(c, s.Default)
	impl := s.Impls[ver]
	if impl == nil {
		return nil, svcmux.NoImplementation(ver)
	}
	return impl.Get(c, req)
}

func (s *VersionedS2) Set(c context.Context, req *M1) (*Void, error) {
	ver := svcmux.GetServiceVersion(c, s.Default)
	impl := s.Impls[ver]
	if impl == nil {
		return nil, svcmux.NoImplementation(ver)
	}
	return impl.Set(c, req)
}

func (s *VersionedS2) Imp(c context.Context, req *sub.Sub) (*empty.Empty, error) {
	ver := svcmux.GetServiceVersion(c, s.Default)
	impl := s.Impls[ver]
	if impl == nil {
		return nil, svcmux.NoImplementation(ver)
	}
	return impl.Imp(c, req)
}
