// Copyright 2016 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"text/template"

	"github.com/tetrafolium/luci-go/grpc/internal/svctool"
)

var (
	tmpl = template.Must(template.New("").Parse(
		`// Code generated by svcmux; DO NOT EDIT

package {{.PackageName}}

import (
	"context"

	svcmux "github.com/tetrafolium/luci-go/server/svcmux"

	{{range .ExtraImports}}
	{{.Name}} "{{.Path}}"{{end}}
)

{{range .Services}}
{{$StructName := .StructName}}
type {{$StructName}} struct {
	// Default is the version used if {{$.VersionMetadataKey}} metadata
	// is not present.
	Default string
	// Impls maps versions to service implementations.
	Impls map[string]{{.Service.TypeName}}
}

{{range .Methods}}
func (s *{{$StructName}}) {{.Name}}(c context.Context, req {{.InputType}}) ({{.OutputType}}, error) {
	ver := svcmux.GetServiceVersion(c, s.Default)
	impl := s.Impls[ver]
	if impl == nil {
		return nil, svcmux.NoImplementation(ver)
	}
	return impl.{{.Name}}(c, req)
}
{{end}}
{{end}}
`))
)

type (
	templateArgs struct {
		PackageName        string
		Services           []*service
		VersionMetadataKey string
		ExtraImports       []svctool.Import
	}

	service struct {
		*svctool.Service
		StructName string
	}
)
