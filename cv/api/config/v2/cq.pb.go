// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: github.com/tetrafolium/luci-go/cv/api/config/v2/cq.proto

package config

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/tetrafolium/luci-go/common/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// A boolean with an "unset" default value.
type Toggle int32

const (
	Toggle_UNSET Toggle = 0
	Toggle_YES   Toggle = 1
	Toggle_NO    Toggle = 2
)

// Enum value maps for Toggle.
var (
	Toggle_name = map[int32]string{
		0: "UNSET",
		1: "YES",
		2: "NO",
	}
	Toggle_value = map[string]int32{
		"UNSET": 0,
		"YES":   1,
		"NO":    2,
	}
)

func (x Toggle) Enum() *Toggle {
	p := new(Toggle)
	*p = x
	return p
}

func (x Toggle) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Toggle) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes[0].Descriptor()
}

func (Toggle) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes[0]
}

func (x Toggle) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Toggle.Descriptor instead.
func (Toggle) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{0}
}

// Determines how visible the results of a build for this builder are in Gerrit
// comments.
//
// This doesn't affect the buildbucket plugin (green/red chips).
type CommentLevel int32

const (
	// Currently default to full visibility.
	CommentLevel_COMMENT_LEVEL_UNSET CommentLevel = 0
	// The CQ reports the summary markdown and a link to the buildbucket build id
	// in Milo with the builder name in the URL in a Gerrit comment.
	CommentLevel_COMMENT_LEVEL_FULL CommentLevel = 1
	// The CQ reports a generic "Build failed: https://ci.chromium.org/b/1234"
	// with no summary markdown.
	CommentLevel_COMMENT_LEVEL_RESTRICTED CommentLevel = 2
)

// Enum value maps for CommentLevel.
var (
	CommentLevel_name = map[int32]string{
		0: "COMMENT_LEVEL_UNSET",
		1: "COMMENT_LEVEL_FULL",
		2: "COMMENT_LEVEL_RESTRICTED",
	}
	CommentLevel_value = map[string]int32{
		"COMMENT_LEVEL_UNSET":      0,
		"COMMENT_LEVEL_FULL":       1,
		"COMMENT_LEVEL_RESTRICTED": 2,
	}
)

func (x CommentLevel) Enum() *CommentLevel {
	p := new(CommentLevel)
	*p = x
	return p
}

func (x CommentLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommentLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes[1].Descriptor()
}

func (CommentLevel) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes[1]
}

func (x CommentLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommentLevel.Descriptor instead.
func (CommentLevel) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{1}
}

// See `allow_owner_if_submittable` doc below.
type Verifiers_GerritCQAbility_CQAction int32

const (
	Verifiers_GerritCQAbility_UNSET   Verifiers_GerritCQAbility_CQAction = 0
	Verifiers_GerritCQAbility_DRY_RUN Verifiers_GerritCQAbility_CQAction = 1
	// COMMIT implies ability to trigger dry run as well.
	Verifiers_GerritCQAbility_COMMIT Verifiers_GerritCQAbility_CQAction = 2
)

// Enum value maps for Verifiers_GerritCQAbility_CQAction.
var (
	Verifiers_GerritCQAbility_CQAction_name = map[int32]string{
		0: "UNSET",
		1: "DRY_RUN",
		2: "COMMIT",
	}
	Verifiers_GerritCQAbility_CQAction_value = map[string]int32{
		"UNSET":   0,
		"DRY_RUN": 1,
		"COMMIT":  2,
	}
)

func (x Verifiers_GerritCQAbility_CQAction) Enum() *Verifiers_GerritCQAbility_CQAction {
	p := new(Verifiers_GerritCQAbility_CQAction)
	*p = x
	return p
}

func (x Verifiers_GerritCQAbility_CQAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verifiers_GerritCQAbility_CQAction) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes[2].Descriptor()
}

func (Verifiers_GerritCQAbility_CQAction) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes[2]
}

func (x Verifiers_GerritCQAbility_CQAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verifiers_GerritCQAbility_CQAction.Descriptor instead.
func (Verifiers_GerritCQAbility_CQAction) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 0, 0}
}

// This message describes a CQ configuration.
//
// The config file commit-queue.cfg should be stored in the config directory of
// your project, alongside cr-buildbucket.cfg.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. If present, the CQ will refrain from processing any CLs,
	// on which CQ was triggered after the specified time.
	//
	// This is an UTC RFC3339 (stiptime(tm)) string representing the time.
	// For example, "2017-12-23T15:47:58Z", where Z is required.
	DrainingStartTime string `protobuf:"bytes,1,opt,name=draining_start_time,json=drainingStartTime,proto3" json:"draining_start_time,omitempty"`
	// Optional and deprecated.
	// URL of the CQ status app to push updates to.
	//
	// Deprecated: Do not use.
	CqStatusHost string `protobuf:"bytes,2,opt,name=cq_status_host,json=cqStatusHost,proto3" json:"cq_status_host,omitempty"`
	// Optional options for how CLs should be submitted.
	SubmitOptions *SubmitOptions `protobuf:"bytes,3,opt,name=submit_options,json=submitOptions,proto3" json:"submit_options,omitempty"`
	// At least 1 ConfigGroup is required.
	ConfigGroups []*ConfigGroup `protobuf:"bytes,4,rep,name=config_groups,json=configGroups,proto3" json:"config_groups,omitempty"`
	// DO NOT USE.
	//
	// Deprecated: Do not use.
	ProjectScopedAccount Toggle `protobuf:"varint,5,opt,name=project_scoped_account,json=projectScopedAccount,proto3,enum=cq.config.Toggle" json:"project_scoped_account,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetDrainingStartTime() string {
	if x != nil {
		return x.DrainingStartTime
	}
	return ""
}

// Deprecated: Do not use.
func (x *Config) GetCqStatusHost() string {
	if x != nil {
		return x.CqStatusHost
	}
	return ""
}

func (x *Config) GetSubmitOptions() *SubmitOptions {
	if x != nil {
		return x.SubmitOptions
	}
	return nil
}

func (x *Config) GetConfigGroups() []*ConfigGroup {
	if x != nil {
		return x.ConfigGroups
	}
	return nil
}

// Deprecated: Do not use.
func (x *Config) GetProjectScopedAccount() Toggle {
	if x != nil {
		return x.ProjectScopedAccount
	}
	return Toggle_UNSET
}

// SubmitOptions control how CQ submits CLs.
type SubmitOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional. Maximum number of successful CQ attempts completed by submitting
	// corresponding Gerrit CL(s) before waiting burst_delay.
	//
	// This feature today applies to all attempts processed by this CQ, across all
	// config_groups.
	//
	// Must be >0 to take effect. Requires burst_delay to be set, too.
	MaxBurst int32 `protobuf:"varint,1,opt,name=max_burst,json=maxBurst,proto3" json:"max_burst,omitempty"`
	// Optional. Delay between bursts of submissions of CQ attempts.
	// See max_burst for more info.
	//
	// Must be >0 to take effect. Requires max_burst to be set, too.
	BurstDelay *duration.Duration `protobuf:"bytes,2,opt,name=burst_delay,json=burstDelay,proto3" json:"burst_delay,omitempty"`
}

func (x *SubmitOptions) Reset() {
	*x = SubmitOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOptions) ProtoMessage() {}

func (x *SubmitOptions) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOptions.ProtoReflect.Descriptor instead.
func (*SubmitOptions) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitOptions) GetMaxBurst() int32 {
	if x != nil {
		return x.MaxBurst
	}
	return 0
}

func (x *SubmitOptions) GetBurstDelay() *duration.Duration {
	if x != nil {
		return x.BurstDelay
	}
	return nil
}

// ConfigGroup allows one to share single verifiers config across a set of
// Gerrit repositories, which may be in different Gerrit installations.
type ConfigGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human- and machine-readable name (unique within this project) of this
	// config group. This is used in messages posted to users and in monitoring
	// data. Must match regex "^[a-zA-Z][a-zA-Z0-9_-]*$".
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// At least 1 Gerrit instance with repositories to work with is required.
	Gerrit []*ConfigGroup_Gerrit `protobuf:"bytes,1,rep,name=gerrit,proto3" json:"gerrit,omitempty"`
	// Optional. If specified, CQ will consider sets of dependent CLs to test and
	// submit at the same time.
	//
	// Typical use-case is testing & submitting changes to multiple repos at the
	// same time, in which case all such repos must be declared up-front in
	// `Gerrit` part of this config_group.
	//
	// Not allowed to be used together with
	// submit_options.allow_submit_with_open_deps=true.
	CombineCls *CombineCLs `protobuf:"bytes,4,opt,name=combine_cls,json=combineCls,proto3" json:"combine_cls,omitempty"`
	// Defines how to verify a CL before submitting it. Required.
	Verifiers *Verifiers `protobuf:"bytes,2,opt,name=verifiers,proto3" json:"verifiers,omitempty"`
	// EXPERIMENTAL! TODO(tandrii, crbug/966115): add better doc or remove.
	//
	// If set, this ConfigGroup will be used if no other ConfigGroup matches.
	//
	// At most 1 config_group can be YES.
	//
	// Example use is to define specific config_group for refs/heads/master,
	// and fallback one for refs/heads/* which will pick up all CLs on
	// non-master branches.
	Fallback Toggle `protobuf:"varint,5,opt,name=fallback,proto3,enum=cq.config.Toggle" json:"fallback,omitempty"`
}

func (x *ConfigGroup) Reset() {
	*x = ConfigGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGroup) ProtoMessage() {}

func (x *ConfigGroup) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGroup.ProtoReflect.Descriptor instead.
func (*ConfigGroup) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigGroup) GetGerrit() []*ConfigGroup_Gerrit {
	if x != nil {
		return x.Gerrit
	}
	return nil
}

func (x *ConfigGroup) GetCombineCls() *CombineCLs {
	if x != nil {
		return x.CombineCls
	}
	return nil
}

func (x *ConfigGroup) GetVerifiers() *Verifiers {
	if x != nil {
		return x.Verifiers
	}
	return nil
}

func (x *ConfigGroup) GetFallback() Toggle {
	if x != nil {
		return x.Fallback
	}
	return Toggle_UNSET
}

// CombineCLs defines how CQ works with >1 CL per attempt.
//
// Dependencies between CLs are either implicit via Git child->parent
// relationship (e.g. stacked CLs in Gerrit) or explicit via "CQ-Depend:"
// footer in CL description (next to Change-Id:). "CQ-Depend" may span
// across repositories and even Gerrit hosts. For example, a CL on
// https://pdfium-review.googlesource.com may declare dependency on
// https://chromium-review.googlesource.com/1111111 by adding this footer:
//
//    CQ-Depend: chromium:1111111
//
// The "chromium" part means that 1111111 is on the
// chromium-review.googlesource.com host. It can be omitted if dependency
// is on the same host as the CL depending on it.
//
// CQ-Depend alone or with Git dependencies may form cycles, which is useful
// to require CQ to test & submit all CLs in a cycle at the same time, never
// alone.
//
// A user must vote on CQ label on **each CL** individually. Since it can't be
// instantaneous, `stabilization_delay` controls how long CQ waits for all
// CQ+1/2 votes before computing maximal expanded set of CLs and starting the
// attempt.
//
// For any CL with CQ+1/2 vote, each of its dependency must have the same CQ
// vote and be configured for CQ **in the same config group**, else CQ would
// abort the attempt with appropriate error message.
//
// Each tryjob CQ triggers via Buildbucket will be associated with each CL of
// the attempt via `gerrit_changes` parameter of Buildbucket. These changes are
// then available to a build as it is being executed. If ran via recipes,
// the `ordered_gerrit_changes` property of
// https://chromium.googlesource.com/infra/luci/recipes-py/+/HEAD/README.recipes.md#class-cqapi_recipeapi
// can be used to CLs in the right order.
//
// WARNING: When submitting CLs, CQ can not do so atomically (all submitted or
// none submitted) because Gerrit doesn't support this even for the same repo &
// target_ref.
type CombineCLs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roughly, how long CQ waits for CQ to be triggered on each of the related
	// CLs.
	//
	// Must be greater than 10s.
	// 30s is recommended.
	//
	// Technically precise definition is time to wait since the latest CL among
	// related ones receives CQ+1/2 vote before starting actual attempt.
	//
	// For example, during this delay, a CQ vote may be added on another CL
	// which depends on previously CQ-ed CL in this not-yet-started attempt. Then,
	// CQ would extend the attempt with additional CL and reset the waiting
	// counter.
	//
	// Additional implication is that a standalone CL w/o any other relations to
	// other CLs will need to wait this much time before CQ would start processing
	// it (i.e., before it triggers first tryjob).
	StabilizationDelay *duration.Duration `protobuf:"bytes,1,opt,name=stabilization_delay,json=stabilizationDelay,proto3" json:"stabilization_delay,omitempty"`
}

func (x *CombineCLs) Reset() {
	*x = CombineCLs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombineCLs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombineCLs) ProtoMessage() {}

func (x *CombineCLs) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombineCLs.ProtoReflect.Descriptor instead.
func (*CombineCLs) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{3}
}

func (x *CombineCLs) GetStabilizationDelay() *duration.Duration {
	if x != nil {
		return x.StabilizationDelay
	}
	return nil
}

// Verifiers are various types of checks that a Commit Queue performs on a CL.
// All verifiers must pass in order for a CL to be submitted. Configuration file
// describes types of verifiers that should be applied to each CL and their
// parameters.
type Verifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. GerritCQAbility ensures that a user who triggered
	// this CQ attempt actually has rights to do so based on 3 factors:
	//  * membership of the user in committers & dryrunners group,
	//  * the state of CL/patchset on which CQ is triggered,
	//  * relationship of the user to the CL.
	GerritCqAbility *Verifiers_GerritCQAbility `protobuf:"bytes,1,opt,name=gerrit_cq_ability,json=gerritCqAbility,proto3" json:"gerrit_cq_ability,omitempty"`
	// This verifier is used to check tree status before committing a CL. If the
	// tree is closed, then the verifier will wait until it is reopened.
	TreeStatus *Verifiers_TreeStatus `protobuf:"bytes,2,opt,name=tree_status,json=treeStatus,proto3" json:"tree_status,omitempty"`
	// This verifier triggers a set of builds through Buildbucket.
	//
	// CQ automatically retries failed tryjobs and only allows CL to land if each
	// builder has succeeded in the latest retry.
	// If a given tryjob result is too old (>1 day) it is ignored.
	//
	// Typically, builds from Buildbucket are executed on LUCI stack, however, CQ
	// is agnostic to how and where builds are executed.
	Tryjob *Verifiers_Tryjob `protobuf:"bytes,3,opt,name=tryjob,proto3" json:"tryjob,omitempty"`
	// CQLinter is for internal CQ use only. DO NOT USE IN YOUR cq.cfg.
	Cqlinter *Verifiers_CQLinter `protobuf:"bytes,4,opt,name=cqlinter,proto3" json:"cqlinter,omitempty"`
	// Fake is for internal CQ use only. DO NOT USE IN YOUR cq.cfg.
	Fake *Verifiers_Fake `protobuf:"bytes,5,opt,name=fake,proto3" json:"fake,omitempty"`
}

func (x *Verifiers) Reset() {
	*x = Verifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers) ProtoMessage() {}

func (x *Verifiers) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers.ProtoReflect.Descriptor instead.
func (*Verifiers) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4}
}

func (x *Verifiers) GetGerritCqAbility() *Verifiers_GerritCQAbility {
	if x != nil {
		return x.GerritCqAbility
	}
	return nil
}

func (x *Verifiers) GetTreeStatus() *Verifiers_TreeStatus {
	if x != nil {
		return x.TreeStatus
	}
	return nil
}

func (x *Verifiers) GetTryjob() *Verifiers_Tryjob {
	if x != nil {
		return x.Tryjob
	}
	return nil
}

func (x *Verifiers) GetCqlinter() *Verifiers_CQLinter {
	if x != nil {
		return x.Cqlinter
	}
	return nil
}

func (x *Verifiers) GetFake() *Verifiers_Fake {
	if x != nil {
		return x.Fake
	}
	return nil
}

// Enumerates repositories on a Gerrit instance for which CQ should work.
type ConfigGroup_Gerrit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gerrit URL, e.g., https://chromium-review.googlesource.com.
	// No trailing slashes allowed.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Gerrit projects of this Gerrit instance to work with.
	//
	// At least 1 required.
	Projects []*ConfigGroup_Gerrit_Project `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
}

func (x *ConfigGroup_Gerrit) Reset() {
	*x = ConfigGroup_Gerrit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGroup_Gerrit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGroup_Gerrit) ProtoMessage() {}

func (x *ConfigGroup_Gerrit) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGroup_Gerrit.ProtoReflect.Descriptor instead.
func (*ConfigGroup_Gerrit) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ConfigGroup_Gerrit) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ConfigGroup_Gerrit) GetProjects() []*ConfigGroup_Gerrit_Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

type ConfigGroup_Gerrit_Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repository name inside Gerrit host. Required.
	//
	// No leading or trailing slashes allowed, no '.git' at the end.
	// 'a/' prefix is also not allowed (it's used on *.googlesource.com for
	// forcing authentication).
	//
	// Examples on https://chromium-review.googlesource.com:
	//   catapult
	//   chromium/src
	//   chromium/tools/depot_tools
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Limit CLs in this repo to only these refs. Required.
	//
	// If not specified, defaults to "refs/heads/master".
	//
	// NOTE: your Gerrit admin must configure Gerrit ACLs such that CQ has
	// read access to these refs, otherwise your users will be waiting for CQ
	// to act on their CLs forever.
	//
	// Regular expression is validated by https://github.com/google/re2 library.
	//
	// NOTE: Git globs aren't supported. Convert them to a regular expression,
	// e.g., Git glob "refs/heads/*" should be "refs/heads/[^/]+".
	// However, users typically expect "refs/heads/.+", since expectation is
	// that every typical Git branch to be CQ-able, including
	// "refs/heads/experimental/foobar".
	RefRegexp []string `protobuf:"bytes,2,rep,name=ref_regexp,json=refRegexp,proto3" json:"ref_regexp,omitempty"`
}

func (x *ConfigGroup_Gerrit_Project) Reset() {
	*x = ConfigGroup_Gerrit_Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigGroup_Gerrit_Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigGroup_Gerrit_Project) ProtoMessage() {}

func (x *ConfigGroup_Gerrit_Project) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigGroup_Gerrit_Project.ProtoReflect.Descriptor instead.
func (*ConfigGroup_Gerrit_Project) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *ConfigGroup_Gerrit_Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConfigGroup_Gerrit_Project) GetRefRegexp() []string {
	if x != nil {
		return x.RefRegexp
	}
	return nil
}

type Verifiers_GerritCQAbility struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. List of chrome-infra-auth groups, whose members are authorized
	// to trigger full CQ runs.
	//
	// Typically, such groups are named "project-<name>-committers".
	CommitterList []string `protobuf:"bytes,1,rep,name=committer_list,json=committerList,proto3" json:"committer_list,omitempty"`
	// Optional, but strongly recommended. List of chrome-infra-auth groups,
	// whose members are authorized to trigger CQ dry run on Gerrit CLs they own
	// (not to be confused with OWNER files) even if CL hasn't been approved.
	//
	// Typically, such groups are named "project-<name>-tryjob-access".
	DryRunAccessList []string `protobuf:"bytes,2,rep,name=dry_run_access_list,json=dryRunAccessList,proto3" json:"dry_run_access_list,omitempty"`
	// Optional. allow_submit_with_open_deps controls how CQ full run behaves
	// when current Gerrit CL has open dependencies (not yet submitted CLs on
	// which *this* CL depends).
	//
	// If set to false (default), CQ will abort full run attempt immediately if
	// open dependencies are detected.
	//
	// If set to true, then CQ will not abort full run and upon passing all
	// other verifiers, CQ will attempt to submit the CL regardless of open
	// dependencies and whether CQ verified those open dependencies.
	// In turn, if Gerrit project config allows this, Gerrit will execute submit
	// of all dependent CLs first and then this CL.
	AllowSubmitWithOpenDeps bool `protobuf:"varint,3,opt,name=allow_submit_with_open_deps,json=allowSubmitWithOpenDeps,proto3" json:"allow_submit_with_open_deps,omitempty"`
	// Optional. Allow CL owner to trigger CQ dry or full run on their own CL,
	// even if not a member of `committer_list` or `dry_run_access_list`.
	// Defaults to no such allowance.
	//
	// WARNING: using this option is not recommended if you have sticky
	// Code-Review label because this allows a malicious developer to upload
	// an good looking patchset at first, get code review approval,
	// and then upload a bad patchset and CQ it right away.
	//
	// CL owner is Gerrit user owning a CL, i.e., its first patchset uploader.
	// not to be confused with OWNERS files.
	AllowOwnerIfSubmittable Verifiers_GerritCQAbility_CQAction `protobuf:"varint,4,opt,name=allow_owner_if_submittable,json=allowOwnerIfSubmittable,proto3,enum=cq.config.Verifiers_GerritCQAbility_CQAction" json:"allow_owner_if_submittable,omitempty"`
}

func (x *Verifiers_GerritCQAbility) Reset() {
	*x = Verifiers_GerritCQAbility{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_GerritCQAbility) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_GerritCQAbility) ProtoMessage() {}

func (x *Verifiers_GerritCQAbility) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_GerritCQAbility.ProtoReflect.Descriptor instead.
func (*Verifiers_GerritCQAbility) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Verifiers_GerritCQAbility) GetCommitterList() []string {
	if x != nil {
		return x.CommitterList
	}
	return nil
}

func (x *Verifiers_GerritCQAbility) GetDryRunAccessList() []string {
	if x != nil {
		return x.DryRunAccessList
	}
	return nil
}

func (x *Verifiers_GerritCQAbility) GetAllowSubmitWithOpenDeps() bool {
	if x != nil {
		return x.AllowSubmitWithOpenDeps
	}
	return false
}

func (x *Verifiers_GerritCQAbility) GetAllowOwnerIfSubmittable() Verifiers_GerritCQAbility_CQAction {
	if x != nil {
		return x.AllowOwnerIfSubmittable
	}
	return Verifiers_GerritCQAbility_UNSET
}

type Verifiers_TreeStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. URL of the project tree status app.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *Verifiers_TreeStatus) Reset() {
	*x = Verifiers_TreeStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_TreeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_TreeStatus) ProtoMessage() {}

func (x *Verifiers_TreeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_TreeStatus.ProtoReflect.Descriptor instead.
func (*Verifiers_TreeStatus) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Verifiers_TreeStatus) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Tryjob configures builders which CQ may trigger and/or use to verify CL(s).
type Verifiers_Tryjob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Builders on which tryjobs should be triggered.
	//
	// CQ won't allow adding any builder via `CQ-Include-Trybots:` in CL
	// description except those in this list.
	Builders []*Verifiers_Tryjob_Builder `protobuf:"bytes,1,rep,name=builders,proto3" json:"builders,omitempty"`
	// Optional, defaulting to no retries whatsoever.
	RetryConfig *Verifiers_Tryjob_RetryConfig `protobuf:"bytes,2,opt,name=retry_config,json=retryConfig,proto3" json:"retry_config,omitempty"`
	// DEPRECATED. Use per-builder `cancel_stale` instead.
	//
	// Deprecated: Do not use.
	CancelStaleTryjobs Toggle `protobuf:"varint,3,opt,name=cancel_stale_tryjobs,json=cancelStaleTryjobs,proto3,enum=cq.config.Toggle" json:"cancel_stale_tryjobs,omitempty"`
}

func (x *Verifiers_Tryjob) Reset() {
	*x = Verifiers_Tryjob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_Tryjob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_Tryjob) ProtoMessage() {}

func (x *Verifiers_Tryjob) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_Tryjob.ProtoReflect.Descriptor instead.
func (*Verifiers_Tryjob) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 2}
}

func (x *Verifiers_Tryjob) GetBuilders() []*Verifiers_Tryjob_Builder {
	if x != nil {
		return x.Builders
	}
	return nil
}

func (x *Verifiers_Tryjob) GetRetryConfig() *Verifiers_Tryjob_RetryConfig {
	if x != nil {
		return x.RetryConfig
	}
	return nil
}

// Deprecated: Do not use.
func (x *Verifiers_Tryjob) GetCancelStaleTryjobs() Toggle {
	if x != nil {
		return x.CancelStaleTryjobs
	}
	return Toggle_UNSET
}

// CQLinter is for internal use in CQ.
type Verifiers_CQLinter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Verifiers_CQLinter) Reset() {
	*x = Verifiers_CQLinter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_CQLinter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_CQLinter) ProtoMessage() {}

func (x *Verifiers_CQLinter) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_CQLinter.ProtoReflect.Descriptor instead.
func (*Verifiers_CQLinter) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 3}
}

// Fake is for internal use in CQ.
type Verifiers_Fake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	EventualState string `protobuf:"bytes,2,opt,name=eventual_state,json=eventualState,proto3" json:"eventual_state,omitempty"`
	Delay         int32  `protobuf:"varint,3,opt,name=delay,proto3" json:"delay,omitempty"`
}

func (x *Verifiers_Fake) Reset() {
	*x = Verifiers_Fake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_Fake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_Fake) ProtoMessage() {}

func (x *Verifiers_Fake) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_Fake.ProtoReflect.Descriptor instead.
func (*Verifiers_Fake) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 4}
}

func (x *Verifiers_Fake) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Verifiers_Fake) GetEventualState() string {
	if x != nil {
		return x.EventualState
	}
	return ""
}

func (x *Verifiers_Fake) GetDelay() int32 {
	if x != nil {
		return x.Delay
	}
	return 0
}

type Verifiers_Tryjob_Builder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of the builder as <project>/<bucket>/<builder>
	//
	// Examples:
	//   "chromium/try/linux-tester"
	//   "other-project/try/shared-try-builder"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If true, this builder will only be used if specified via
	// `CQ-Include-Trybots:` on CL description.
	//
	// If false, the builder may still be included via `CQ-Include-Trybots:`
	// on CL description.
	//
	// This is useful if you want individual CLs to opt-in to this builder,
	// e.g.:
	//  builder {name: "win-release"}                      # required for all.
	//  builder {name: "win-debug" includable_only: true}  # opt in only.
	//
	// Not combinable with:
	//   * location_regexp[_exclude]
	//   * experiment_percentage
	//   * triggered_by
	IncludableOnly bool `protobuf:"varint,9,opt,name=includable_only,json=includableOnly,proto3" json:"includable_only,omitempty"`
	// Determines how visible the results of a build for this builder are in
	// Gerrit for this tryjob.
	//
	// This doesn't affect the buildbucket plugin (green/red chips).
	ResultVisibility CommentLevel `protobuf:"varint,10,opt,name=result_visibility,json=resultVisibility,proto3,enum=cq.config.CommentLevel" json:"result_visibility,omitempty"`
	// Optional. If true, a fresh build will be required for each CQ attempt.
	//
	// Default is false, meaning CQ may re-use a successful build
	// triggered before current CQ attempt started.
	//
	// This option is typically used for builders which run depot_tools'
	// PRESUBMIT scripts, which are supposed to be quick to run and provide
	// additional OWNERS, lint, etc checks which are useful to run against
	// the latest revision of the CL's target branch.
	DisableReuse bool `protobuf:"varint,2,opt,name=disable_reuse,json=disableReuse,proto3" json:"disable_reuse,omitempty"`
	// Optional. If YES (default), running or not-yet-started builds of this
	// builder previously triggered by CQ will be cancelled as soon as
	// a substantially different patchset is uploaded to a CL.
	CancelStale Toggle `protobuf:"varint,11,opt,name=cancel_stale,json=cancelStale,proto3,enum=cq.config.Toggle" json:"cancel_stale,omitempty"`
	// Optional name of a builder (aka parent) which will trigger this builder
	// (aka child).
	//
	// If `triggered_by` is not specified (default), CQ will trigger this
	// builder directly.
	//
	// Else, CQ will wait for `triggered_by` (parent) builder to trigger
	// (possibly, indirectly) this (child) builder.
	// Conditions:
	//   * `triggered_by` (parent) builder must set a special property
	//     `triggered_build_ids` upon successful completion with value set
	//     to a list of triggered Buildbucket build IDs,
	//     corresponding to each triggered build. One or more of the IDs must
	//     correspond to this (child) builder, which will then be waited for
	//     by CQ.
	//   * parent->child relationship graph must be a forest (set of a trees).
	//     However, grandparent->parent->child triggering structure isn't well
	//     tested. Please, talk to CQ maintainers to discuss your use case if you
	//     actually need it.
	//
	// Failure/Retry semantics:
	//   * If `triggered_by` (parent) builder succeeds, but doesn't set
	//     the right `triggered_build_ids` then CQ will wait for this child
	//     build to complete for as long as parent build result remains valid.
	//   * If this (child) builder fails and CQ still has retry budget,
	//     CQ will retry a parent builder.
	//
	// For example, given config:
	//   builder { name:         "*/m/mac_compiler" }
	//   builder { name:         "*/m/mac_tester_10.12"
	//             triggered_by: "*/m/mac_compiler" }
	//   builder { name:         "*/m/mac_tester_10.13"
	//             triggered_by: "*/m/mac_compiler" }
	// CQ will trigger and wait for "mac_compiler" to succeed. Then, it'll
	// check its `triggered_build_ids` and find which ones correspond to
	// "mac_tester_10.12" and "mac_tester_10.13" and wait for each to
	// complete.  If say "mac_tester_10.12" fails, CQ will retry
	// "mac_compiler" and expect it to trigger new builds for
	// "mac_tester_10.12" and "mac_tester_10.13".
	TriggeredBy string `protobuf:"bytes,3,opt,name=triggered_by,json=triggeredBy,proto3" json:"triggered_by,omitempty"`
	// Optional. When this field is present, it marks given builder as
	// experimental. It is only triggered on a given percentage of the CLs
	// and the outcome does not affect the decision of whether a CL can land
	// or not. This is typically used to test new builders and estimate their
	// capacity requirements.  May be combined with location_regexp and
	// location_regexp_exclude.
	ExperimentPercentage float32 `protobuf:"fixed32,4,opt,name=experiment_percentage,json=experimentPercentage,proto3" json:"experiment_percentage,omitempty"`
	// Optionally specified alternative builder for CQ to choose instead.
	// If provided, CQ will choose only one of the equivalent builders as
	// required based purely on given CL and CL's owner and **regardless** of
	// the possibly already completed tryjobs.
	//
	// Note: none of the equivalent builders should be part of triggered_by
	// chain, although CQ may eventually relax this requirement.
	EquivalentTo *Verifiers_Tryjob_EquivalentBuilder `protobuf:"bytes,5,opt,name=equivalent_to,json=equivalentTo,proto3" json:"equivalent_to,omitempty"`
	// Optional. Require this builder only if location_regexp matches a file in
	// this CL.
	//
	// This means:
	//   * If specified and no file in a CL matches any of the location_regexp,
	//   then CQ will not care about this builder.
	//   * If a file in a CL matches any location_regexp_exclude, then this file
	//   won't be considered when matching location_regexp.
	//
	// If location_regexp is not specified (default), builder will be used
	// on all CLs.
	//
	// The location_regexp matches are done against the following string:
	//   <gerrit_url>/<gerrit_project_name>/+/<cl_file_path>
	// File path must be relative to root of the repo, and it uses Unix /
	// directory separators.
	//
	// The comparison is a full match; the pattern is implicitly anchored with
	// "^" and "$", so there is no need add them.
	//
	// CQ uses Google's re2 syntax for regexp, documented here:
	// https://github.com/google/re2/wiki/Syntax.
	//
	// Touching a file means either adding, modifying or removing it.
	//
	// These options currently can not be combined with the following other options:
	//   * triggered_by
	//   * GerritCQAbility.allow_submit_with_open_deps
	// If you need to combine them, please talk to CQ owners.
	//
	// Examples:
	//
	//   location_regexp:
	//   "https://chromium-review.googlesource.com/chromium/src/[+]/third_party/blink/.+"
	//     will enable builder for all CLs touching any file in
	//     third_party/blink directory of the chromium/src repo, but not
	//     just the directory itself.
	//
	//   location_regexp:         "https://example.com/repo/[+]/.+"
	//   location_regexp_exclude: "https://example.com/repo/[+]/all/one.txt"
	//     will match a CL which touches at least one file other than
	//     'one.txt' inside all/ directory of the Gerrit project "repo".
	//
	//   location_regexp_exclude: "https://example.com/.+/[+]/one.txt"
	//     will match a CL which touches at least one file other than
	//     'one.txt' in any repository OR belongs to any other Gerrit server.
	//     Note, in this case location_regexp defaults to ".*".
	LocationRegexp        []string `protobuf:"bytes,6,rep,name=location_regexp,json=locationRegexp,proto3" json:"location_regexp,omitempty"`
	LocationRegexpExclude []string `protobuf:"bytes,7,rep,name=location_regexp_exclude,json=locationRegexpExclude,proto3" json:"location_regexp_exclude,omitempty"`
	// If set, this builder will only be triggered if the CL owner (who first
	// uploaded the CL) is a member of at least one of these groups.
	OwnerWhitelistGroup []string `protobuf:"bytes,8,rep,name=owner_whitelist_group,json=ownerWhitelistGroup,proto3" json:"owner_whitelist_group,omitempty"`
}

func (x *Verifiers_Tryjob_Builder) Reset() {
	*x = Verifiers_Tryjob_Builder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_Tryjob_Builder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_Tryjob_Builder) ProtoMessage() {}

func (x *Verifiers_Tryjob_Builder) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_Tryjob_Builder.ProtoReflect.Descriptor instead.
func (*Verifiers_Tryjob_Builder) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 2, 0}
}

func (x *Verifiers_Tryjob_Builder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Verifiers_Tryjob_Builder) GetIncludableOnly() bool {
	if x != nil {
		return x.IncludableOnly
	}
	return false
}

func (x *Verifiers_Tryjob_Builder) GetResultVisibility() CommentLevel {
	if x != nil {
		return x.ResultVisibility
	}
	return CommentLevel_COMMENT_LEVEL_UNSET
}

func (x *Verifiers_Tryjob_Builder) GetDisableReuse() bool {
	if x != nil {
		return x.DisableReuse
	}
	return false
}

func (x *Verifiers_Tryjob_Builder) GetCancelStale() Toggle {
	if x != nil {
		return x.CancelStale
	}
	return Toggle_UNSET
}

func (x *Verifiers_Tryjob_Builder) GetTriggeredBy() string {
	if x != nil {
		return x.TriggeredBy
	}
	return ""
}

func (x *Verifiers_Tryjob_Builder) GetExperimentPercentage() float32 {
	if x != nil {
		return x.ExperimentPercentage
	}
	return 0
}

func (x *Verifiers_Tryjob_Builder) GetEquivalentTo() *Verifiers_Tryjob_EquivalentBuilder {
	if x != nil {
		return x.EquivalentTo
	}
	return nil
}

func (x *Verifiers_Tryjob_Builder) GetLocationRegexp() []string {
	if x != nil {
		return x.LocationRegexp
	}
	return nil
}

func (x *Verifiers_Tryjob_Builder) GetLocationRegexpExclude() []string {
	if x != nil {
		return x.LocationRegexpExclude
	}
	return nil
}

func (x *Verifiers_Tryjob_Builder) GetOwnerWhitelistGroup() []string {
	if x != nil {
		return x.OwnerWhitelistGroup
	}
	return nil
}

type Verifiers_Tryjob_EquivalentBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of this builder.
	// Format is the same in the same format as Builder.name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Percentage expressing probability of CQ triggering this builder instead
	// of the builder to which this builder is equivalent to.
	//
	// A choice itself is made deterministically based on CL alone, hereby
	// all CQ attempts on all patchsets of a given CL will trigger the same
	// builder, assuming CQ config doesn't change in the mean time.
	//
	// Note that if `owner_whitelist_group` is also specified, the choice over
	// which of the two builders to trigger will be made only for CLs owned by
	// whitelisted group.
	//
	// If not specified, defaults to 0, meaning this builder is never
	// triggered by CQ, but an existing build can be re-used by CQ.
	//
	// To illustrate, suppose percentage=10. Then,
	//   Without owner_whitelist_group,
	//      ~10% of all CQ attempts will trigger this builder.
	//   With owner_whitelist_group set and, suppose, 1/5 of CQ attempts are
	//      ran on CLs owned by this group, then only ~(1/10)*(1/5) or
	//      ~2% of all CQ attempts will trigger this builder.
	Percentage float32 `protobuf:"fixed32,2,opt,name=percentage,proto3" json:"percentage,omitempty"`
	// If specified, limits the builder to CL owners in this group.
	OwnerWhitelistGroup string `protobuf:"bytes,3,opt,name=owner_whitelist_group,json=ownerWhitelistGroup,proto3" json:"owner_whitelist_group,omitempty"`
}

func (x *Verifiers_Tryjob_EquivalentBuilder) Reset() {
	*x = Verifiers_Tryjob_EquivalentBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_Tryjob_EquivalentBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_Tryjob_EquivalentBuilder) ProtoMessage() {}

func (x *Verifiers_Tryjob_EquivalentBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_Tryjob_EquivalentBuilder.ProtoReflect.Descriptor instead.
func (*Verifiers_Tryjob_EquivalentBuilder) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 2, 1}
}

func (x *Verifiers_Tryjob_EquivalentBuilder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Verifiers_Tryjob_EquivalentBuilder) GetPercentage() float32 {
	if x != nil {
		return x.Percentage
	}
	return 0
}

func (x *Verifiers_Tryjob_EquivalentBuilder) GetOwnerWhitelistGroup() string {
	if x != nil {
		return x.OwnerWhitelistGroup
	}
	return ""
}

// Builder which can be included via `CQ-Include-Trybots:` in CL
// description.
type Verifiers_Tryjob_IncludableBuilder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Name of this builder.
	// Format is the same in the same format as Builder.name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Verifiers_Tryjob_IncludableBuilder) Reset() {
	*x = Verifiers_Tryjob_IncludableBuilder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_Tryjob_IncludableBuilder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_Tryjob_IncludableBuilder) ProtoMessage() {}

func (x *Verifiers_Tryjob_IncludableBuilder) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_Tryjob_IncludableBuilder.ProtoReflect.Descriptor instead.
func (*Verifiers_Tryjob_IncludableBuilder) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 2, 2}
}

func (x *Verifiers_Tryjob_IncludableBuilder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Collection of parameters for deciding whether to retry a single build.
// If parameter is not specified, its value defaults to 0 (per proto3).
// Thus, omitting all parameters means no retries of any kind.
type Verifiers_Tryjob_RetryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Retry quota for a single tryjob.
	SingleQuota int32 `protobuf:"varint,1,opt,name=single_quota,json=singleQuota,proto3" json:"single_quota,omitempty"`
	// Retry quota for all tryjobs in a CL.
	GlobalQuota int32 `protobuf:"varint,2,opt,name=global_quota,json=globalQuota,proto3" json:"global_quota,omitempty"`
	// The weight assigned to each tryjob failure.
	FailureWeight int32 `protobuf:"varint,3,opt,name=failure_weight,json=failureWeight,proto3" json:"failure_weight,omitempty"`
	// The weight assigned to each transient failure.
	TransientFailureWeight int32 `protobuf:"varint,4,opt,name=transient_failure_weight,json=transientFailureWeight,proto3" json:"transient_failure_weight,omitempty"`
	// The weight assigned to tryjob timeouts.
	TimeoutWeight int32 `protobuf:"varint,5,opt,name=timeout_weight,json=timeoutWeight,proto3" json:"timeout_weight,omitempty"`
}

func (x *Verifiers_Tryjob_RetryConfig) Reset() {
	*x = Verifiers_Tryjob_RetryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Verifiers_Tryjob_RetryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifiers_Tryjob_RetryConfig) ProtoMessage() {}

func (x *Verifiers_Tryjob_RetryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifiers_Tryjob_RetryConfig.ProtoReflect.Descriptor instead.
func (*Verifiers_Tryjob_RetryConfig) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP(), []int{4, 2, 3}
}

func (x *Verifiers_Tryjob_RetryConfig) GetSingleQuota() int32 {
	if x != nil {
		return x.SingleQuota
	}
	return 0
}

func (x *Verifiers_Tryjob_RetryConfig) GetGlobalQuota() int32 {
	if x != nil {
		return x.GlobalQuota
	}
	return 0
}

func (x *Verifiers_Tryjob_RetryConfig) GetFailureWeight() int32 {
	if x != nil {
		return x.FailureWeight
	}
	return 0
}

func (x *Verifiers_Tryjob_RetryConfig) GetTransientFailureWeight() int32 {
	if x != nil {
		return x.TransientFailureWeight
	}
	return 0
}

func (x *Verifiers_Tryjob_RetryConfig) GetTimeoutWeight() int32 {
	if x != nil {
		return x.TimeoutWeight
	}
	return 0
}

var File_go_chromium_org_luci_cv_api_config_v2_cq_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x63, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x02, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x63, 0x71, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0c, 0x63, 0x71, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x71, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x71, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12,
	0x4b, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x68, 0x0a, 0x0d,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x97, 0x03, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x71, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x52, 0x06, 0x67, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x43, 0x4c, 0x73, 0x52, 0x0a, 0x63,
	0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x43, 0x6c, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x52, 0x09, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2d, 0x0a,
	0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x11, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x52, 0x08, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x1a, 0x9b, 0x01, 0x0a,
	0x06, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x71,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x22, 0x58, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x43, 0x4c, 0x73, 0x12, 0x4a,
	0x0a, 0x13, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x97, 0x0f, 0x0a, 0x09, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x11, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x5f, 0x63, 0x71, 0x5f, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x43, 0x51, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x67, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x43, 0x71, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x74, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x06,
	0x74, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x52, 0x06, 0x74, 0x72, 0x79, 0x6a, 0x6f,
	0x62, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x71, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x43, 0x51, 0x4c, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x08, 0x63, 0x71, 0x6c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x04,
	0x66, 0x61, 0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x71, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x2e, 0x46, 0x61, 0x6b, 0x65, 0x52, 0x04, 0x66, 0x61, 0x6b, 0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x0f,
	0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x43, 0x51, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75,
	0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x64, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x65, 0x70, 0x73, 0x12, 0x6a, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x5f, 0x69, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x47, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x43, 0x51, 0x41, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x51,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x66, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x2e, 0x0a, 0x08, 0x43, 0x51, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x52, 0x59, 0x5f, 0x52, 0x55,
	0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x1a,
	0x1e, 0x0a, 0x0a, 0x54, 0x72, 0x65, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a,
	0x8d, 0x09, 0x0a, 0x06, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x12, 0x3f, 0x0a, 0x08, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x2e, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x73,
	0x1a, 0xa8, 0x04, 0x0a, 0x07, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x44, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x71, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x10, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x75, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x71, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x52, 0x0b, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x42, 0x79, 0x12, 0x33, 0x0a,
	0x15, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x71, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x79, 0x6a, 0x6f, 0x62, 0x2e, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x65, 0x71, 0x75, 0x69, 0x76, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12,
	0x36, 0x0a, 0x17, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x68, 0x69,
	0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x7b, 0x0a, 0x11, 0x45,
	0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x77, 0x68,
	0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x57, 0x68, 0x69, 0x74, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x27, 0x0a, 0x11, 0x49, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0xdb, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38,
	0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a,
	0x0a, 0x0a, 0x08, 0x43, 0x51, 0x4c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x57, 0x0a, 0x04, 0x46,
	0x61, 0x6b, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x2a, 0x24, 0x0a, 0x06, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x02, 0x2a, 0x5d, 0x0a, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x42, 0x75, 0x5a, 0x2c, 0x67, 0x6f, 0x2e,
	0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63,
	0x69, 0x2f, 0x63, 0x76, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x76, 0x32, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa2, 0xfe, 0x23, 0x43, 0x0a, 0x41, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2d, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x3a,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x2d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x63, 0x66, 0x67,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescData = file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDesc
)

func file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescData)
	})
	return file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDescData
}

var file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_go_chromium_org_luci_cv_api_config_v2_cq_proto_goTypes = []interface{}{
	(Toggle)(0),                                // 0: cq.config.Toggle
	(CommentLevel)(0),                          // 1: cq.config.CommentLevel
	(Verifiers_GerritCQAbility_CQAction)(0),    // 2: cq.config.Verifiers.GerritCQAbility.CQAction
	(*Config)(nil),                             // 3: cq.config.Config
	(*SubmitOptions)(nil),                      // 4: cq.config.SubmitOptions
	(*ConfigGroup)(nil),                        // 5: cq.config.ConfigGroup
	(*CombineCLs)(nil),                         // 6: cq.config.CombineCLs
	(*Verifiers)(nil),                          // 7: cq.config.Verifiers
	(*ConfigGroup_Gerrit)(nil),                 // 8: cq.config.ConfigGroup.Gerrit
	(*ConfigGroup_Gerrit_Project)(nil),         // 9: cq.config.ConfigGroup.Gerrit.Project
	(*Verifiers_GerritCQAbility)(nil),          // 10: cq.config.Verifiers.GerritCQAbility
	(*Verifiers_TreeStatus)(nil),               // 11: cq.config.Verifiers.TreeStatus
	(*Verifiers_Tryjob)(nil),                   // 12: cq.config.Verifiers.Tryjob
	(*Verifiers_CQLinter)(nil),                 // 13: cq.config.Verifiers.CQLinter
	(*Verifiers_Fake)(nil),                     // 14: cq.config.Verifiers.Fake
	(*Verifiers_Tryjob_Builder)(nil),           // 15: cq.config.Verifiers.Tryjob.Builder
	(*Verifiers_Tryjob_EquivalentBuilder)(nil), // 16: cq.config.Verifiers.Tryjob.EquivalentBuilder
	(*Verifiers_Tryjob_IncludableBuilder)(nil), // 17: cq.config.Verifiers.Tryjob.IncludableBuilder
	(*Verifiers_Tryjob_RetryConfig)(nil),       // 18: cq.config.Verifiers.Tryjob.RetryConfig
	(*duration.Duration)(nil),                  // 19: google.protobuf.Duration
}
var file_go_chromium_org_luci_cv_api_config_v2_cq_proto_depIdxs = []int32{
	4,  // 0: cq.config.Config.submit_options:type_name -> cq.config.SubmitOptions
	5,  // 1: cq.config.Config.config_groups:type_name -> cq.config.ConfigGroup
	0,  // 2: cq.config.Config.project_scoped_account:type_name -> cq.config.Toggle
	19, // 3: cq.config.SubmitOptions.burst_delay:type_name -> google.protobuf.Duration
	8,  // 4: cq.config.ConfigGroup.gerrit:type_name -> cq.config.ConfigGroup.Gerrit
	6,  // 5: cq.config.ConfigGroup.combine_cls:type_name -> cq.config.CombineCLs
	7,  // 6: cq.config.ConfigGroup.verifiers:type_name -> cq.config.Verifiers
	0,  // 7: cq.config.ConfigGroup.fallback:type_name -> cq.config.Toggle
	19, // 8: cq.config.CombineCLs.stabilization_delay:type_name -> google.protobuf.Duration
	10, // 9: cq.config.Verifiers.gerrit_cq_ability:type_name -> cq.config.Verifiers.GerritCQAbility
	11, // 10: cq.config.Verifiers.tree_status:type_name -> cq.config.Verifiers.TreeStatus
	12, // 11: cq.config.Verifiers.tryjob:type_name -> cq.config.Verifiers.Tryjob
	13, // 12: cq.config.Verifiers.cqlinter:type_name -> cq.config.Verifiers.CQLinter
	14, // 13: cq.config.Verifiers.fake:type_name -> cq.config.Verifiers.Fake
	9,  // 14: cq.config.ConfigGroup.Gerrit.projects:type_name -> cq.config.ConfigGroup.Gerrit.Project
	2,  // 15: cq.config.Verifiers.GerritCQAbility.allow_owner_if_submittable:type_name -> cq.config.Verifiers.GerritCQAbility.CQAction
	15, // 16: cq.config.Verifiers.Tryjob.builders:type_name -> cq.config.Verifiers.Tryjob.Builder
	18, // 17: cq.config.Verifiers.Tryjob.retry_config:type_name -> cq.config.Verifiers.Tryjob.RetryConfig
	0,  // 18: cq.config.Verifiers.Tryjob.cancel_stale_tryjobs:type_name -> cq.config.Toggle
	1,  // 19: cq.config.Verifiers.Tryjob.Builder.result_visibility:type_name -> cq.config.CommentLevel
	0,  // 20: cq.config.Verifiers.Tryjob.Builder.cancel_stale:type_name -> cq.config.Toggle
	16, // 21: cq.config.Verifiers.Tryjob.Builder.equivalent_to:type_name -> cq.config.Verifiers.Tryjob.EquivalentBuilder
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_cv_api_config_v2_cq_proto_init() }
func file_go_chromium_org_luci_cv_api_config_v2_cq_proto_init() {
	if File_go_chromium_org_luci_cv_api_config_v2_cq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombineCLs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGroup_Gerrit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigGroup_Gerrit_Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_GerritCQAbility); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_TreeStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_Tryjob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_CQLinter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_Fake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_Tryjob_Builder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_Tryjob_EquivalentBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_Tryjob_IncludableBuilder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Verifiers_Tryjob_RetryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_go_chromium_org_luci_cv_api_config_v2_cq_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_cv_api_config_v2_cq_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_cv_api_config_v2_cq_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_cv_api_config_v2_cq_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_cv_api_config_v2_cq_proto = out.File
	file_go_chromium_org_luci_cv_api_config_v2_cq_proto_rawDesc = nil
	file_go_chromium_org_luci_cv_api_config_v2_cq_proto_goTypes = nil
	file_go_chromium_org_luci_cv_api_config_v2_cq_proto_depIdxs = nil
}
