// Copyright 2019 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package cq.recipe;

option go_package = "github.com/tetrafolium/luci-go/cv/api/recipe/v1;recipe";

// Input provides CQ metadata for CQ-triggered tryjob.
message Input {
  // If true, CQ is active for the current build. CQ is considered "active" for
  // a build if CQ triggered the build, either directly or indirectly.
  bool active = 1;

  // If false, CQ would try to submit CL(s) if all other checks pass.
  // If true, CQ won't try to submit.
  bool dry_run = 2;

  // If true, CQ will not take this build into account while deciding whether
  // CL is good or not. See also `experiment_percentage` of CQ's config file.
  bool experimental = 3;

  // If true, CQ triggered this build directly, otherwise typically indicates a
  // child build triggered by a CQ triggered one (possibly indirectly).
  //
  // Can be spoofed. *DO NOT USE FOR SECURITY CHECKS.*
  //
  // One possible use is to distinguish which builds must be cancelled manually,
  // and which (top_level=True) CQ would cancel itself.
  bool top_level = 4;
}
