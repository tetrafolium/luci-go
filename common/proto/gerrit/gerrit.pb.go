// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.1
// source: github.com/tetrafolium/luci-go/common/proto/gerrit/gerrit.proto

package gerrit

import prpc "github.com/tetrafolium/luci-go/grpc/prpc"

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Specifies what extra information to include in the response.
//
// Source of truth:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#query-options
type QueryOption int32

const (
	QueryOption_OPTION_UNSPECIFIED QueryOption = 0
	// A summary of each label required for submit, and approvers that have
	// granted (or rejected) with that label.
	QueryOption_LABELS QueryOption = 1
	// Detailed label information, including numeric values of all existing
	// approvals, recognized label values, values permitted to be set by the
	// current user, all reviewers by state, and reviewers that may be removed by
	// the current user.
	QueryOption_DETAILED_LABELS QueryOption = 2
	// Describe the current revision (patch set) of the change, including the
	// commit SHA-1 and URLs to fetch from.
	QueryOption_CURRENT_REVISION QueryOption = 4
	// Describe all revisions, not just current.
	QueryOption_ALL_REVISIONS QueryOption = 8
	// Parse and output all header fields from the commit object, including
	// message. Only valid when the CURRENT_REVISION or ALL_REVISIONS option is
	// selected.
	QueryOption_CURRENT_COMMIT QueryOption = 16
	// Parse and output all header fields from the output revisions. If only
	// CURRENT_REVISION was requested then only the current revision’s commit data
	// will be output.
	QueryOption_ALL_COMMITS QueryOption = 32
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. Only valid when the CURRENT_REVISION or
	// ALL_REVISIONS option is selected.
	QueryOption_CURRENT_FILES QueryOption = 64
	// List files modified by the commit and magic files, including basic line
	// counts inserted/deleted per file. If only the CURRENT_REVISION was
	// requested then only that commit’s modified files will be output.
	QueryOption_ALL_FILES QueryOption = 128
	// Include _account_id, email and username fields when referencing accounts.
	QueryOption_DETAILED_ACCOUNTS QueryOption = 256
	// Include updates to reviewers set as ReviewerUpdateInfo entities.
	QueryOption_REVIEWER_UPDATES QueryOption = 512
	// Include messages associated with the change.
	QueryOption_MESSAGES QueryOption = 1024
	// Include information on available actions for the change and its current
	// revision. Ignored if the caller is not authenticated.
	QueryOption_CURRENT_ACTIONS QueryOption = 2048
	// Include information on available change actions for the change. Ignored if
	// the caller is not authenticated.
	QueryOption_CHANGE_ACTIONS QueryOption = 4096
	// Include the reviewed field if all of the following are true:
	// - the change is open
	// - the caller is authenticated
	// - the caller has commented on the change more recently than the last update
	//   from the change owner, i.e. this change would show up in the results of
	//   reviewedby:self.
	QueryOption_REVIEWED QueryOption = 8192
	// Skip the mergeable field in ChangeInfo. For fast moving projects, this
	// field must be recomputed often, which is slow for projects with big trees.
	QueryOption_SKIP_MERGEABLE QueryOption = 16384
	// Include the submittable field in ChangeInfo, which can be used to tell if
	// the change is reviewed and ready for submit.
	QueryOption_SUBMITTABLE QueryOption = 32768
	// Include the web_links field in CommitInfo, therefore only valid in
	// combination with CURRENT_COMMIT or ALL_COMMITS.
	QueryOption_WEB_LINKS QueryOption = 65536
	// Include potential problems with the change.
	QueryOption_CHECK QueryOption = 131072
	// Include the full commit message with Gerrit-specific commit footers in the
	// RevisionInfo.
	QueryOption_COMMIT_FOOTERS QueryOption = 262144
	// Include push certificate information in the RevisionInfo. Ignored if signed
	// push is not enabled on the server.
	QueryOption_PUSH_CERTIFICATES QueryOption = 524288
	// Include references to external tracking systems as TrackingIdInfo.
	QueryOption_TRACKING_IDS QueryOption = 1048576
	// Include the commands field in the FetchInfo for revisions. Only valid when
	// the CURRENT_REVISION or ALL_REVISIONS option is selected.
	QueryOption_DOWNLOAD_COMMANDS QueryOption = 2097152
)

// Enum value maps for QueryOption.
var (
	QueryOption_name = map[int32]string{
		0:       "OPTION_UNSPECIFIED",
		1:       "LABELS",
		2:       "DETAILED_LABELS",
		4:       "CURRENT_REVISION",
		8:       "ALL_REVISIONS",
		16:      "CURRENT_COMMIT",
		32:      "ALL_COMMITS",
		64:      "CURRENT_FILES",
		128:     "ALL_FILES",
		256:     "DETAILED_ACCOUNTS",
		512:     "REVIEWER_UPDATES",
		1024:    "MESSAGES",
		2048:    "CURRENT_ACTIONS",
		4096:    "CHANGE_ACTIONS",
		8192:    "REVIEWED",
		16384:   "SKIP_MERGEABLE",
		32768:   "SUBMITTABLE",
		65536:   "WEB_LINKS",
		131072:  "CHECK",
		262144:  "COMMIT_FOOTERS",
		524288:  "PUSH_CERTIFICATES",
		1048576: "TRACKING_IDS",
		2097152: "DOWNLOAD_COMMANDS",
	}
	QueryOption_value = map[string]int32{
		"OPTION_UNSPECIFIED": 0,
		"LABELS":             1,
		"DETAILED_LABELS":    2,
		"CURRENT_REVISION":   4,
		"ALL_REVISIONS":      8,
		"CURRENT_COMMIT":     16,
		"ALL_COMMITS":        32,
		"CURRENT_FILES":      64,
		"ALL_FILES":          128,
		"DETAILED_ACCOUNTS":  256,
		"REVIEWER_UPDATES":   512,
		"MESSAGES":           1024,
		"CURRENT_ACTIONS":    2048,
		"CHANGE_ACTIONS":     4096,
		"REVIEWED":           8192,
		"SKIP_MERGEABLE":     16384,
		"SUBMITTABLE":        32768,
		"WEB_LINKS":          65536,
		"CHECK":              131072,
		"COMMIT_FOOTERS":     262144,
		"PUSH_CERTIFICATES":  524288,
		"TRACKING_IDS":       1048576,
		"DOWNLOAD_COMMANDS":  2097152,
	}
)

func (x QueryOption) Enum() *QueryOption {
	p := new(QueryOption)
	*p = x
	return p
}

func (x QueryOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryOption) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[0].Descriptor()
}

func (QueryOption) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[0]
}

func (x QueryOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryOption.Descriptor instead.
func (QueryOption) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{0}
}

type MergeableStrategy int32

const (
	MergeableStrategy_MERGEABLE_STRATEGY_UNSPECIFIED MergeableStrategy = 0
	MergeableStrategy_RECURSIVE                      MergeableStrategy = 1
	MergeableStrategy_RESOLVE                        MergeableStrategy = 2
	MergeableStrategy_SIMPLE_TWO_WAY_IN_CORE         MergeableStrategy = 3
	MergeableStrategy_OURS                           MergeableStrategy = 4
	MergeableStrategy_THEIRS                         MergeableStrategy = 5
)

// Enum value maps for MergeableStrategy.
var (
	MergeableStrategy_name = map[int32]string{
		0: "MERGEABLE_STRATEGY_UNSPECIFIED",
		1: "RECURSIVE",
		2: "RESOLVE",
		3: "SIMPLE_TWO_WAY_IN_CORE",
		4: "OURS",
		5: "THEIRS",
	}
	MergeableStrategy_value = map[string]int32{
		"MERGEABLE_STRATEGY_UNSPECIFIED": 0,
		"RECURSIVE":                      1,
		"RESOLVE":                        2,
		"SIMPLE_TWO_WAY_IN_CORE":         3,
		"OURS":                           4,
		"THEIRS":                         5,
	}
)

func (x MergeableStrategy) Enum() *MergeableStrategy {
	p := new(MergeableStrategy)
	*p = x
	return p
}

func (x MergeableStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeableStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[1].Descriptor()
}

func (MergeableStrategy) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[1]
}

func (x MergeableStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MergeableStrategy.Descriptor instead.
func (MergeableStrategy) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{1}
}

type ChangeInfo_Status int32

const (
	ChangeInfo_STATUS_INVALID ChangeInfo_Status = 0
	ChangeInfo_NEW            ChangeInfo_Status = 1
	ChangeInfo_MERGED         ChangeInfo_Status = 2
	ChangeInfo_ABANDONED      ChangeInfo_Status = 3
)

// Enum value maps for ChangeInfo_Status.
var (
	ChangeInfo_Status_name = map[int32]string{
		0: "STATUS_INVALID",
		1: "NEW",
		2: "MERGED",
		3: "ABANDONED",
	}
	ChangeInfo_Status_value = map[string]int32{
		"STATUS_INVALID": 0,
		"NEW":            1,
		"MERGED":         2,
		"ABANDONED":      3,
	}
)

func (x ChangeInfo_Status) Enum() *ChangeInfo_Status {
	p := new(ChangeInfo_Status)
	*p = x
	return p
}

func (x ChangeInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[2].Descriptor()
}

func (ChangeInfo_Status) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[2]
}

func (x ChangeInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeInfo_Status.Descriptor instead.
func (ChangeInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{4, 0}
}

// The kind of change for this revision.
type RevisionInfo_Kind int32

const (
	RevisionInfo_KIND_INVALID              RevisionInfo_Kind = 0
	RevisionInfo_REWORK                    RevisionInfo_Kind = 1
	RevisionInfo_TRIVIAL_REBASE            RevisionInfo_Kind = 2
	RevisionInfo_MERGE_FIRST_PARENT_UPDATE RevisionInfo_Kind = 3
	RevisionInfo_NO_CODE_CHANGE            RevisionInfo_Kind = 4
	RevisionInfo_NO_CHANGE                 RevisionInfo_Kind = 5
)

// Enum value maps for RevisionInfo_Kind.
var (
	RevisionInfo_Kind_name = map[int32]string{
		0: "KIND_INVALID",
		1: "REWORK",
		2: "TRIVIAL_REBASE",
		3: "MERGE_FIRST_PARENT_UPDATE",
		4: "NO_CODE_CHANGE",
		5: "NO_CHANGE",
	}
	RevisionInfo_Kind_value = map[string]int32{
		"KIND_INVALID":              0,
		"REWORK":                    1,
		"TRIVIAL_REBASE":            2,
		"MERGE_FIRST_PARENT_UPDATE": 3,
		"NO_CODE_CHANGE":            4,
		"NO_CHANGE":                 5,
	}
)

func (x RevisionInfo_Kind) Enum() *RevisionInfo_Kind {
	p := new(RevisionInfo_Kind)
	*p = x
	return p
}

func (x RevisionInfo_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RevisionInfo_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[3].Descriptor()
}

func (RevisionInfo_Kind) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[3]
}

func (x RevisionInfo_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RevisionInfo_Kind.Descriptor instead.
func (RevisionInfo_Kind) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{5, 0}
}

type FileInfo_Status int32

const (
	FileInfo_M FileInfo_Status = 0 // Modified (default; omitted)
	FileInfo_A FileInfo_Status = 1 // Added
	FileInfo_D FileInfo_Status = 2 // Deleted
	FileInfo_R FileInfo_Status = 3 // Renamed
	FileInfo_C FileInfo_Status = 4 // Copied
	FileInfo_W FileInfo_Status = 5 // Rewritten
)

// Enum value maps for FileInfo_Status.
var (
	FileInfo_Status_name = map[int32]string{
		0: "M",
		1: "A",
		2: "D",
		3: "R",
		4: "C",
		5: "W",
	}
	FileInfo_Status_value = map[string]int32{
		"M": 0,
		"A": 1,
		"D": 2,
		"R": 3,
		"C": 4,
		"W": 5,
	}
)

func (x FileInfo_Status) Enum() *FileInfo_Status {
	p := new(FileInfo_Status)
	*p = x
	return p
}

func (x FileInfo_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileInfo_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[4].Descriptor()
}

func (FileInfo_Status) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[4]
}

func (x FileInfo_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileInfo_Status.Descriptor instead.
func (FileInfo_Status) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{8, 0}
}

type MergeableInfo_SubmitType int32

const (
	MergeableInfo_SUBMIT_TYPE_UNSPECIFIED MergeableInfo_SubmitType = 0
	MergeableInfo_MERGE_IF_NECESSARY      MergeableInfo_SubmitType = 1
	MergeableInfo_FAST_FORWARD_ONLY       MergeableInfo_SubmitType = 2
	MergeableInfo_REBASE_IF_NECESSARY     MergeableInfo_SubmitType = 3
	MergeableInfo_REBASE_ALWAYS           MergeableInfo_SubmitType = 4
	MergeableInfo_MERGE_ALWAYS            MergeableInfo_SubmitType = 5
	MergeableInfo_CHERRY_PICK             MergeableInfo_SubmitType = 6
)

// Enum value maps for MergeableInfo_SubmitType.
var (
	MergeableInfo_SubmitType_name = map[int32]string{
		0: "SUBMIT_TYPE_UNSPECIFIED",
		1: "MERGE_IF_NECESSARY",
		2: "FAST_FORWARD_ONLY",
		3: "REBASE_IF_NECESSARY",
		4: "REBASE_ALWAYS",
		5: "MERGE_ALWAYS",
		6: "CHERRY_PICK",
	}
	MergeableInfo_SubmitType_value = map[string]int32{
		"SUBMIT_TYPE_UNSPECIFIED": 0,
		"MERGE_IF_NECESSARY":      1,
		"FAST_FORWARD_ONLY":       2,
		"REBASE_IF_NECESSARY":     3,
		"REBASE_ALWAYS":           4,
		"MERGE_ALWAYS":            5,
		"CHERRY_PICK":             6,
	}
)

func (x MergeableInfo_SubmitType) Enum() *MergeableInfo_SubmitType {
	p := new(MergeableInfo_SubmitType)
	*p = x
	return p
}

func (x MergeableInfo_SubmitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MergeableInfo_SubmitType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[5].Descriptor()
}

func (MergeableInfo_SubmitType) Type() protoreflect.EnumType {
	return &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes[5]
}

func (x MergeableInfo_SubmitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MergeableInfo_SubmitType.Descriptor instead.
func (MergeableInfo_SubmitType) EnumDescriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{18, 0}
}

// Request to list changes based on a query.
type ListChangesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query used to filter the changes.
	//
	// This is the same as the query that can be used in the Gerrit web UI. It is
	// space-separated and can include filters like "label:Commit-Queue" or
	// "status:open". The possible search operators are described at:
	// https://gerrit-review.googlesource.com/Documentation/user-search.html
	//
	// An empty query matches all changes.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// What to include in the response.
	Options []QueryOption `protobuf:"varint,2,rep,packed,name=options,proto3,enum=gerrit.QueryOption" json:"options,omitempty"`
	// The number of results to return. This should always be provided.
	Limit int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// The number of changes to skip from the start, for pagination.
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListChangesRequest) Reset() {
	*x = ListChangesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChangesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChangesRequest) ProtoMessage() {}

func (x *ListChangesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChangesRequest.ProtoReflect.Descriptor instead.
func (*ListChangesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{0}
}

func (x *ListChangesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ListChangesRequest) GetOptions() []QueryOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ListChangesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListChangesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// A list of changes that matched the query.
type ListChangesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The changes that matched the query, with the fields requested.
	Changes []*ChangeInfo `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	// True if there are more changes not returned.
	//
	// This will be set if the number of changes matching the query exceeds the
	// limit supplied; however, it's possible that if the number exceeds some
	// internal Gerrit maximum, this will not be set.
	//
	// Specifically (as of Dec 2018) Google's Gerrit instance will not look
	// beyond a maximum hardcoded in Gerrit backend of 10k changes in the index
	// of changes, and so if a query matches more than that many changes, Gerrit
	// backend may not know and may not set "_more_changes".
	MoreChanges bool `protobuf:"varint,2,opt,name=more_changes,json=moreChanges,proto3" json:"more_changes,omitempty"`
}

func (x *ListChangesResponse) Reset() {
	*x = ListChangesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChangesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChangesResponse) ProtoMessage() {}

func (x *ListChangesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChangesResponse.ProtoReflect.Descriptor instead.
func (*ListChangesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{1}
}

func (x *ListChangesResponse) GetChanges() []*ChangeInfo {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *ListChangesResponse) GetMoreChanges() bool {
	if x != nil {
		return x.MoreChanges
	}
	return false
}

// Request to get information for a single change.
//
// Encodes path arguments and query options described at
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
type GetChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// What to include in the response.
	Options []QueryOption `protobuf:"varint,2,rep,packed,name=options,proto3,enum=gerrit.QueryOption" json:"options,omitempty"`
}

func (x *GetChangeRequest) Reset() {
	*x = GetChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangeRequest) ProtoMessage() {}

func (x *GetChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangeRequest.ProtoReflect.Descriptor instead.
func (*GetChangeRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{2}
}

func (x *GetChangeRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *GetChangeRequest) GetOptions() []QueryOption {
	if x != nil {
		return x.Options
	}
	return nil
}

// Information about an account.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-accounts.html#account-info
type AccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full name of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The email address the user prefers to be contacted through.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and options DETAILS and ALL_EMAILS for account queries.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// A list of the secondary email addresses of the user.
	// Only set for account queries when the ALL_EMAILS option or the suggest
	// parameter is set. Secondary emails are only included if the calling user
	// has the Modify Account, and hence is allowed to see secondary emails of
	// other users.
	SecondaryEmails []string `protobuf:"bytes,3,rep,name=secondary_emails,json=secondaryEmails,proto3" json:"secondary_emails,omitempty"`
	// The username of the user.
	// Only set if detailed account information is requested.
	// See option DETAILED_ACCOUNTS for change queries
	// and option DETAILS for account queries.
	Username string `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{3}
}

func (x *AccountInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AccountInfo) GetSecondaryEmails() []string {
	if x != nil {
		return x.SecondaryEmails
	}
	return nil
}

func (x *AccountInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// Information about a change.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-info
type ChangeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The owner of the change.
	Owner *AccountInfo `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The project of this change. For example, "chromium/src".
	Project string `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	// Ref that this change targets, e.g.: refs/heads/master
	//
	// Note that the gerrit API may return short branch name (master instead of
	// refs/heads/master) but we convert it to a ref for consistency across the
	// API.
	Ref    string            `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	Status ChangeInfo_Status `protobuf:"varint,5,opt,name=status,proto3,enum=gerrit.ChangeInfo_Status" json:"status,omitempty"`
	// Current revision of the change.
	//
	// See:
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	CurrentRevision string `protobuf:"bytes,6,opt,name=current_revision,json=currentRevision,proto3" json:"current_revision,omitempty"`
	// A map of patch set commit IDs to RevisionInfos.
	//
	// Only set if revision information is requested.
	Revisions map[string]*RevisionInfo `protobuf:"bytes,7,rep,name=revisions,proto3" json:"revisions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A map of label names to LabelInfos.
	//
	// Only set if label info is requested.
	Labels map[string]*LabelInfo `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Messages associated with the change.
	//
	// Only set if messages are requested.
	Messages []*ChangeMessageInfo `protobuf:"bytes,9,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *ChangeInfo) Reset() {
	*x = ChangeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeInfo) ProtoMessage() {}

func (x *ChangeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeInfo.ProtoReflect.Descriptor instead.
func (*ChangeInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{4}
}

func (x *ChangeInfo) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ChangeInfo) GetOwner() *AccountInfo {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ChangeInfo) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ChangeInfo) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *ChangeInfo) GetStatus() ChangeInfo_Status {
	if x != nil {
		return x.Status
	}
	return ChangeInfo_STATUS_INVALID
}

func (x *ChangeInfo) GetCurrentRevision() string {
	if x != nil {
		return x.CurrentRevision
	}
	return ""
}

func (x *ChangeInfo) GetRevisions() map[string]*RevisionInfo {
	if x != nil {
		return x.Revisions
	}
	return nil
}

func (x *ChangeInfo) GetLabels() map[string]*LabelInfo {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ChangeInfo) GetMessages() []*ChangeMessageInfo {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Information about a patch set.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-info
type RevisionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of this patch set.
	Kind RevisionInfo_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=gerrit.RevisionInfo_Kind" json:"kind,omitempty"`
	// The patch set number.
	Number int32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// The uploader of this patch set.
	Uploader *AccountInfo `protobuf:"bytes,3,opt,name=uploader,proto3" json:"uploader,omitempty"`
	// The Git reference for the patch set.
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	// A map of file paths to FileInfos.
	//
	// Only set if file information is requested.
	Files map[string]*FileInfo `protobuf:"bytes,6,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RevisionInfo) Reset() {
	*x = RevisionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevisionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevisionInfo) ProtoMessage() {}

func (x *RevisionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevisionInfo.ProtoReflect.Descriptor instead.
func (*RevisionInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{5}
}

func (x *RevisionInfo) GetKind() RevisionInfo_Kind {
	if x != nil {
		return x.Kind
	}
	return RevisionInfo_KIND_INVALID
}

func (x *RevisionInfo) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *RevisionInfo) GetUploader() *AccountInfo {
	if x != nil {
		return x.Uploader
	}
	return nil
}

func (x *RevisionInfo) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *RevisionInfo) GetFiles() map[string]*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

// Information about a Label.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#label-info
type LabelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the label is optional.
	Optional bool `protobuf:"varint,1,opt,name=optional,proto3" json:"optional,omitempty"`
	// One user who approved this label on the change.
	Approved *AccountInfo `protobuf:"bytes,2,opt,name=approved,proto3" json:"approved,omitempty"`
	// One user who rejected this label on the change.
	Rejected *AccountInfo `protobuf:"bytes,3,opt,name=rejected,proto3" json:"rejected,omitempty"`
	// One user who recommended this label on the change.
	Recommended *AccountInfo `protobuf:"bytes,4,opt,name=recommended,proto3" json:"recommended,omitempty"`
	// One user who disliked this label on the change.
	Disliked *AccountInfo `protobuf:"bytes,5,opt,name=disliked,proto3" json:"disliked,omitempty"`
	// If true, the label blocks submit operation.
	Blocking bool `protobuf:"varint,6,opt,name=blocking,proto3" json:"blocking,omitempty"`
	// The voting value of the user who recommended/disliked this label on the
	// change if it is not "+1"/"-1".
	Value int32 `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
	// The default voting value for the label.
	DefaultValue int32 `protobuf:"varint,8,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
}

func (x *LabelInfo) Reset() {
	*x = LabelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelInfo) ProtoMessage() {}

func (x *LabelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelInfo.ProtoReflect.Descriptor instead.
func (*LabelInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{6}
}

func (x *LabelInfo) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *LabelInfo) GetApproved() *AccountInfo {
	if x != nil {
		return x.Approved
	}
	return nil
}

func (x *LabelInfo) GetRejected() *AccountInfo {
	if x != nil {
		return x.Rejected
	}
	return nil
}

func (x *LabelInfo) GetRecommended() *AccountInfo {
	if x != nil {
		return x.Recommended
	}
	return nil
}

func (x *LabelInfo) GetDisliked() *AccountInfo {
	if x != nil {
		return x.Disliked
	}
	return nil
}

func (x *LabelInfo) GetBlocking() bool {
	if x != nil {
		return x.Blocking
	}
	return false
}

func (x *LabelInfo) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *LabelInfo) GetDefaultValue() int32 {
	if x != nil {
		return x.DefaultValue
	}
	return 0
}

// Information about a message attached to change.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-message-info
type ChangeMessageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the message
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Author of the message.
	//
	// Unset if written by the Gerrit system.
	Author *AccountInfo `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	// Real author of the message.
	//
	// Set if the message was posted on behalf of another user.
	RealAuthor *AccountInfo `protobuf:"bytes,3,opt,name=real_author,json=realAuthor,proto3" json:"real_author,omitempty"`
	// The timestamp this message was posted.
	Date *timestamp.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`
	// The text left by the user.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChangeMessageInfo) Reset() {
	*x = ChangeMessageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMessageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMessageInfo) ProtoMessage() {}

func (x *ChangeMessageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMessageInfo.ProtoReflect.Descriptor instead.
func (*ChangeMessageInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{7}
}

func (x *ChangeMessageInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChangeMessageInfo) GetAuthor() *AccountInfo {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *ChangeMessageInfo) GetRealAuthor() *AccountInfo {
	if x != nil {
		return x.RealAuthor
	}
	return nil
}

func (x *ChangeMessageInfo) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ChangeMessageInfo) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Information about a file in a patch set.
// Source of truth: https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#file-info
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of the file.
	Status FileInfo_Status `protobuf:"varint,1,opt,name=status,proto3,enum=gerrit.FileInfo_Status" json:"status,omitempty"`
	// Whether the file is binary.
	Binary bool `protobuf:"varint,2,opt,name=binary,proto3" json:"binary,omitempty"`
	// The old file path; only set if renamed or copied.
	OldPath string `protobuf:"bytes,3,opt,name=old_path,json=oldPath,proto3" json:"old_path,omitempty"`
	// Number of lines inserted.
	LinesInserted int32 `protobuf:"varint,4,opt,name=lines_inserted,json=linesInserted,proto3" json:"lines_inserted,omitempty"`
	// Number of lines deleted.
	LinesDeleted int32 `protobuf:"varint,5,opt,name=lines_deleted,json=linesDeleted,proto3" json:"lines_deleted,omitempty"`
	// Number of bytes by which the file size increased/decreased.
	SizeDelta int64 `protobuf:"varint,6,opt,name=size_delta,json=sizeDelta,proto3" json:"size_delta,omitempty"`
	// File size in bytes.
	Size int64 `protobuf:"varint,7,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{8}
}

func (x *FileInfo) GetStatus() FileInfo_Status {
	if x != nil {
		return x.Status
	}
	return FileInfo_M
}

func (x *FileInfo) GetBinary() bool {
	if x != nil {
		return x.Binary
	}
	return false
}

func (x *FileInfo) GetOldPath() string {
	if x != nil {
		return x.OldPath
	}
	return ""
}

func (x *FileInfo) GetLinesInserted() int32 {
	if x != nil {
		return x.LinesInserted
	}
	return 0
}

func (x *FileInfo) GetLinesDeleted() int32 {
	if x != nil {
		return x.LinesDeleted
	}
	return 0
}

func (x *FileInfo) GetSizeDelta() int64 {
	if x != nil {
		return x.SizeDelta
	}
	return 0
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Information for creating a new change.
//
// Fields are a subset of:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#change-input
type CreateChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// Ref to base the new change at. e.g. refs/heads/master
	Ref     string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Subject string `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`
	// 40-digit hex SHA-1 of the git commit which will be the parent commit of the
	// newly created change. If set, it must be a merged commit on the destination
	// branch.
	BaseCommit string `protobuf:"bytes,4,opt,name=base_commit,json=baseCommit,proto3" json:"base_commit,omitempty"`
}

func (x *CreateChangeRequest) Reset() {
	*x = CreateChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChangeRequest) ProtoMessage() {}

func (x *CreateChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChangeRequest.ProtoReflect.Descriptor instead.
func (*CreateChangeRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{9}
}

func (x *CreateChangeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *CreateChangeRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *CreateChangeRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *CreateChangeRequest) GetBaseCommit() string {
	if x != nil {
		return x.BaseCommit
	}
	return ""
}

// Information to submit a change.
//
// This is a placeholder to support the arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-input
type SubmitChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *SubmitChangeRequest) Reset() {
	*x = SubmitChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitChangeRequest) ProtoMessage() {}

func (x *SubmitChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitChangeRequest.ProtoReflect.Descriptor instead.
func (*SubmitChangeRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{10}
}

func (x *SubmitChangeRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SubmitChangeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Information for changing contents of single file in a change edit.
//
// Fields encode the path arguments of
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
type ChangeEditFileContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Path to the file to edit inside the project.
	FilePath string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// New content of the file. Overwrites existing contents entirely.
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ChangeEditFileContentRequest) Reset() {
	*x = ChangeEditFileContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEditFileContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEditFileContentRequest) ProtoMessage() {}

func (x *ChangeEditFileContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEditFileContentRequest.ProtoReflect.Descriptor instead.
func (*ChangeEditFileContentRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{11}
}

func (x *ChangeEditFileContentRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ChangeEditFileContentRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ChangeEditFileContentRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ChangeEditFileContentRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// Information for deleting contents of single file in a change edit.
//
// Fields encode the path arguments of
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
type DeleteEditFileContentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Path to the file to edit inside the project.
	FilePath string `protobuf:"bytes,3,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (x *DeleteEditFileContentRequest) Reset() {
	*x = DeleteEditFileContentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteEditFileContentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteEditFileContentRequest) ProtoMessage() {}

func (x *DeleteEditFileContentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteEditFileContentRequest.ProtoReflect.Descriptor instead.
func (*DeleteEditFileContentRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteEditFileContentRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *DeleteEditFileContentRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *DeleteEditFileContentRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

// Information for publishing a change edit.
//
// This is a placeholder to support the arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-change-edit-input
type ChangeEditPublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *ChangeEditPublishRequest) Reset() {
	*x = ChangeEditPublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEditPublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEditPublishRequest) ProtoMessage() {}

func (x *ChangeEditPublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEditPublishRequest.ProtoReflect.Descriptor instead.
func (*ChangeEditPublishRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{13}
}

func (x *ChangeEditPublishRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ChangeEditPublishRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

// Information for abandoning a change.
//
// Fields are a subset of arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-input
type AbandonChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AbandonChangeRequest) Reset() {
	*x = AbandonChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbandonChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbandonChangeRequest) ProtoMessage() {}

func (x *AbandonChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbandonChangeRequest.ProtoReflect.Descriptor instead.
func (*AbandonChangeRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{14}
}

func (x *AbandonChangeRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AbandonChangeRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *AbandonChangeRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Information to set various review bits on a change
//
// Fields are a subset of arguments from:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#review-input
type SetReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Unique ID for the revision to query.
	// See
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Message to be added to the change along with this review.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// labels to add, e.g.:
	//   {
	//     "Code-Review": -1,
	//     "Verified": 1,
	//   }
	Labels map[string]int32 `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *SetReviewRequest) Reset() {
	*x = SetReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetReviewRequest) ProtoMessage() {}

func (x *SetReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetReviewRequest.ProtoReflect.Descriptor instead.
func (*SetReviewRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{15}
}

func (x *SetReviewRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *SetReviewRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *SetReviewRequest) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *SetReviewRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetReviewRequest) GetLabels() map[string]int32 {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Information returned by a SetReview RPC.
//
// Fields are a subset of:
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#review-result
type ReviewResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of labels to values after the review was posted. Null if any reviewer
	// additions were rejected.
	Labels map[string]int32 `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ReviewResult) Reset() {
	*x = ReviewResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewResult) ProtoMessage() {}

func (x *ReviewResult) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewResult.ProtoReflect.Descriptor instead.
func (*ReviewResult) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{16}
}

func (x *ReviewResult) GetLabels() map[string]int32 {
	if x != nil {
		return x.Labels
	}
	return nil
}

type GetMergeableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Unique ID for the revision to query.
	// See
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// The source to merge from, e.g. a complete or abbreviated commit SHA-1, a
	// complete reference name, a short reference name under refs/heads,
	// refs/tags, or refs/remotes namespace, etc.
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// The strategy of the merge.
	Strategy MergeableStrategy `protobuf:"varint,5,opt,name=strategy,proto3,enum=gerrit.MergeableStrategy" json:"strategy,omitempty"`
}

func (x *GetMergeableRequest) Reset() {
	*x = GetMergeableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMergeableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMergeableRequest) ProtoMessage() {}

func (x *GetMergeableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMergeableRequest.ProtoReflect.Descriptor instead.
func (*GetMergeableRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{17}
}

func (x *GetMergeableRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *GetMergeableRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *GetMergeableRequest) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *GetMergeableRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *GetMergeableRequest) GetStrategy() MergeableStrategy {
	if x != nil {
		return x.Strategy
	}
	return MergeableStrategy_MERGEABLE_STRATEGY_UNSPECIFIED
}

// Contains information about the mergeability of a change.
//
// See
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#mergeable-info
type MergeableInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Submit type used for this change.
	SubmitType MergeableInfo_SubmitType `protobuf:"varint,1,opt,name=submit_type,json=submitType,proto3,enum=gerrit.MergeableInfo_SubmitType" json:"submit_type,omitempty"`
	// The strategy of the merge.
	Strategy MergeableStrategy `protobuf:"varint,2,opt,name=strategy,proto3,enum=gerrit.MergeableStrategy" json:"strategy,omitempty"`
	// true if this change is cleanly mergeable, false otherwise.
	Mergeable bool `protobuf:"varint,3,opt,name=mergeable,proto3" json:"mergeable,omitempty"`
	// true if this change is already merged, false otherwise.
	CommitMerged bool `protobuf:"varint,4,opt,name=commit_merged,json=commitMerged,proto3" json:"commit_merged,omitempty"`
	// true if the content of this change is already merged, false otherwise.
	ContentMerged bool `protobuf:"varint,5,opt,name=content_merged,json=contentMerged,proto3" json:"content_merged,omitempty"`
	// A list of paths with conflicts.
	Conflicts []string `protobuf:"bytes,6,rep,name=conflicts,proto3" json:"conflicts,omitempty"`
	// A list of other branch names where this change could merge cleanly.
	MergeableInto []string `protobuf:"bytes,7,rep,name=mergeable_into,json=mergeableInto,proto3" json:"mergeable_into,omitempty"`
}

func (x *MergeableInfo) Reset() {
	*x = MergeableInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeableInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeableInfo) ProtoMessage() {}

func (x *MergeableInfo) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeableInfo.ProtoReflect.Descriptor instead.
func (*MergeableInfo) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{18}
}

func (x *MergeableInfo) GetSubmitType() MergeableInfo_SubmitType {
	if x != nil {
		return x.SubmitType
	}
	return MergeableInfo_SUBMIT_TYPE_UNSPECIFIED
}

func (x *MergeableInfo) GetStrategy() MergeableStrategy {
	if x != nil {
		return x.Strategy
	}
	return MergeableStrategy_MERGEABLE_STRATEGY_UNSPECIFIED
}

func (x *MergeableInfo) GetMergeable() bool {
	if x != nil {
		return x.Mergeable
	}
	return false
}

func (x *MergeableInfo) GetCommitMerged() bool {
	if x != nil {
		return x.CommitMerged
	}
	return false
}

func (x *MergeableInfo) GetContentMerged() bool {
	if x != nil {
		return x.ContentMerged
	}
	return false
}

func (x *MergeableInfo) GetConflicts() []string {
	if x != nil {
		return x.Conflicts
	}
	return nil
}

func (x *MergeableInfo) GetMergeableInto() []string {
	if x != nil {
		return x.MergeableInto
	}
	return nil
}

// Information for requesting the files in a change.
//
// See
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
type ListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Change number.
	Number int64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	// The project of this change. For example, "chromium/src".
	//
	// Optional, but recommended for better routing and faster RPC execution.
	Project string `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// Unique ID for the revision to query.
	// See
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#revision-id
	RevisionId string `protobuf:"bytes,3,opt,name=revision_id,json=revisionId,proto3" json:"revision_id,omitempty"`
	// Changes the response to return a list of all files (modified or unmodified)
	// that contain this substring in the path name.
	SubstringQuery string `protobuf:"bytes,4,opt,name=substring_query,json=substringQuery,proto3" json:"substring_query,omitempty"`
	// For merge commits only, this requests a diff of files against a parent
	// revision. Use value 1 to compare against a CL's target ref.
	Parent int64 `protobuf:"varint,5,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{19}
}

func (x *ListFilesRequest) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ListFilesRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ListFilesRequest) GetRevisionId() string {
	if x != nil {
		return x.RevisionId
	}
	return ""
}

func (x *ListFilesRequest) GetSubstringQuery() string {
	if x != nil {
		return x.SubstringQuery
	}
	return ""
}

func (x *ListFilesRequest) GetParent() int64 {
	if x != nil {
		return x.Parent
	}
	return 0
}

// Information about the files in a change.
//
// See
// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
type ListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map of file paths to FileInfos.
	Files map[string]*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP(), []int{20}
}

func (x *ListFilesResponse) GetFiles() map[string]*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

var File_go_chromium_org_luci_common_proto_gerrit_gerrit_proto protoreflect.FileDescriptor

var file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2f, 0x67, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6d, 0x6f, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22,
	0x59, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x67,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7e, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x0a, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4c, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x22, 0x97, 0x03, 0x0a, 0x0c, 0x52,
	0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0a,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x54, 0x52, 0x49, 0x56, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x05, 0x22, 0xc8, 0x02, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2f,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x2f, 0x0a, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6c, 0x69,
	0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72,
	0x69, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xd0, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x72, 0x65,
	0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa1, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x69, 0x6e,
	0x65, 0x73, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x22, 0x32, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01,
	0x4d, 0x10, 0x00, 0x12, 0x05, 0x0a, 0x01, 0x41, 0x10, 0x01, 0x12, 0x05, 0x0a, 0x01, 0x44, 0x10,
	0x02, 0x12, 0x05, 0x0a, 0x01, 0x52, 0x10, 0x03, 0x12, 0x05, 0x0a, 0x01, 0x43, 0x10, 0x04, 0x12,
	0x05, 0x0a, 0x01, 0x57, 0x10, 0x05, 0x22, 0x7c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x22, 0x47, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x87, 0x01,
	0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x4c, 0x0a, 0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x64, 0x69, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x62, 0x0a, 0x14, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x22, 0xe2, 0x03, 0x0a, 0x0d, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x67, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x6f, 0x22, 0xa7,
	0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x41, 0x52, 0x59,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41,
	0x52, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x42,
	0x41, 0x53, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x4e, 0x45, 0x43, 0x45, 0x53, 0x53, 0x41, 0x52, 0x59,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x4c, 0x57,
	0x41, 0x59, 0x53, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x41,
	0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x45, 0x52, 0x52,
	0x59, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x06, 0x22, 0xa6, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0xd3, 0x03, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x41, 0x42, 0x45, 0x4c,
	0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f,
	0x4c, 0x41, 0x42, 0x45, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x08, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x49, 0x54, 0x53, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x40, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x4c, 0x4c,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x53, 0x10, 0x80, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x44, 0x45, 0x54,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x80,
	0x02, 0x12, 0x15, 0x0a, 0x10, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x53, 0x10, 0x80, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x53, 0x10, 0x80, 0x08, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x80, 0x10, 0x12, 0x13, 0x0a,
	0x0e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10,
	0x80, 0x20, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x44, 0x10, 0x80,
	0x40, 0x12, 0x14, 0x0a, 0x0e, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x80, 0x80, 0x01, 0x12, 0x11, 0x0a, 0x0b, 0x53, 0x55, 0x42, 0x4d, 0x49,
	0x54, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x80, 0x80, 0x02, 0x12, 0x0f, 0x0a, 0x09, 0x57, 0x45,
	0x42, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x80, 0x80, 0x04, 0x12, 0x0b, 0x0a, 0x05, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x80, 0x80, 0x08, 0x12, 0x14, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x46, 0x4f, 0x4f, 0x54, 0x45, 0x52, 0x53, 0x10, 0x80, 0x80, 0x10, 0x12, 0x17,
	0x0a, 0x11, 0x50, 0x55, 0x53, 0x48, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x45, 0x53, 0x10, 0x80, 0x80, 0x20, 0x12, 0x12, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x43, 0x4b,
	0x49, 0x4e, 0x47, 0x5f, 0x49, 0x44, 0x53, 0x10, 0x80, 0x80, 0x40, 0x12, 0x18, 0x0a, 0x11, 0x44,
	0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x53,
	0x10, 0x80, 0x80, 0x80, 0x01, 0x2a, 0x85, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x22, 0x0a, 0x1e, 0x4d,
	0x45, 0x52, 0x47, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x57, 0x41, 0x59, 0x5f, 0x49, 0x4e,
	0x5f, 0x43, 0x4f, 0x52, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x55, 0x52, 0x53, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x48, 0x45, 0x49, 0x52, 0x53, 0x10, 0x05, 0x32, 0x90, 0x06,
	0x0a, 0x06, 0x47, 0x65, 0x72, 0x72, 0x69, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x2e,
	0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x69,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x67,
	0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x69, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4d, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x64, 0x69, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x12,
	0x20, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x64, 0x69, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x18, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x41, 0x62, 0x61, 0x6e, 0x64,
	0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69,
	0x74, 0x2e, 0x41, 0x62, 0x61, 0x6e, 0x64, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x67, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40,
	0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18, 0x2e, 0x67, 0x65,
	0x72, 0x72, 0x69, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x31, 0x5a, 0x2f, 0x67, 0x6f, 0x2e, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x69, 0x75, 0x6d, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x6c, 0x75, 0x63, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x72, 0x72, 0x69, 0x74, 0x3b, 0x67, 0x65, 0x72,
	0x72, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescOnce sync.Once
	file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescData = file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDesc
)

func file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescGZIP() []byte {
	file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescOnce.Do(func() {
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescData)
	})
	return file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDescData
}

var file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_goTypes = []interface{}{
	(QueryOption)(0),                     // 0: gerrit.QueryOption
	(MergeableStrategy)(0),               // 1: gerrit.MergeableStrategy
	(ChangeInfo_Status)(0),               // 2: gerrit.ChangeInfo.Status
	(RevisionInfo_Kind)(0),               // 3: gerrit.RevisionInfo.Kind
	(FileInfo_Status)(0),                 // 4: gerrit.FileInfo.Status
	(MergeableInfo_SubmitType)(0),        // 5: gerrit.MergeableInfo.SubmitType
	(*ListChangesRequest)(nil),           // 6: gerrit.ListChangesRequest
	(*ListChangesResponse)(nil),          // 7: gerrit.ListChangesResponse
	(*GetChangeRequest)(nil),             // 8: gerrit.GetChangeRequest
	(*AccountInfo)(nil),                  // 9: gerrit.AccountInfo
	(*ChangeInfo)(nil),                   // 10: gerrit.ChangeInfo
	(*RevisionInfo)(nil),                 // 11: gerrit.RevisionInfo
	(*LabelInfo)(nil),                    // 12: gerrit.LabelInfo
	(*ChangeMessageInfo)(nil),            // 13: gerrit.ChangeMessageInfo
	(*FileInfo)(nil),                     // 14: gerrit.FileInfo
	(*CreateChangeRequest)(nil),          // 15: gerrit.CreateChangeRequest
	(*SubmitChangeRequest)(nil),          // 16: gerrit.SubmitChangeRequest
	(*ChangeEditFileContentRequest)(nil), // 17: gerrit.ChangeEditFileContentRequest
	(*DeleteEditFileContentRequest)(nil), // 18: gerrit.DeleteEditFileContentRequest
	(*ChangeEditPublishRequest)(nil),     // 19: gerrit.ChangeEditPublishRequest
	(*AbandonChangeRequest)(nil),         // 20: gerrit.AbandonChangeRequest
	(*SetReviewRequest)(nil),             // 21: gerrit.SetReviewRequest
	(*ReviewResult)(nil),                 // 22: gerrit.ReviewResult
	(*GetMergeableRequest)(nil),          // 23: gerrit.GetMergeableRequest
	(*MergeableInfo)(nil),                // 24: gerrit.MergeableInfo
	(*ListFilesRequest)(nil),             // 25: gerrit.ListFilesRequest
	(*ListFilesResponse)(nil),            // 26: gerrit.ListFilesResponse
	nil,                                  // 27: gerrit.ChangeInfo.RevisionsEntry
	nil,                                  // 28: gerrit.ChangeInfo.LabelsEntry
	nil,                                  // 29: gerrit.RevisionInfo.FilesEntry
	nil,                                  // 30: gerrit.SetReviewRequest.LabelsEntry
	nil,                                  // 31: gerrit.ReviewResult.LabelsEntry
	nil,                                  // 32: gerrit.ListFilesResponse.FilesEntry
	(*timestamp.Timestamp)(nil),          // 33: google.protobuf.Timestamp
	(*empty.Empty)(nil),                  // 34: google.protobuf.Empty
}
var file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_depIdxs = []int32{
	0,  // 0: gerrit.ListChangesRequest.options:type_name -> gerrit.QueryOption
	10, // 1: gerrit.ListChangesResponse.changes:type_name -> gerrit.ChangeInfo
	0,  // 2: gerrit.GetChangeRequest.options:type_name -> gerrit.QueryOption
	9,  // 3: gerrit.ChangeInfo.owner:type_name -> gerrit.AccountInfo
	2,  // 4: gerrit.ChangeInfo.status:type_name -> gerrit.ChangeInfo.Status
	27, // 5: gerrit.ChangeInfo.revisions:type_name -> gerrit.ChangeInfo.RevisionsEntry
	28, // 6: gerrit.ChangeInfo.labels:type_name -> gerrit.ChangeInfo.LabelsEntry
	13, // 7: gerrit.ChangeInfo.messages:type_name -> gerrit.ChangeMessageInfo
	3,  // 8: gerrit.RevisionInfo.kind:type_name -> gerrit.RevisionInfo.Kind
	9,  // 9: gerrit.RevisionInfo.uploader:type_name -> gerrit.AccountInfo
	29, // 10: gerrit.RevisionInfo.files:type_name -> gerrit.RevisionInfo.FilesEntry
	9,  // 11: gerrit.LabelInfo.approved:type_name -> gerrit.AccountInfo
	9,  // 12: gerrit.LabelInfo.rejected:type_name -> gerrit.AccountInfo
	9,  // 13: gerrit.LabelInfo.recommended:type_name -> gerrit.AccountInfo
	9,  // 14: gerrit.LabelInfo.disliked:type_name -> gerrit.AccountInfo
	9,  // 15: gerrit.ChangeMessageInfo.author:type_name -> gerrit.AccountInfo
	9,  // 16: gerrit.ChangeMessageInfo.real_author:type_name -> gerrit.AccountInfo
	33, // 17: gerrit.ChangeMessageInfo.date:type_name -> google.protobuf.Timestamp
	4,  // 18: gerrit.FileInfo.status:type_name -> gerrit.FileInfo.Status
	30, // 19: gerrit.SetReviewRequest.labels:type_name -> gerrit.SetReviewRequest.LabelsEntry
	31, // 20: gerrit.ReviewResult.labels:type_name -> gerrit.ReviewResult.LabelsEntry
	1,  // 21: gerrit.GetMergeableRequest.strategy:type_name -> gerrit.MergeableStrategy
	5,  // 22: gerrit.MergeableInfo.submit_type:type_name -> gerrit.MergeableInfo.SubmitType
	1,  // 23: gerrit.MergeableInfo.strategy:type_name -> gerrit.MergeableStrategy
	32, // 24: gerrit.ListFilesResponse.files:type_name -> gerrit.ListFilesResponse.FilesEntry
	11, // 25: gerrit.ChangeInfo.RevisionsEntry.value:type_name -> gerrit.RevisionInfo
	12, // 26: gerrit.ChangeInfo.LabelsEntry.value:type_name -> gerrit.LabelInfo
	14, // 27: gerrit.RevisionInfo.FilesEntry.value:type_name -> gerrit.FileInfo
	14, // 28: gerrit.ListFilesResponse.FilesEntry.value:type_name -> gerrit.FileInfo
	6,  // 29: gerrit.Gerrit.ListChanges:input_type -> gerrit.ListChangesRequest
	8,  // 30: gerrit.Gerrit.GetChange:input_type -> gerrit.GetChangeRequest
	15, // 31: gerrit.Gerrit.CreateChange:input_type -> gerrit.CreateChangeRequest
	17, // 32: gerrit.Gerrit.ChangeEditFileContent:input_type -> gerrit.ChangeEditFileContentRequest
	18, // 33: gerrit.Gerrit.DeleteEditFileContent:input_type -> gerrit.DeleteEditFileContentRequest
	19, // 34: gerrit.Gerrit.ChangeEditPublish:input_type -> gerrit.ChangeEditPublishRequest
	21, // 35: gerrit.Gerrit.SetReview:input_type -> gerrit.SetReviewRequest
	16, // 36: gerrit.Gerrit.SubmitChange:input_type -> gerrit.SubmitChangeRequest
	20, // 37: gerrit.Gerrit.AbandonChange:input_type -> gerrit.AbandonChangeRequest
	23, // 38: gerrit.Gerrit.GetMergeable:input_type -> gerrit.GetMergeableRequest
	25, // 39: gerrit.Gerrit.ListFiles:input_type -> gerrit.ListFilesRequest
	7,  // 40: gerrit.Gerrit.ListChanges:output_type -> gerrit.ListChangesResponse
	10, // 41: gerrit.Gerrit.GetChange:output_type -> gerrit.ChangeInfo
	10, // 42: gerrit.Gerrit.CreateChange:output_type -> gerrit.ChangeInfo
	34, // 43: gerrit.Gerrit.ChangeEditFileContent:output_type -> google.protobuf.Empty
	34, // 44: gerrit.Gerrit.DeleteEditFileContent:output_type -> google.protobuf.Empty
	34, // 45: gerrit.Gerrit.ChangeEditPublish:output_type -> google.protobuf.Empty
	22, // 46: gerrit.Gerrit.SetReview:output_type -> gerrit.ReviewResult
	10, // 47: gerrit.Gerrit.SubmitChange:output_type -> gerrit.ChangeInfo
	10, // 48: gerrit.Gerrit.AbandonChange:output_type -> gerrit.ChangeInfo
	24, // 49: gerrit.Gerrit.GetMergeable:output_type -> gerrit.MergeableInfo
	26, // 50: gerrit.Gerrit.ListFiles:output_type -> gerrit.ListFilesResponse
	40, // [40:51] is the sub-list for method output_type
	29, // [29:40] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_init() }
func file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_init() {
	if File_go_chromium_org_luci_common_proto_gerrit_gerrit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChangesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChangesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevisionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMessageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEditFileContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteEditFileContentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEditPublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbandonChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMergeableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeableInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_goTypes,
		DependencyIndexes: file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_depIdxs,
		EnumInfos:         file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_enumTypes,
		MessageInfos:      file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_msgTypes,
	}.Build()
	File_go_chromium_org_luci_common_proto_gerrit_gerrit_proto = out.File
	file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_rawDesc = nil
	file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_goTypes = nil
	file_go_chromium_org_luci_common_proto_gerrit_gerrit_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GerritClient is the client API for Gerrit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GerritClient interface {
	// Lists changes that match a query.
	//
	// Note, although the Gerrit API supports multiple queries, for which
	// it can return multiple lists of changes, this is not a foreseen use-case
	// so this API just includes one query with one returned list of changes.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-changes
	ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ListChangesResponse, error)
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
	DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error)
	// Gets Mergeable status for a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-mergeable-info
	GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error)
	// Lists the files that were modified, added or deleted in a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
}
type gerritPRPCClient struct {
	client *prpc.Client
}

func NewGerritPRPCClient(client *prpc.Client) GerritClient {
	return &gerritPRPCClient{client}
}

func (c *gerritPRPCClient) ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ListChangesResponse, error) {
	out := new(ListChangesResponse)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ListChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ChangeEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "DeleteEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ChangeEditPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error) {
	out := new(ReviewResult)
	err := c.client.Call(ctx, "gerrit.Gerrit", "SetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "SubmitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "AbandonChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error) {
	out := new(MergeableInfo)
	err := c.client.Call(ctx, "gerrit.Gerrit", "GetMergeable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritPRPCClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.client.Call(ctx, "gerrit.Gerrit", "ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type gerritClient struct {
	cc grpc.ClientConnInterface
}

func NewGerritClient(cc grpc.ClientConnInterface) GerritClient {
	return &gerritClient{cc}
}

func (c *gerritClient) ListChanges(ctx context.Context, in *ListChangesRequest, opts ...grpc.CallOption) (*ListChangesResponse, error) {
	out := new(ListChangesResponse)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ListChanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetChange(ctx context.Context, in *GetChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/GetChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) CreateChange(ctx context.Context, in *CreateChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/CreateChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditFileContent(ctx context.Context, in *ChangeEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ChangeEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) DeleteEditFileContent(ctx context.Context, in *DeleteEditFileContentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/DeleteEditFileContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ChangeEditPublish(ctx context.Context, in *ChangeEditPublishRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ChangeEditPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SetReview(ctx context.Context, in *SetReviewRequest, opts ...grpc.CallOption) (*ReviewResult, error) {
	out := new(ReviewResult)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/SetReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) SubmitChange(ctx context.Context, in *SubmitChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/SubmitChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) AbandonChange(ctx context.Context, in *AbandonChangeRequest, opts ...grpc.CallOption) (*ChangeInfo, error) {
	out := new(ChangeInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/AbandonChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) GetMergeable(ctx context.Context, in *GetMergeableRequest, opts ...grpc.CallOption) (*MergeableInfo, error) {
	out := new(MergeableInfo)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/GetMergeable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gerritClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/gerrit.Gerrit/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GerritServer is the server API for Gerrit service.
type GerritServer interface {
	// Lists changes that match a query.
	//
	// Note, although the Gerrit API supports multiple queries, for which
	// it can return multiple lists of changes, this is not a foreseen use-case
	// so this API just includes one query with one returned list of changes.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-changes
	ListChanges(context.Context, *ListChangesRequest) (*ListChangesResponse, error)
	// Loads a change by id.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#get-change
	GetChange(context.Context, *GetChangeRequest) (*ChangeInfo, error)
	// Create a new empty change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#create-change
	CreateChange(context.Context, *CreateChangeRequest) (*ChangeInfo, error)
	// Edit a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#put-edit-file
	ChangeEditFileContent(context.Context, *ChangeEditFileContentRequest) (*empty.Empty, error)
	// Delete a single file within an existing change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#delete-edit-file
	DeleteEditFileContent(context.Context, *DeleteEditFileContentRequest) (*empty.Empty, error)
	// Publish all changes in a a change edit.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#publish-edit
	ChangeEditPublish(context.Context, *ChangeEditPublishRequest) (*empty.Empty, error)
	// Set various review bits on a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#set-review
	SetReview(context.Context, *SetReviewRequest) (*ReviewResult, error)
	// Submit a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#submit-change
	SubmitChange(context.Context, *SubmitChangeRequest) (*ChangeInfo, error)
	// Abandon a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#abandon-change
	AbandonChange(context.Context, *AbandonChangeRequest) (*ChangeInfo, error)
	// Gets Mergeable status for a change.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-projects.html#get-mergeable-info
	GetMergeable(context.Context, *GetMergeableRequest) (*MergeableInfo, error)
	// Lists the files that were modified, added or deleted in a revision.
	//
	// https://gerrit-review.googlesource.com/Documentation/rest-api-changes.html#list-files
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
}

// UnimplementedGerritServer can be embedded to have forward compatible implementations.
type UnimplementedGerritServer struct {
}

func (*UnimplementedGerritServer) ListChanges(context.Context, *ListChangesRequest) (*ListChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChanges not implemented")
}
func (*UnimplementedGerritServer) GetChange(context.Context, *GetChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChange not implemented")
}
func (*UnimplementedGerritServer) CreateChange(context.Context, *CreateChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChange not implemented")
}
func (*UnimplementedGerritServer) ChangeEditFileContent(context.Context, *ChangeEditFileContentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEditFileContent not implemented")
}
func (*UnimplementedGerritServer) DeleteEditFileContent(context.Context, *DeleteEditFileContentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEditFileContent not implemented")
}
func (*UnimplementedGerritServer) ChangeEditPublish(context.Context, *ChangeEditPublishRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEditPublish not implemented")
}
func (*UnimplementedGerritServer) SetReview(context.Context, *SetReviewRequest) (*ReviewResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReview not implemented")
}
func (*UnimplementedGerritServer) SubmitChange(context.Context, *SubmitChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitChange not implemented")
}
func (*UnimplementedGerritServer) AbandonChange(context.Context, *AbandonChangeRequest) (*ChangeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonChange not implemented")
}
func (*UnimplementedGerritServer) GetMergeable(context.Context, *GetMergeableRequest) (*MergeableInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMergeable not implemented")
}
func (*UnimplementedGerritServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}

func RegisterGerritServer(s prpc.Registrar, srv GerritServer) {
	s.RegisterService(&_Gerrit_serviceDesc, srv)
}

func _Gerrit_ListChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ListChanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListChanges(ctx, req.(*ListChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/GetChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetChange(ctx, req.(*GetChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_CreateChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).CreateChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/CreateChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).CreateChange(ctx, req.(*CreateChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ChangeEditFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditFileContent(ctx, req.(*ChangeEditFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_DeleteEditFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEditFileContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).DeleteEditFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/DeleteEditFileContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).DeleteEditFileContent(ctx, req.(*DeleteEditFileContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ChangeEditPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEditPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ChangeEditPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ChangeEditPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ChangeEditPublish(ctx, req.(*ChangeEditPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/SetReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SetReview(ctx, req.(*SetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_SubmitChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).SubmitChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/SubmitChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).SubmitChange(ctx, req.(*SubmitChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_AbandonChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).AbandonChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/AbandonChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).AbandonChange(ctx, req.(*AbandonChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_GetMergeable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMergeableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).GetMergeable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/GetMergeable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).GetMergeable(ctx, req.(*GetMergeableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gerrit_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GerritServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gerrit.Gerrit/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GerritServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gerrit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gerrit.Gerrit",
	HandlerType: (*GerritServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChanges",
			Handler:    _Gerrit_ListChanges_Handler,
		},
		{
			MethodName: "GetChange",
			Handler:    _Gerrit_GetChange_Handler,
		},
		{
			MethodName: "CreateChange",
			Handler:    _Gerrit_CreateChange_Handler,
		},
		{
			MethodName: "ChangeEditFileContent",
			Handler:    _Gerrit_ChangeEditFileContent_Handler,
		},
		{
			MethodName: "DeleteEditFileContent",
			Handler:    _Gerrit_DeleteEditFileContent_Handler,
		},
		{
			MethodName: "ChangeEditPublish",
			Handler:    _Gerrit_ChangeEditPublish_Handler,
		},
		{
			MethodName: "SetReview",
			Handler:    _Gerrit_SetReview_Handler,
		},
		{
			MethodName: "SubmitChange",
			Handler:    _Gerrit_SubmitChange_Handler,
		},
		{
			MethodName: "AbandonChange",
			Handler:    _Gerrit_AbandonChange_Handler,
		},
		{
			MethodName: "GetMergeable",
			Handler:    _Gerrit_GetMergeable_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Gerrit_ListFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tetrafolium/luci-go/common/proto/gerrit/gerrit.proto",
}
