// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/tokenserver/api/admin/v1/config.proto

package admin

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// TokenServerConfig is read from tokenserver.cfg in luci-config.
type TokenServerConfig struct {
	// List of CAs we trust.
	CertificateAuthority []*CertificateAuthorityConfig `protobuf:"bytes,1,rep,name=certificate_authority,json=certificateAuthority,proto3" json:"certificate_authority,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TokenServerConfig) Reset()         { *m = TokenServerConfig{} }
func (m *TokenServerConfig) String() string { return proto.CompactTextString(m) }
func (*TokenServerConfig) ProtoMessage()    {}
func (*TokenServerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{0}
}

func (m *TokenServerConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenServerConfig.Unmarshal(m, b)
}
func (m *TokenServerConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenServerConfig.Marshal(b, m, deterministic)
}
func (m *TokenServerConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenServerConfig.Merge(m, src)
}
func (m *TokenServerConfig) XXX_Size() int {
	return xxx_messageInfo_TokenServerConfig.Size(m)
}
func (m *TokenServerConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenServerConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TokenServerConfig proto.InternalMessageInfo

func (m *TokenServerConfig) GetCertificateAuthority() []*CertificateAuthorityConfig {
	if m != nil {
		return m.CertificateAuthority
	}
	return nil
}

// CertificateAuthorityConfig defines a single CA we trust.
//
// Such CA issues certificates for nodes that use The Token Service. Each node
// has a private key and certificate with Common Name set to the FQDN of this
// node, e.g. "CN=slave43-c1.c.chromecompute.google.com.internal".
//
// The Token Server uses this CN to derive an identity string for a machine. It
// splits FQDN into a hostname ("slave43-c1") and a domain name
// ("c.chromecompute.google.com.internal"), searches for a domain name in
// "known_domains" set, and, if it is present, uses parameters described there
// for generating a token that contains machine's FQDN and certificate serial
// number (among other things, see MachineTokenBody in machine_token.proto).
type CertificateAuthorityConfig struct {
	UniqueId    int64    `protobuf:"varint,6,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Cn          string   `protobuf:"bytes,1,opt,name=cn,proto3" json:"cn,omitempty"`
	CertPath    string   `protobuf:"bytes,2,opt,name=cert_path,json=certPath,proto3" json:"cert_path,omitempty"`
	CrlUrl      string   `protobuf:"bytes,3,opt,name=crl_url,json=crlUrl,proto3" json:"crl_url,omitempty"`
	UseOauth    bool     `protobuf:"varint,4,opt,name=use_oauth,json=useOauth,proto3" json:"use_oauth,omitempty"`
	OauthScopes []string `protobuf:"bytes,7,rep,name=oauth_scopes,json=oauthScopes,proto3" json:"oauth_scopes,omitempty"`
	// KnownDomains describes parameters to use for each particular domain.
	KnownDomains         []*DomainConfig `protobuf:"bytes,5,rep,name=known_domains,json=knownDomains,proto3" json:"known_domains,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CertificateAuthorityConfig) Reset()         { *m = CertificateAuthorityConfig{} }
func (m *CertificateAuthorityConfig) String() string { return proto.CompactTextString(m) }
func (*CertificateAuthorityConfig) ProtoMessage()    {}
func (*CertificateAuthorityConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{1}
}

func (m *CertificateAuthorityConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAuthorityConfig.Unmarshal(m, b)
}
func (m *CertificateAuthorityConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAuthorityConfig.Marshal(b, m, deterministic)
}
func (m *CertificateAuthorityConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAuthorityConfig.Merge(m, src)
}
func (m *CertificateAuthorityConfig) XXX_Size() int {
	return xxx_messageInfo_CertificateAuthorityConfig.Size(m)
}
func (m *CertificateAuthorityConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAuthorityConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAuthorityConfig proto.InternalMessageInfo

func (m *CertificateAuthorityConfig) GetUniqueId() int64 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *CertificateAuthorityConfig) GetCn() string {
	if m != nil {
		return m.Cn
	}
	return ""
}

func (m *CertificateAuthorityConfig) GetCertPath() string {
	if m != nil {
		return m.CertPath
	}
	return ""
}

func (m *CertificateAuthorityConfig) GetCrlUrl() string {
	if m != nil {
		return m.CrlUrl
	}
	return ""
}

func (m *CertificateAuthorityConfig) GetUseOauth() bool {
	if m != nil {
		return m.UseOauth
	}
	return false
}

func (m *CertificateAuthorityConfig) GetOauthScopes() []string {
	if m != nil {
		return m.OauthScopes
	}
	return nil
}

func (m *CertificateAuthorityConfig) GetKnownDomains() []*DomainConfig {
	if m != nil {
		return m.KnownDomains
	}
	return nil
}

// DomainConfig is used inside CertificateAuthorityConfig.
type DomainConfig struct {
	// Domain is domain names of hosts this config applies to.
	//
	// Machines that reside in a subdomain of given domain are also considered
	// part of it, e.g. both FQDNs "host.example.com" and "host.abc.example.com"
	// match domain "example.com".
	Domain []string `protobuf:"bytes,1,rep,name=domain,proto3" json:"domain,omitempty"`
	// MachineTokenLifetime is how long generated machine tokens live, in seconds.
	//
	// If 0, machine tokens are not allowed.
	MachineTokenLifetime int64    `protobuf:"varint,5,opt,name=machine_token_lifetime,json=machineTokenLifetime,proto3" json:"machine_token_lifetime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DomainConfig) Reset()         { *m = DomainConfig{} }
func (m *DomainConfig) String() string { return proto.CompactTextString(m) }
func (*DomainConfig) ProtoMessage()    {}
func (*DomainConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{2}
}

func (m *DomainConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DomainConfig.Unmarshal(m, b)
}
func (m *DomainConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DomainConfig.Marshal(b, m, deterministic)
}
func (m *DomainConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DomainConfig.Merge(m, src)
}
func (m *DomainConfig) XXX_Size() int {
	return xxx_messageInfo_DomainConfig.Size(m)
}
func (m *DomainConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DomainConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DomainConfig proto.InternalMessageInfo

func (m *DomainConfig) GetDomain() []string {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *DomainConfig) GetMachineTokenLifetime() int64 {
	if m != nil {
		return m.MachineTokenLifetime
	}
	return 0
}

// DelegationPermissions is read from delegation.cfg in luci-config.
type DelegationPermissions struct {
	// Rules specify what calls to MintDelegationToken are allowed.
	//
	// Rules are evaluated independently. One and only one rule should match the
	// request to allow the operation. If none rules or more than one rule match,
	// the request will be denied.
	//
	// See DelegationRule comments for more details.
	Rules                []*DelegationRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DelegationPermissions) Reset()         { *m = DelegationPermissions{} }
func (m *DelegationPermissions) String() string { return proto.CompactTextString(m) }
func (*DelegationPermissions) ProtoMessage()    {}
func (*DelegationPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{3}
}

func (m *DelegationPermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelegationPermissions.Unmarshal(m, b)
}
func (m *DelegationPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelegationPermissions.Marshal(b, m, deterministic)
}
func (m *DelegationPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationPermissions.Merge(m, src)
}
func (m *DelegationPermissions) XXX_Size() int {
	return xxx_messageInfo_DelegationPermissions.Size(m)
}
func (m *DelegationPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationPermissions proto.InternalMessageInfo

func (m *DelegationPermissions) GetRules() []*DelegationRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// DelegationRule describes a single allowed case of using delegation tokens.
//
// An incoming MintDelegationTokenRequest is basically a tuple of:
//  * 'requestor_id' - an identity of whoever makes the request.
//  * 'delegated_identity' - an identity to delegate.
//  * 'audience' - a set of identities that will be able to use the token.
//  * 'services' - a set of services that should accept the token.
//
// A request matches a rule iff:
//  * 'requestor_id' is in 'requestor' set.
//  * 'delegated_identity' is in 'allowed_to_impersonate' set.
//  * 'audience' is a subset of 'allowed_audience' set.
//  * 'services' is a subset of 'target_service' set.
//
// The presence of a matching rule permits to mint the token. The rule also
// provides an upper bound on allowed validity_duration, and the rule's name
// is logged in the audit trail.
type DelegationRule struct {
	// A descriptive name of this rule, for the audit log.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Email of developers that own this rule, to know who to contact.
	Owner []string `protobuf:"bytes,2,rep,name=owner,proto3" json:"owner,omitempty"`
	// A set of callers to which this rule applies.
	//
	// Matched against verified credentials of a caller of MintDelegationToken.
	//
	// Each element is either:
	//  * An identity string ("user:<email>").
	//  * A group reference ("group:<name>").
	//
	// The groups specified here are expanded when MintDelegationTokenRequest is
	// evaluated.
	Requestor []string `protobuf:"bytes,3,rep,name=requestor,proto3" json:"requestor,omitempty"`
	// Identities that are allowed to be delegated/impersonated by the requestor.
	//
	// Matched against 'delegated_identity' field of MintDelegationTokenRequest.
	//
	// Each element is either:
	//  * An identity string ("user:<email>").
	//  * A group reference ("group:<name>").
	//  * A special identifier "REQUESTOR" that is substituted by the requestor
	//    identity when evaluating the rule.
	//
	// "REQUESTOR" allows one to generate tokens that delegate their own identity
	// to some target audience.
	//
	// The groups specified here are expanded when MintDelegationTokenRequest is
	// evaluated.
	AllowedToImpersonate []string `protobuf:"bytes,4,rep,name=allowed_to_impersonate,json=allowedToImpersonate,proto3" json:"allowed_to_impersonate,omitempty"`
	// A set of identities that should be able to use the new token.
	//
	// Matched against 'audience' field of MintDelegationTokenRequest.
	//
	// Each element is either:
	//  * An identity string ("user:<email>").
	//  * A group reference ("group:<name>").
	//  * A special identifier "REQUESTOR" that is substituted by the requestor
	//    identity when evaluating the rule.
	//  * A special token "*" that means "any bearer can use the new token,
	//    including anonymous".
	//
	// "REQUESTOR" is typically used here for rules that allow requestors to
	// impersonate someone else. The corresponding tokens have the requestor as
	// the only allowed audience.
	//
	// The groups specified here are NOT expanded when MintDelegationTokenRequest
	// is evaluated. To match the rule, MintDelegationTokenRequest must specify
	// subset of 'allowed_audience' groups explicitly in 'audience' field.
	AllowedAudience []string `protobuf:"bytes,5,rep,name=allowed_audience,json=allowedAudience,proto3" json:"allowed_audience,omitempty"`
	// A set of services that should be able to accept the new token.
	//
	// Matched against 'services' field of MintDelegationTokenRequest.
	//
	// Each element is either:
	//  * A service identity string ("service:<id>").
	//  * A special token "*" that mean "any LUCI service should accept the
	//    token".
	TargetService []string `protobuf:"bytes,6,rep,name=target_service,json=targetService,proto3" json:"target_service,omitempty"`
	// Maximum allowed validity duration (sec) of minted delegation tokens.
	//
	// Default is 12 hours.
	MaxValidityDuration  int64    `protobuf:"varint,7,opt,name=max_validity_duration,json=maxValidityDuration,proto3" json:"max_validity_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelegationRule) Reset()         { *m = DelegationRule{} }
func (m *DelegationRule) String() string { return proto.CompactTextString(m) }
func (*DelegationRule) ProtoMessage()    {}
func (*DelegationRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{4}
}

func (m *DelegationRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelegationRule.Unmarshal(m, b)
}
func (m *DelegationRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelegationRule.Marshal(b, m, deterministic)
}
func (m *DelegationRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationRule.Merge(m, src)
}
func (m *DelegationRule) XXX_Size() int {
	return xxx_messageInfo_DelegationRule.Size(m)
}
func (m *DelegationRule) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationRule.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationRule proto.InternalMessageInfo

func (m *DelegationRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DelegationRule) GetOwner() []string {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *DelegationRule) GetRequestor() []string {
	if m != nil {
		return m.Requestor
	}
	return nil
}

func (m *DelegationRule) GetAllowedToImpersonate() []string {
	if m != nil {
		return m.AllowedToImpersonate
	}
	return nil
}

func (m *DelegationRule) GetAllowedAudience() []string {
	if m != nil {
		return m.AllowedAudience
	}
	return nil
}

func (m *DelegationRule) GetTargetService() []string {
	if m != nil {
		return m.TargetService
	}
	return nil
}

func (m *DelegationRule) GetMaxValidityDuration() int64 {
	if m != nil {
		return m.MaxValidityDuration
	}
	return 0
}

// ServiceAccountsPermissions is read from service_accounts.cfg in luci-config.
//
// Note: in the process of being replaced with ServiceAccountsProjectMapping.
type ServiceAccountsPermissions struct {
	// Rules specify how MintOAuthTokenViaGrant can be used.
	//
	// Rules define a mapping {service account email -> authorization config},
	// where 'service account email' is matched to a set of emails specified via
	// 'service_account' and 'service_account_group' fields of ServiceAccountRule,
	// and 'authorization config' is the rest of fields in ServiceAccountRule that
	// define how exactly the given service account is allowed to be used.
	//
	// If a service account email matches two (or more) rules, perhaps via
	// different groups, an error will be returned. Ambiguity is not allowed.
	//
	// See ServiceAccountRule comments for more details.
	Rules []*ServiceAccountRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	// Defaults specifies some default values applied to all rules, to reduce
	// duplication.
	//
	// See docs for individual fields to figure out how defaults are merged into
	// the rules.
	Defaults             *ServiceAccountRuleDefaults `protobuf:"bytes,2,opt,name=defaults,proto3" json:"defaults,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ServiceAccountsPermissions) Reset()         { *m = ServiceAccountsPermissions{} }
func (m *ServiceAccountsPermissions) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountsPermissions) ProtoMessage()    {}
func (*ServiceAccountsPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{5}
}

func (m *ServiceAccountsPermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAccountsPermissions.Unmarshal(m, b)
}
func (m *ServiceAccountsPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAccountsPermissions.Marshal(b, m, deterministic)
}
func (m *ServiceAccountsPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountsPermissions.Merge(m, src)
}
func (m *ServiceAccountsPermissions) XXX_Size() int {
	return xxx_messageInfo_ServiceAccountsPermissions.Size(m)
}
func (m *ServiceAccountsPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountsPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountsPermissions proto.InternalMessageInfo

func (m *ServiceAccountsPermissions) GetRules() []*ServiceAccountRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *ServiceAccountsPermissions) GetDefaults() *ServiceAccountRuleDefaults {
	if m != nil {
		return m.Defaults
	}
	return nil
}

// ServiceAccountRule describes a single allowed case of using service accounts.
//
// The usage of a service account is initiated by an end user, through some
// "proxy" service. For example, when a user posts a Swarming task that uses
// a service account, the end user is whoever posts the task, and the proxy is
// Swarming service itself.
//
// This rule specifies which end users are allowed to act as an account, and
// through which proxies.
//
// Some proxies can be declared as "trusted", in which case they are allowed to
// use any service account declared by the rule, regardless of an end user.
//
// Note: in the process of being replaced with ServiceAccountsProjectMapping.
type ServiceAccountRule struct {
	// A descriptive name of this rule, for the audit log.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Email of developers that own this rule, to know who to contact.
	Owner []string `protobuf:"bytes,2,rep,name=owner,proto3" json:"owner,omitempty"`
	// Email of service accounts that this rule applies to.
	//
	// Can be used to explicitly list service accounts in the config.
	ServiceAccount []string `protobuf:"bytes,3,rep,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	// Name of a group with service account emails this rules applies to.
	//
	// Works in addition to the explicit service account listing.
	ServiceAccountGroup []string `protobuf:"bytes,9,rep,name=service_account_group,json=serviceAccountGroup,proto3" json:"service_account_group,omitempty"`
	// OAuth scopes we allow to be granted to the OAuth token.
	//
	// Any subset of given scopes is allowed. This field is evaluated in
	// MintOAuthTokenViaGrant RPC handler, right before generating the OAuth
	// token.
	//
	// Merged with corresponding list from ServiceAccountRuleDefaults.
	AllowedScope []string `protobuf:"bytes,4,rep,name=allowed_scope,json=allowedScope,proto3" json:"allowed_scope,omitempty"`
	// A set of identities that are allowed to act as the service account (perhaps
	// indirectly through some other intermediary "proxy" service like Swarming).
	//
	// Users listed here are ultimately able to grab an OAuth token belonging to
	// the service account.
	//
	// Each element is either:
	//  * An identity string ("user:<email>").
	//  * A group reference ("group:<name>").
	EndUser []string `protobuf:"bytes,5,rep,name=end_user,json=endUser,proto3" json:"end_user,omitempty"`
	// A set of identities that are allowed to act on behalf of end users when
	// grabbing an OAuth token for the service account.
	//
	// These identities represent "proxy" services that do something with service
	// accounts on behalf of end users. Only identities in this set are allowed
	// to perform MintOAuthTokenGrant RPC.
	//
	// Each element is either:
	//  * An identity string ("user:<email>").
	//  * A group reference ("group:<name>").
	Proxy []string `protobuf:"bytes,6,rep,name=proxy,proto3" json:"proxy,omitempty"`
	// Same as 'proxy', except for proxies specified here the end_user check is
	// skipped: these proxies can grab a token for _any_ service account listed
	// in the rule, regardless of who the end user is.
	//
	// The trusted proxies are assumed to authorize the end user already and
	// the token server trusts this decision (thus the name of the field).
	TrustedProxy []string `protobuf:"bytes,8,rep,name=trusted_proxy,json=trustedProxy,proto3" json:"trusted_proxy,omitempty"`
	// Maximum allowed validity duration (sec) of OAuth token grants.
	//
	// The grant is minted by MintOAuthTokenGrant RPC (called, for example, when
	// Swarming task is posted), and checked by MintOAuthTokenViaGrant RPC (called
	// when the task actually runs). So the allowed validity duration should
	// account for possible queuing delays.
	//
	// This duration has no relation to the OAuth token lifetime. The OAuth token
	// produced by MintOAuthTokenViaGrant can always live up to 1h regardless of
	// validity duration of the grant.
	//
	// Default is taken from ServiceAccountRuleDefaults or 48 hours if not
	// specified there.
	MaxGrantValidityDuration int64    `protobuf:"varint,7,opt,name=max_grant_validity_duration,json=maxGrantValidityDuration,proto3" json:"max_grant_validity_duration,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *ServiceAccountRule) Reset()         { *m = ServiceAccountRule{} }
func (m *ServiceAccountRule) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountRule) ProtoMessage()    {}
func (*ServiceAccountRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{6}
}

func (m *ServiceAccountRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAccountRule.Unmarshal(m, b)
}
func (m *ServiceAccountRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAccountRule.Marshal(b, m, deterministic)
}
func (m *ServiceAccountRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountRule.Merge(m, src)
}
func (m *ServiceAccountRule) XXX_Size() int {
	return xxx_messageInfo_ServiceAccountRule.Size(m)
}
func (m *ServiceAccountRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountRule.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountRule proto.InternalMessageInfo

func (m *ServiceAccountRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceAccountRule) GetOwner() []string {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *ServiceAccountRule) GetServiceAccount() []string {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func (m *ServiceAccountRule) GetServiceAccountGroup() []string {
	if m != nil {
		return m.ServiceAccountGroup
	}
	return nil
}

func (m *ServiceAccountRule) GetAllowedScope() []string {
	if m != nil {
		return m.AllowedScope
	}
	return nil
}

func (m *ServiceAccountRule) GetEndUser() []string {
	if m != nil {
		return m.EndUser
	}
	return nil
}

func (m *ServiceAccountRule) GetProxy() []string {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func (m *ServiceAccountRule) GetTrustedProxy() []string {
	if m != nil {
		return m.TrustedProxy
	}
	return nil
}

func (m *ServiceAccountRule) GetMaxGrantValidityDuration() int64 {
	if m != nil {
		return m.MaxGrantValidityDuration
	}
	return 0
}

// ServiceAccountRuleDefaults specifies some default values applied to all
// service account rules, to reduce duplication.
//
// Note: in the process of being replaced with ServiceAccountsProjectMapping.
type ServiceAccountRuleDefaults struct {
	// OAuth scopes we allow to be granted to all generated OAuth tokens.
	//
	// Always merged with 'allowed_scope' fields of ServiceAccountRule rule to
	// get the final list of scopes.
	AllowedScope []string `protobuf:"bytes,1,rep,name=allowed_scope,json=allowedScope,proto3" json:"allowed_scope,omitempty"`
	// Default value for corresponding ServiceAccountRule field, if not specified
	// there.
	//
	// Default is 48 hours.
	MaxGrantValidityDuration int64    `protobuf:"varint,2,opt,name=max_grant_validity_duration,json=maxGrantValidityDuration,proto3" json:"max_grant_validity_duration,omitempty"`
	XXX_NoUnkeyedLiteral     struct{} `json:"-"`
	XXX_unrecognized         []byte   `json:"-"`
	XXX_sizecache            int32    `json:"-"`
}

func (m *ServiceAccountRuleDefaults) Reset()         { *m = ServiceAccountRuleDefaults{} }
func (m *ServiceAccountRuleDefaults) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountRuleDefaults) ProtoMessage()    {}
func (*ServiceAccountRuleDefaults) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{7}
}

func (m *ServiceAccountRuleDefaults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAccountRuleDefaults.Unmarshal(m, b)
}
func (m *ServiceAccountRuleDefaults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAccountRuleDefaults.Marshal(b, m, deterministic)
}
func (m *ServiceAccountRuleDefaults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountRuleDefaults.Merge(m, src)
}
func (m *ServiceAccountRuleDefaults) XXX_Size() int {
	return xxx_messageInfo_ServiceAccountRuleDefaults.Size(m)
}
func (m *ServiceAccountRuleDefaults) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountRuleDefaults.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountRuleDefaults proto.InternalMessageInfo

func (m *ServiceAccountRuleDefaults) GetAllowedScope() []string {
	if m != nil {
		return m.AllowedScope
	}
	return nil
}

func (m *ServiceAccountRuleDefaults) GetMaxGrantValidityDuration() int64 {
	if m != nil {
		return m.MaxGrantValidityDuration
	}
	return 0
}

// ServiceAccountsProjectMapping defines what service accounts belong to what
// LUCI projects.
//
// Used by MintServiceAccountToken RPC as a final authorization step, after
// checking that the usage of the service account is allowed by Realms ACLs.
//
// This is a stop gap solution until the Token Server learns to use
// project-scoped accounts when calling Cloud IAM. Once this happens, we can
// move information contained in ServiceAccountsProjectMapping into Cloud IAM
// permissions.
//
// This message is stored as project_owned_accounts.cfg in luci-config.
type ServiceAccountsProjectMapping struct {
	// Each entry maps a bunch of service accounts to one or more projects.
	Mapping              []*ServiceAccountsProjectMapping_Mapping `protobuf:"bytes,1,rep,name=mapping,proto3" json:"mapping,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                 `json:"-"`
	XXX_unrecognized     []byte                                   `json:"-"`
	XXX_sizecache        int32                                    `json:"-"`
}

func (m *ServiceAccountsProjectMapping) Reset()         { *m = ServiceAccountsProjectMapping{} }
func (m *ServiceAccountsProjectMapping) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountsProjectMapping) ProtoMessage()    {}
func (*ServiceAccountsProjectMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{8}
}

func (m *ServiceAccountsProjectMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAccountsProjectMapping.Unmarshal(m, b)
}
func (m *ServiceAccountsProjectMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAccountsProjectMapping.Marshal(b, m, deterministic)
}
func (m *ServiceAccountsProjectMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountsProjectMapping.Merge(m, src)
}
func (m *ServiceAccountsProjectMapping) XXX_Size() int {
	return xxx_messageInfo_ServiceAccountsProjectMapping.Size(m)
}
func (m *ServiceAccountsProjectMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountsProjectMapping.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountsProjectMapping proto.InternalMessageInfo

func (m *ServiceAccountsProjectMapping) GetMapping() []*ServiceAccountsProjectMapping_Mapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

type ServiceAccountsProjectMapping_Mapping struct {
	// Names of LUCI projects.
	Project []string `protobuf:"bytes,1,rep,name=project,proto3" json:"project,omitempty"`
	// Emails of service accounts allowed to be used by all these projects.
	ServiceAccount       []string `protobuf:"bytes,2,rep,name=service_account,json=serviceAccount,proto3" json:"service_account,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceAccountsProjectMapping_Mapping) Reset()         { *m = ServiceAccountsProjectMapping_Mapping{} }
func (m *ServiceAccountsProjectMapping_Mapping) String() string { return proto.CompactTextString(m) }
func (*ServiceAccountsProjectMapping_Mapping) ProtoMessage()    {}
func (*ServiceAccountsProjectMapping_Mapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeb7d66bba60fd47, []int{8, 0}
}

func (m *ServiceAccountsProjectMapping_Mapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceAccountsProjectMapping_Mapping.Unmarshal(m, b)
}
func (m *ServiceAccountsProjectMapping_Mapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceAccountsProjectMapping_Mapping.Marshal(b, m, deterministic)
}
func (m *ServiceAccountsProjectMapping_Mapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAccountsProjectMapping_Mapping.Merge(m, src)
}
func (m *ServiceAccountsProjectMapping_Mapping) XXX_Size() int {
	return xxx_messageInfo_ServiceAccountsProjectMapping_Mapping.Size(m)
}
func (m *ServiceAccountsProjectMapping_Mapping) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAccountsProjectMapping_Mapping.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAccountsProjectMapping_Mapping proto.InternalMessageInfo

func (m *ServiceAccountsProjectMapping_Mapping) GetProject() []string {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *ServiceAccountsProjectMapping_Mapping) GetServiceAccount() []string {
	if m != nil {
		return m.ServiceAccount
	}
	return nil
}

func init() {
	proto.RegisterType((*TokenServerConfig)(nil), "tokenserver.admin.TokenServerConfig")
	proto.RegisterType((*CertificateAuthorityConfig)(nil), "tokenserver.admin.CertificateAuthorityConfig")
	proto.RegisterType((*DomainConfig)(nil), "tokenserver.admin.DomainConfig")
	proto.RegisterType((*DelegationPermissions)(nil), "tokenserver.admin.DelegationPermissions")
	proto.RegisterType((*DelegationRule)(nil), "tokenserver.admin.DelegationRule")
	proto.RegisterType((*ServiceAccountsPermissions)(nil), "tokenserver.admin.ServiceAccountsPermissions")
	proto.RegisterType((*ServiceAccountRule)(nil), "tokenserver.admin.ServiceAccountRule")
	proto.RegisterType((*ServiceAccountRuleDefaults)(nil), "tokenserver.admin.ServiceAccountRuleDefaults")
	proto.RegisterType((*ServiceAccountsProjectMapping)(nil), "tokenserver.admin.ServiceAccountsProjectMapping")
	proto.RegisterType((*ServiceAccountsProjectMapping_Mapping)(nil), "tokenserver.admin.ServiceAccountsProjectMapping.Mapping")
}

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/tokenserver/api/admin/v1/config.proto", fileDescriptor_aeb7d66bba60fd47)
}

var fileDescriptor_aeb7d66bba60fd47 = []byte{
	// 815 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x96, 0xd7, 0x6b, 0xef, 0x7a, 0x9a, 0xa4, 0xee, 0x34, 0x29, 0x43, 0x0a, 0xc2, 0x35, 0xaa,
	0x30, 0x17, 0xd8, 0xa2, 0x20, 0x81, 0x40, 0x5c, 0x84, 0x5a, 0xaa, 0x12, 0x15, 0x11, 0x6d, 0x5a,
	0x2e, 0xb8, 0x19, 0x4d, 0x67, 0x4f, 0xec, 0xa1, 0xbb, 0x33, 0xdb, 0xf9, 0x49, 0x9c, 0x3b, 0x6e,
	0x78, 0x03, 0x1e, 0x81, 0x17, 0xe1, 0x21, 0x78, 0x1f, 0xb4, 0xb3, 0xe3, 0xc6, 0x8e, 0x1d, 0x45,
	0xbd, 0xf2, 0xce, 0xf7, 0x7d, 0xe7, 0xec, 0x9c, 0xef, 0x3b, 0x2b, 0xa3, 0x1f, 0x66, 0x6a, 0xcc,
	0xe7, 0x5a, 0x95, 0xc2, 0x95, 0x63, 0xa5, 0x67, 0x93, 0xc2, 0x71, 0x31, 0xb1, 0xea, 0x2d, 0x48,
	0x03, 0xfa, 0x02, 0xf4, 0x84, 0x55, 0x62, 0xc2, 0xf2, 0x52, 0xc8, 0xc9, 0xc5, 0xd7, 0x13, 0xae,
	0xe4, 0xb9, 0x98, 0x8d, 0x2b, 0xad, 0xac, 0xc2, 0x0f, 0x56, 0x64, 0x63, 0x2f, 0x19, 0x5e, 0xa2,
	0x07, 0xaf, 0x6a, 0xf0, 0xcc, 0x83, 0xcf, 0xbd, 0x1a, 0xbf, 0x41, 0x07, 0x1c, 0xb4, 0x15, 0xe7,
	0x82, 0x33, 0x0b, 0x94, 0x39, 0x3b, 0x57, 0x5a, 0xd8, 0x2b, 0xd2, 0x1a, 0xb4, 0x47, 0xf7, 0x9e,
	0x7d, 0x35, 0xde, 0xe8, 0x33, 0x7e, 0x7e, 0xad, 0x3f, 0x5a, 0xca, 0x9b, 0x6e, 0xd9, 0x3e, 0xdf,
	0xc2, 0x0d, 0xff, 0x8a, 0xd0, 0xe1, 0xed, 0x45, 0xf8, 0x31, 0xea, 0x39, 0x29, 0xde, 0x39, 0xa0,
	0x22, 0x27, 0xdd, 0x41, 0x6b, 0xd4, 0xce, 0xd2, 0x06, 0x38, 0xce, 0xf1, 0x1e, 0x8a, 0xb8, 0x24,
	0xad, 0x41, 0x6b, 0xd4, 0xcb, 0x22, 0x2e, 0x6b, 0x71, 0xfd, 0x0e, 0x5a, 0x31, 0x3b, 0x27, 0x91,
	0x87, 0xd3, 0x1a, 0x38, 0x65, 0x76, 0x8e, 0x3f, 0x42, 0x09, 0xd7, 0x05, 0x75, 0xba, 0x20, 0x6d,
	0x4f, 0x75, 0xb9, 0x2e, 0x5e, 0xeb, 0xc2, 0xbf, 0xc2, 0x00, 0x55, 0xf5, 0x78, 0x24, 0x1e, 0xb4,
	0x46, 0x69, 0x96, 0x3a, 0x03, 0xbf, 0xd6, 0x67, 0xfc, 0x04, 0xed, 0x78, 0x82, 0x1a, 0xae, 0x2a,
	0x30, 0x24, 0x19, 0xb4, 0x47, 0xbd, 0xec, 0x9e, 0xc7, 0xce, 0x3c, 0x84, 0xa7, 0x68, 0xf7, 0xad,
	0x54, 0x97, 0x92, 0xe6, 0xaa, 0x64, 0x42, 0x1a, 0xd2, 0xf1, 0xee, 0x7c, 0xb6, 0xc5, 0x9d, 0xa9,
	0x57, 0x04, 0x3f, 0x76, 0x7c, 0x55, 0x03, 0x99, 0xa1, 0x45, 0x3b, 0xab, 0x2c, 0x7e, 0x84, 0xba,
	0x4d, 0x3f, 0x6f, 0x76, 0x2f, 0x0b, 0x27, 0xfc, 0x2d, 0x7a, 0x54, 0x32, 0x3e, 0x17, 0x12, 0xa8,
	0xef, 0x4f, 0x0b, 0x71, 0x0e, 0x56, 0x94, 0x40, 0x3a, 0xde, 0x9d, 0xfd, 0xc0, 0xfa, 0x34, 0x5f,
	0x06, 0xee, 0x24, 0x4e, 0xa3, 0x7e, 0xfb, 0x24, 0x4e, 0xdb, 0xfd, 0xf8, 0x24, 0x4e, 0xe3, 0x7e,
	0xe7, 0x24, 0x4e, 0xbb, 0xfd, 0x64, 0x78, 0x8a, 0x0e, 0xa6, 0x50, 0xc0, 0x8c, 0x59, 0xa1, 0xe4,
	0x29, 0xe8, 0x52, 0x18, 0x23, 0x94, 0x34, 0xf8, 0x3b, 0xd4, 0xd1, 0xae, 0x00, 0x13, 0xa2, 0x7e,
	0xb2, 0x6d, 0x98, 0xf7, 0x85, 0x99, 0x2b, 0x20, 0x6b, 0xf4, 0xc3, 0xbf, 0x23, 0xb4, 0xb7, 0xce,
	0x60, 0x8c, 0x62, 0xc9, 0x4a, 0x08, 0x41, 0xf9, 0x67, 0xbc, 0x8f, 0x3a, 0xea, 0x52, 0x82, 0x26,
	0x91, 0x9f, 0xae, 0x39, 0xe0, 0x4f, 0x50, 0x4f, 0xc3, 0x3b, 0x07, 0xc6, 0x2a, 0x4d, 0xda, 0x9e,
	0xb9, 0x06, 0xea, 0xd1, 0x59, 0x51, 0xa8, 0x4b, 0xc8, 0xa9, 0x55, 0x54, 0x94, 0x15, 0x68, 0xa3,
	0x24, 0xb3, 0x40, 0x62, 0x2f, 0xdd, 0x0f, 0xec, 0x2b, 0x75, 0x7c, 0xcd, 0xe1, 0x2f, 0x51, 0x7f,
	0x59, 0xc5, 0x5c, 0x2e, 0x40, 0x72, 0xf0, 0x09, 0xf5, 0xb2, 0xfb, 0x01, 0x3f, 0x0a, 0x30, 0x7e,
	0x8a, 0xf6, 0x2c, 0xd3, 0x33, 0xb0, 0xb4, 0x1e, 0x54, 0x70, 0x20, 0x5d, 0x2f, 0xdc, 0x6d, 0xd0,
	0xb3, 0x06, 0xc4, 0xcf, 0xd0, 0x41, 0xc9, 0x16, 0xf4, 0x82, 0x15, 0x22, 0x17, 0xf6, 0x8a, 0xe6,
	0x4e, 0xfb, 0x61, 0x49, 0xe2, 0x13, 0x78, 0x58, 0xb2, 0xc5, 0x6f, 0x81, 0x9b, 0x06, 0x6a, 0xf8,
	0x4f, 0x0b, 0x1d, 0x86, 0xfa, 0x23, 0xce, 0x95, 0x93, 0xd6, 0xac, 0xda, 0xfd, 0xe3, 0xba, 0xdd,
	0x4f, 0xb7, 0xd8, 0xbd, 0x5e, 0xbd, 0x62, 0x39, 0x3e, 0x46, 0x69, 0x0e, 0xe7, 0xcc, 0x15, 0xd6,
	0xf8, 0xad, 0xdf, 0xfe, 0x65, 0x6e, 0xd6, 0x4f, 0x43, 0x51, 0xf6, 0xbe, 0x7c, 0xf8, 0x5f, 0x84,
	0xf0, 0xa6, 0xf0, 0x03, 0x12, 0xfc, 0x02, 0xdd, 0x0f, 0xde, 0x51, 0xd6, 0x34, 0x08, 0x39, 0xee,
	0x99, 0xb5, 0xb6, 0xb5, 0x89, 0x37, 0x84, 0x74, 0xa6, 0x95, 0xab, 0x48, 0xcf, 0xcb, 0x1f, 0xae,
	0xcb, 0x5f, 0xd4, 0x14, 0xfe, 0x1c, 0xed, 0x2e, 0xa3, 0xf4, 0x9f, 0x63, 0xc8, 0x7d, 0x27, 0x80,
	0xfe, 0x7b, 0xc4, 0x1f, 0xa3, 0x14, 0x64, 0x4e, 0x9d, 0x01, 0x1d, 0x72, 0x4e, 0x40, 0xe6, 0xaf,
	0x0d, 0xe8, 0xfa, 0xca, 0x95, 0x56, 0x8b, 0xab, 0x10, 0x6b, 0x73, 0xa8, 0xbb, 0x5a, 0xed, 0x8c,
	0x85, 0x9c, 0x36, 0x6c, 0xda, 0x74, 0x0d, 0xe0, 0xa9, 0x17, 0xfd, 0x84, 0x1e, 0xd7, 0x99, 0xcf,
	0x34, 0x93, 0xf6, 0xd6, 0xe4, 0x49, 0xc9, 0x16, 0x2f, 0x6a, 0xc5, 0x46, 0xfc, 0x7f, 0x6e, 0xc4,
	0xbf, 0x1a, 0xc0, 0xe6, 0x60, 0xad, 0x2d, 0x83, 0xdd, 0x71, 0x85, 0xe8, 0x8e, 0x2b, 0xfc, 0xdb,
	0x42, 0x9f, 0xde, 0xdc, 0x40, 0xad, 0xfe, 0x00, 0x6e, 0x7f, 0x61, 0x55, 0x25, 0xe4, 0x0c, 0x67,
	0x28, 0x29, 0x9b, 0xc7, 0xb0, 0x86, 0xdf, 0xdf, 0xb9, 0x46, 0x37, 0x5a, 0x8c, 0xc3, 0x6f, 0xb6,
	0x6c, 0x74, 0xf8, 0x12, 0x25, 0xcb, 0xf6, 0x04, 0x25, 0x55, 0xa3, 0x0e, 0xe3, 0x2d, 0x8f, 0xdb,
	0x96, 0x26, 0xda, 0xb6, 0x34, 0x3f, 0x27, 0xbf, 0x77, 0xfc, 0x2d, 0xde, 0x74, 0xfd, 0x1f, 0xd9,
	0x37, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x31, 0x03, 0xb6, 0x28, 0x06, 0x07, 0x00, 0x00,
}
