// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/tokenserver/api/admin/v1/certificate_authorities.proto

package admin

import prpc "github.com/tetrafolium/luci-go/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FetchCRLRequest identifies a name of CA to fetch CRL for.
type FetchCRLRequest struct {
	Cn                   string   `protobuf:"bytes,1,opt,name=cn,proto3" json:"cn,omitempty"`
	Force                bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FetchCRLRequest) Reset()         { *m = FetchCRLRequest{} }
func (m *FetchCRLRequest) String() string { return proto.CompactTextString(m) }
func (*FetchCRLRequest) ProtoMessage()    {}
func (*FetchCRLRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{0}
}

func (m *FetchCRLRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchCRLRequest.Unmarshal(m, b)
}
func (m *FetchCRLRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchCRLRequest.Marshal(b, m, deterministic)
}
func (m *FetchCRLRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchCRLRequest.Merge(m, src)
}
func (m *FetchCRLRequest) XXX_Size() int {
	return xxx_messageInfo_FetchCRLRequest.Size(m)
}
func (m *FetchCRLRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchCRLRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FetchCRLRequest proto.InternalMessageInfo

func (m *FetchCRLRequest) GetCn() string {
	if m != nil {
		return m.Cn
	}
	return ""
}

func (m *FetchCRLRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

// FetchCRLResponse is returned by FetchCRL.
type FetchCRLResponse struct {
	CrlStatus            *CRLStatus `protobuf:"bytes,1,opt,name=crl_status,json=crlStatus,proto3" json:"crl_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FetchCRLResponse) Reset()         { *m = FetchCRLResponse{} }
func (m *FetchCRLResponse) String() string { return proto.CompactTextString(m) }
func (*FetchCRLResponse) ProtoMessage()    {}
func (*FetchCRLResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{1}
}

func (m *FetchCRLResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FetchCRLResponse.Unmarshal(m, b)
}
func (m *FetchCRLResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FetchCRLResponse.Marshal(b, m, deterministic)
}
func (m *FetchCRLResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FetchCRLResponse.Merge(m, src)
}
func (m *FetchCRLResponse) XXX_Size() int {
	return xxx_messageInfo_FetchCRLResponse.Size(m)
}
func (m *FetchCRLResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FetchCRLResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FetchCRLResponse proto.InternalMessageInfo

func (m *FetchCRLResponse) GetCrlStatus() *CRLStatus {
	if m != nil {
		return m.CrlStatus
	}
	return nil
}

// ListCAsResponse is returned by ListCAs.
type ListCAsResponse struct {
	Cn                   []string `protobuf:"bytes,1,rep,name=cn,proto3" json:"cn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCAsResponse) Reset()         { *m = ListCAsResponse{} }
func (m *ListCAsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCAsResponse) ProtoMessage()    {}
func (*ListCAsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{2}
}

func (m *ListCAsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListCAsResponse.Unmarshal(m, b)
}
func (m *ListCAsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListCAsResponse.Marshal(b, m, deterministic)
}
func (m *ListCAsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCAsResponse.Merge(m, src)
}
func (m *ListCAsResponse) XXX_Size() int {
	return xxx_messageInfo_ListCAsResponse.Size(m)
}
func (m *ListCAsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCAsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCAsResponse proto.InternalMessageInfo

func (m *ListCAsResponse) GetCn() []string {
	if m != nil {
		return m.Cn
	}
	return nil
}

// GetCAStatusRequest identifies a name of CA to fetch.
type GetCAStatusRequest struct {
	Cn                   string   `protobuf:"bytes,1,opt,name=cn,proto3" json:"cn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCAStatusRequest) Reset()         { *m = GetCAStatusRequest{} }
func (m *GetCAStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetCAStatusRequest) ProtoMessage()    {}
func (*GetCAStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{3}
}

func (m *GetCAStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCAStatusRequest.Unmarshal(m, b)
}
func (m *GetCAStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCAStatusRequest.Marshal(b, m, deterministic)
}
func (m *GetCAStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCAStatusRequest.Merge(m, src)
}
func (m *GetCAStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetCAStatusRequest.Size(m)
}
func (m *GetCAStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCAStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCAStatusRequest proto.InternalMessageInfo

func (m *GetCAStatusRequest) GetCn() string {
	if m != nil {
		return m.Cn
	}
	return ""
}

// GetCAStatusResponse is returned by GetCAStatus method.
//
// If requested CA doesn't exist, all fields are empty.
type GetCAStatusResponse struct {
	Config               *CertificateAuthorityConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Cert                 string                      `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	Removed              bool                        `protobuf:"varint,3,opt,name=removed,proto3" json:"removed,omitempty"`
	Ready                bool                        `protobuf:"varint,4,opt,name=ready,proto3" json:"ready,omitempty"`
	AddedRev             string                      `protobuf:"bytes,5,opt,name=added_rev,json=addedRev,proto3" json:"added_rev,omitempty"`
	UpdatedRev           string                      `protobuf:"bytes,6,opt,name=updated_rev,json=updatedRev,proto3" json:"updated_rev,omitempty"`
	RemovedRev           string                      `protobuf:"bytes,7,opt,name=removed_rev,json=removedRev,proto3" json:"removed_rev,omitempty"`
	CrlStatus            *CRLStatus                  `protobuf:"bytes,8,opt,name=crl_status,json=crlStatus,proto3" json:"crl_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *GetCAStatusResponse) Reset()         { *m = GetCAStatusResponse{} }
func (m *GetCAStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetCAStatusResponse) ProtoMessage()    {}
func (*GetCAStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{4}
}

func (m *GetCAStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetCAStatusResponse.Unmarshal(m, b)
}
func (m *GetCAStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetCAStatusResponse.Marshal(b, m, deterministic)
}
func (m *GetCAStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCAStatusResponse.Merge(m, src)
}
func (m *GetCAStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetCAStatusResponse.Size(m)
}
func (m *GetCAStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCAStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCAStatusResponse proto.InternalMessageInfo

func (m *GetCAStatusResponse) GetConfig() *CertificateAuthorityConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *GetCAStatusResponse) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func (m *GetCAStatusResponse) GetRemoved() bool {
	if m != nil {
		return m.Removed
	}
	return false
}

func (m *GetCAStatusResponse) GetReady() bool {
	if m != nil {
		return m.Ready
	}
	return false
}

func (m *GetCAStatusResponse) GetAddedRev() string {
	if m != nil {
		return m.AddedRev
	}
	return ""
}

func (m *GetCAStatusResponse) GetUpdatedRev() string {
	if m != nil {
		return m.UpdatedRev
	}
	return ""
}

func (m *GetCAStatusResponse) GetRemovedRev() string {
	if m != nil {
		return m.RemovedRev
	}
	return ""
}

func (m *GetCAStatusResponse) GetCrlStatus() *CRLStatus {
	if m != nil {
		return m.CrlStatus
	}
	return nil
}

// IsRevokedCertRequest contains a name of the CA and a cert serial number.
type IsRevokedCertRequest struct {
	Ca                   string   `protobuf:"bytes,1,opt,name=ca,proto3" json:"ca,omitempty"`
	Sn                   string   `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsRevokedCertRequest) Reset()         { *m = IsRevokedCertRequest{} }
func (m *IsRevokedCertRequest) String() string { return proto.CompactTextString(m) }
func (*IsRevokedCertRequest) ProtoMessage()    {}
func (*IsRevokedCertRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{5}
}

func (m *IsRevokedCertRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsRevokedCertRequest.Unmarshal(m, b)
}
func (m *IsRevokedCertRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsRevokedCertRequest.Marshal(b, m, deterministic)
}
func (m *IsRevokedCertRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsRevokedCertRequest.Merge(m, src)
}
func (m *IsRevokedCertRequest) XXX_Size() int {
	return xxx_messageInfo_IsRevokedCertRequest.Size(m)
}
func (m *IsRevokedCertRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IsRevokedCertRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IsRevokedCertRequest proto.InternalMessageInfo

func (m *IsRevokedCertRequest) GetCa() string {
	if m != nil {
		return m.Ca
	}
	return ""
}

func (m *IsRevokedCertRequest) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

// IsRevokedCertResponse is returned by IsRevokedCert
type IsRevokedCertResponse struct {
	Revoked              bool     `protobuf:"varint,1,opt,name=revoked,proto3" json:"revoked,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IsRevokedCertResponse) Reset()         { *m = IsRevokedCertResponse{} }
func (m *IsRevokedCertResponse) String() string { return proto.CompactTextString(m) }
func (*IsRevokedCertResponse) ProtoMessage()    {}
func (*IsRevokedCertResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{6}
}

func (m *IsRevokedCertResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IsRevokedCertResponse.Unmarshal(m, b)
}
func (m *IsRevokedCertResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IsRevokedCertResponse.Marshal(b, m, deterministic)
}
func (m *IsRevokedCertResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IsRevokedCertResponse.Merge(m, src)
}
func (m *IsRevokedCertResponse) XXX_Size() int {
	return xxx_messageInfo_IsRevokedCertResponse.Size(m)
}
func (m *IsRevokedCertResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IsRevokedCertResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IsRevokedCertResponse proto.InternalMessageInfo

func (m *IsRevokedCertResponse) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

// CheckCertificateRequest contains a pem encoded certificate to check.
type CheckCertificateRequest struct {
	CertPem              string   `protobuf:"bytes,1,opt,name=cert_pem,json=certPem,proto3" json:"cert_pem,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCertificateRequest) Reset()         { *m = CheckCertificateRequest{} }
func (m *CheckCertificateRequest) String() string { return proto.CompactTextString(m) }
func (*CheckCertificateRequest) ProtoMessage()    {}
func (*CheckCertificateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{7}
}

func (m *CheckCertificateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCertificateRequest.Unmarshal(m, b)
}
func (m *CheckCertificateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCertificateRequest.Marshal(b, m, deterministic)
}
func (m *CheckCertificateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCertificateRequest.Merge(m, src)
}
func (m *CheckCertificateRequest) XXX_Size() int {
	return xxx_messageInfo_CheckCertificateRequest.Size(m)
}
func (m *CheckCertificateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCertificateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCertificateRequest proto.InternalMessageInfo

func (m *CheckCertificateRequest) GetCertPem() string {
	if m != nil {
		return m.CertPem
	}
	return ""
}

// CheckCertificateResponse is returned by CheckCertificate.
type CheckCertificateResponse struct {
	IsValid              bool     `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	InvalidReason        string   `protobuf:"bytes,2,opt,name=invalid_reason,json=invalidReason,proto3" json:"invalid_reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckCertificateResponse) Reset()         { *m = CheckCertificateResponse{} }
func (m *CheckCertificateResponse) String() string { return proto.CompactTextString(m) }
func (*CheckCertificateResponse) ProtoMessage()    {}
func (*CheckCertificateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{8}
}

func (m *CheckCertificateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckCertificateResponse.Unmarshal(m, b)
}
func (m *CheckCertificateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckCertificateResponse.Marshal(b, m, deterministic)
}
func (m *CheckCertificateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckCertificateResponse.Merge(m, src)
}
func (m *CheckCertificateResponse) XXX_Size() int {
	return xxx_messageInfo_CheckCertificateResponse.Size(m)
}
func (m *CheckCertificateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckCertificateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckCertificateResponse proto.InternalMessageInfo

func (m *CheckCertificateResponse) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *CheckCertificateResponse) GetInvalidReason() string {
	if m != nil {
		return m.InvalidReason
	}
	return ""
}

// CRLStatus describes the latest known state of imported CRL.
type CRLStatus struct {
	LastUpdateTime       *timestamp.Timestamp `protobuf:"bytes,1,opt,name=last_update_time,json=lastUpdateTime,proto3" json:"last_update_time,omitempty"`
	LastFetchTime        *timestamp.Timestamp `protobuf:"bytes,2,opt,name=last_fetch_time,json=lastFetchTime,proto3" json:"last_fetch_time,omitempty"`
	LastFetchEtag        string               `protobuf:"bytes,3,opt,name=last_fetch_etag,json=lastFetchEtag,proto3" json:"last_fetch_etag,omitempty"`
	RevokedCertsCount    int64                `protobuf:"varint,4,opt,name=revoked_certs_count,json=revokedCertsCount,proto3" json:"revoked_certs_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *CRLStatus) Reset()         { *m = CRLStatus{} }
func (m *CRLStatus) String() string { return proto.CompactTextString(m) }
func (*CRLStatus) ProtoMessage()    {}
func (*CRLStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_10a363ff389b1807, []int{9}
}

func (m *CRLStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CRLStatus.Unmarshal(m, b)
}
func (m *CRLStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CRLStatus.Marshal(b, m, deterministic)
}
func (m *CRLStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CRLStatus.Merge(m, src)
}
func (m *CRLStatus) XXX_Size() int {
	return xxx_messageInfo_CRLStatus.Size(m)
}
func (m *CRLStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CRLStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CRLStatus proto.InternalMessageInfo

func (m *CRLStatus) GetLastUpdateTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastUpdateTime
	}
	return nil
}

func (m *CRLStatus) GetLastFetchTime() *timestamp.Timestamp {
	if m != nil {
		return m.LastFetchTime
	}
	return nil
}

func (m *CRLStatus) GetLastFetchEtag() string {
	if m != nil {
		return m.LastFetchEtag
	}
	return ""
}

func (m *CRLStatus) GetRevokedCertsCount() int64 {
	if m != nil {
		return m.RevokedCertsCount
	}
	return 0
}

func init() {
	proto.RegisterType((*FetchCRLRequest)(nil), "tokenserver.admin.FetchCRLRequest")
	proto.RegisterType((*FetchCRLResponse)(nil), "tokenserver.admin.FetchCRLResponse")
	proto.RegisterType((*ListCAsResponse)(nil), "tokenserver.admin.ListCAsResponse")
	proto.RegisterType((*GetCAStatusRequest)(nil), "tokenserver.admin.GetCAStatusRequest")
	proto.RegisterType((*GetCAStatusResponse)(nil), "tokenserver.admin.GetCAStatusResponse")
	proto.RegisterType((*IsRevokedCertRequest)(nil), "tokenserver.admin.IsRevokedCertRequest")
	proto.RegisterType((*IsRevokedCertResponse)(nil), "tokenserver.admin.IsRevokedCertResponse")
	proto.RegisterType((*CheckCertificateRequest)(nil), "tokenserver.admin.CheckCertificateRequest")
	proto.RegisterType((*CheckCertificateResponse)(nil), "tokenserver.admin.CheckCertificateResponse")
	proto.RegisterType((*CRLStatus)(nil), "tokenserver.admin.CRLStatus")
}

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/tokenserver/api/admin/v1/certificate_authorities.proto", fileDescriptor_10a363ff389b1807)
}

var fileDescriptor_10a363ff389b1807 = []byte{
	// 709 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6f, 0xd3, 0x4a,
	0x10, 0x55, 0x92, 0xb6, 0x49, 0xa6, 0xea, 0xd7, 0xb6, 0xb7, 0x37, 0x75, 0xaf, 0xd4, 0x5e, 0x43,
	0x4b, 0x05, 0xc2, 0x56, 0x0b, 0x02, 0x09, 0x9e, 0xda, 0x50, 0x10, 0xa2, 0x12, 0xc8, 0x05, 0x1e,
	0x50, 0x25, 0x6b, 0x6b, 0x4f, 0x92, 0x55, 0x62, 0x6f, 0xd8, 0x5d, 0x47, 0xea, 0x7f, 0xe3, 0xdf,
	0xf0, 0xcc, 0x7f, 0x40, 0xbb, 0x5e, 0xa7, 0xf9, 0xb0, 0x28, 0x7d, 0xf3, 0xcc, 0x9e, 0x33, 0x33,
	0x3e, 0x3b, 0x67, 0xe1, 0x43, 0x97, 0x7b, 0x51, 0x4f, 0xf0, 0x84, 0x65, 0x89, 0xc7, 0x45, 0xd7,
	0x1f, 0x64, 0x11, 0xf3, 0x15, 0xef, 0x63, 0x2a, 0x51, 0x8c, 0x50, 0xf8, 0x74, 0xc8, 0x7c, 0x1a,
	0x27, 0x2c, 0xf5, 0x47, 0xc7, 0x7e, 0x84, 0x42, 0xb1, 0x0e, 0x8b, 0xa8, 0xc2, 0x90, 0x66, 0xaa,
	0xc7, 0x05, 0x53, 0x0c, 0xa5, 0x37, 0x14, 0x5c, 0x71, 0xb2, 0x31, 0xc1, 0xf3, 0x0c, 0xc7, 0xd9,
	0xed, 0x72, 0xde, 0x1d, 0xa0, 0x6f, 0x00, 0xd7, 0x59, 0xc7, 0xc7, 0x64, 0xa8, 0x6e, 0x72, 0xbc,
	0xb3, 0x37, 0x7b, 0xa8, 0x58, 0x82, 0x52, 0xd1, 0x64, 0x68, 0x01, 0xaf, 0xee, 0x39, 0x1d, 0x4f,
	0x3b, 0xac, 0x9b, 0x73, 0xdd, 0x97, 0xb0, 0xf6, 0x16, 0x55, 0xd4, 0x6b, 0x07, 0x17, 0x01, 0x7e,
	0xcf, 0x50, 0x2a, 0xb2, 0x0a, 0xd5, 0x28, 0x6d, 0x55, 0xf6, 0x2b, 0x47, 0xcd, 0xa0, 0x1a, 0xa5,
	0x64, 0x0b, 0x16, 0x3b, 0x5c, 0x44, 0xd8, 0xaa, 0xee, 0x57, 0x8e, 0x1a, 0x41, 0x1e, 0xb8, 0x1f,
	0x61, 0xfd, 0x96, 0x28, 0x87, 0x3c, 0x95, 0x48, 0x5e, 0x03, 0x44, 0x62, 0x10, 0x4a, 0x45, 0x55,
	0x26, 0x4d, 0x85, 0xe5, 0x93, 0xff, 0xbc, 0xb9, 0xdf, 0xf5, 0xda, 0xc1, 0xc5, 0xa5, 0xc1, 0x04,
	0xcd, 0x48, 0x0c, 0xf2, 0x4f, 0xf7, 0x7f, 0x58, 0xbb, 0x60, 0x52, 0xb5, 0x4f, 0xe5, 0xb8, 0x5e,
	0x31, 0x49, 0x2d, 0x9f, 0xc4, 0x7d, 0x08, 0xe4, 0x1d, 0xaa, 0xf6, 0xa9, 0x25, 0x97, 0xcf, 0xeb,
	0xfe, 0xa8, 0xc2, 0xe6, 0x14, 0xcc, 0x56, 0x3b, 0x87, 0xa5, 0xfc, 0xd7, 0xed, 0x64, 0x4f, 0xcb,
	0x26, 0xbb, 0xbd, 0xb9, 0x53, 0x7b, 0x71, 0x37, 0x6d, 0x43, 0x0a, 0x2c, 0x99, 0x10, 0x58, 0xd0,
	0xf7, 0x6b, 0xd4, 0x68, 0x06, 0xe6, 0x9b, 0xb4, 0xa0, 0x2e, 0x30, 0xe1, 0x23, 0x8c, 0x5b, 0x35,
	0x23, 0x52, 0x11, 0x6a, 0xf1, 0x04, 0xd2, 0xf8, 0xa6, 0xb5, 0x90, 0x8b, 0x67, 0x02, 0xb2, 0x0b,
	0x4d, 0x1a, 0xc7, 0x18, 0x87, 0x02, 0x47, 0xad, 0x45, 0x53, 0xa8, 0x61, 0x12, 0x01, 0x8e, 0xc8,
	0x1e, 0x2c, 0x67, 0xc3, 0x98, 0x2a, 0x7b, 0xbc, 0x64, 0x8e, 0xc1, 0xa6, 0x2c, 0xc0, 0x96, 0x37,
	0x80, 0x7a, 0x0e, 0xb0, 0x29, 0x0d, 0x98, 0xbe, 0x87, 0xc6, 0xfd, 0xee, 0xe1, 0x05, 0x6c, 0xbd,
	0x97, 0x01, 0x8e, 0x78, 0x1f, 0x63, 0x2d, 0xc7, 0xa4, 0xcc, 0x74, 0x2c, 0x33, 0xd5, 0xb1, 0x4c,
	0xad, 0x0a, 0x55, 0x99, 0xba, 0xc7, 0xf0, 0xcf, 0x0c, 0xcf, 0xea, 0x6e, 0xc4, 0x31, 0x69, 0xc3,
	0x36, 0xe2, 0x98, 0xd0, 0x7d, 0x0e, 0xff, 0xb6, 0x7b, 0x18, 0xf5, 0x27, 0x54, 0x2f, 0xba, 0xed,
	0x40, 0x43, 0x2b, 0x1b, 0x0e, 0x31, 0xb1, 0x3d, 0xeb, 0x3a, 0xfe, 0x84, 0x89, 0x7b, 0x05, 0xad,
	0x79, 0x96, 0xed, 0xb5, 0x03, 0x0d, 0x26, 0xc3, 0x11, 0x1d, 0xb0, 0x71, 0x33, 0x26, 0xbf, 0xea,
	0x90, 0x1c, 0xc0, 0x2a, 0x4b, 0xcd, 0x49, 0x28, 0x90, 0x4a, 0x5e, 0xcc, 0xbe, 0x62, 0xb3, 0x81,
	0x49, 0xba, 0xbf, 0x2a, 0xd0, 0x1c, 0xeb, 0x42, 0xde, 0xc0, 0xfa, 0x80, 0x4a, 0x15, 0xe6, 0xea,
	0x87, 0xda, 0x79, 0x76, 0x7b, 0x1c, 0x2f, 0xb7, 0xa5, 0x57, 0xd8, 0xd2, 0xfb, 0x5c, 0xd8, 0x32,
	0x58, 0xd5, 0x9c, 0x2f, 0x86, 0xa2, 0x93, 0xe4, 0x0c, 0xd6, 0x4c, 0x95, 0x8e, 0x36, 0x4c, 0x5e,
	0xa4, 0x7a, 0x67, 0x91, 0x15, 0x4d, 0x31, 0x16, 0x33, 0x35, 0x0e, 0xa7, 0x6a, 0xa0, 0xa2, 0x5d,
	0xb3, 0x6a, 0xcd, 0x09, 0xdc, 0xb9, 0xa2, 0x5d, 0xe2, 0xc1, 0xa6, 0x95, 0x37, 0xd4, 0x82, 0xc9,
	0x30, 0xe2, 0x59, 0xaa, 0xcc, 0xfa, 0xd5, 0x82, 0x0d, 0x71, 0x7b, 0x3f, 0xb2, 0xad, 0x0f, 0x4e,
	0x7e, 0xd6, 0x60, 0xbb, 0x64, 0xeb, 0x19, 0x4a, 0x72, 0x09, 0x8d, 0xc2, 0xe2, 0xc4, 0x2d, 0x59,
	0x9f, 0x99, 0x87, 0xc3, 0x79, 0xf0, 0x47, 0xcc, 0xd8, 0x85, 0x75, 0x6b, 0x73, 0xb2, 0x3d, 0xf7,
	0xf7, 0xe7, 0xfa, 0xd9, 0x73, 0xca, 0x7a, 0xcd, 0x3e, 0x0d, 0x57, 0xb0, 0x3c, 0xe1, 0x71, 0x72,
	0x50, 0x42, 0x99, 0x7f, 0x2a, 0x9c, 0xc3, 0xbb, 0x60, 0xb6, 0xfa, 0x35, 0xac, 0x4c, 0xed, 0x32,
	0x79, 0x54, 0x42, 0x2c, 0x73, 0x89, 0x73, 0x74, 0x37, 0xd0, 0xf6, 0xe8, 0xc3, 0xfa, 0xec, 0x1a,
	0x93, 0xc7, 0x65, 0x26, 0x2d, 0x77, 0x88, 0xf3, 0xe4, 0xaf, 0xb0, 0x79, 0xb3, 0xb3, 0xfa, 0xb7,
	0x45, 0x83, 0xb8, 0x5e, 0x32, 0x5a, 0x3f, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x7d, 0xe5,
	0x25, 0xd2, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CertificateAuthoritiesClient is the client API for CertificateAuthorities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CertificateAuthoritiesClient interface {
	// FetchCRL makes the server fetch a CRL for some CA.
	FetchCRL(ctx context.Context, in *FetchCRLRequest, opts ...grpc.CallOption) (*FetchCRLResponse, error)
	// ListCAs returns a list of Common Names of registered CAs.
	ListCAs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCAsResponse, error)
	// GetCAStatus returns configuration of some CA defined in the config.
	GetCAStatus(ctx context.Context, in *GetCAStatusRequest, opts ...grpc.CallOption) (*GetCAStatusResponse, error)
	// IsRevokedCert says whether a certificate serial number is in the CRL.
	IsRevokedCert(ctx context.Context, in *IsRevokedCertRequest, opts ...grpc.CallOption) (*IsRevokedCertResponse, error)
	// CheckCertificate says whether a certificate is valid or not.
	CheckCertificate(ctx context.Context, in *CheckCertificateRequest, opts ...grpc.CallOption) (*CheckCertificateResponse, error)
}
type certificateAuthoritiesPRPCClient struct {
	client *prpc.Client
}

func NewCertificateAuthoritiesPRPCClient(client *prpc.Client) CertificateAuthoritiesClient {
	return &certificateAuthoritiesPRPCClient{client}
}

func (c *certificateAuthoritiesPRPCClient) FetchCRL(ctx context.Context, in *FetchCRLRequest, opts ...grpc.CallOption) (*FetchCRLResponse, error) {
	out := new(FetchCRLResponse)
	err := c.client.Call(ctx, "tokenserver.admin.CertificateAuthorities", "FetchCRL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesPRPCClient) ListCAs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCAsResponse, error) {
	out := new(ListCAsResponse)
	err := c.client.Call(ctx, "tokenserver.admin.CertificateAuthorities", "ListCAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesPRPCClient) GetCAStatus(ctx context.Context, in *GetCAStatusRequest, opts ...grpc.CallOption) (*GetCAStatusResponse, error) {
	out := new(GetCAStatusResponse)
	err := c.client.Call(ctx, "tokenserver.admin.CertificateAuthorities", "GetCAStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesPRPCClient) IsRevokedCert(ctx context.Context, in *IsRevokedCertRequest, opts ...grpc.CallOption) (*IsRevokedCertResponse, error) {
	out := new(IsRevokedCertResponse)
	err := c.client.Call(ctx, "tokenserver.admin.CertificateAuthorities", "IsRevokedCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesPRPCClient) CheckCertificate(ctx context.Context, in *CheckCertificateRequest, opts ...grpc.CallOption) (*CheckCertificateResponse, error) {
	out := new(CheckCertificateResponse)
	err := c.client.Call(ctx, "tokenserver.admin.CertificateAuthorities", "CheckCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type certificateAuthoritiesClient struct {
	cc grpc.ClientConnInterface
}

func NewCertificateAuthoritiesClient(cc grpc.ClientConnInterface) CertificateAuthoritiesClient {
	return &certificateAuthoritiesClient{cc}
}

func (c *certificateAuthoritiesClient) FetchCRL(ctx context.Context, in *FetchCRLRequest, opts ...grpc.CallOption) (*FetchCRLResponse, error) {
	out := new(FetchCRLResponse)
	err := c.cc.Invoke(ctx, "/tokenserver.admin.CertificateAuthorities/FetchCRL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesClient) ListCAs(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListCAsResponse, error) {
	out := new(ListCAsResponse)
	err := c.cc.Invoke(ctx, "/tokenserver.admin.CertificateAuthorities/ListCAs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesClient) GetCAStatus(ctx context.Context, in *GetCAStatusRequest, opts ...grpc.CallOption) (*GetCAStatusResponse, error) {
	out := new(GetCAStatusResponse)
	err := c.cc.Invoke(ctx, "/tokenserver.admin.CertificateAuthorities/GetCAStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesClient) IsRevokedCert(ctx context.Context, in *IsRevokedCertRequest, opts ...grpc.CallOption) (*IsRevokedCertResponse, error) {
	out := new(IsRevokedCertResponse)
	err := c.cc.Invoke(ctx, "/tokenserver.admin.CertificateAuthorities/IsRevokedCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certificateAuthoritiesClient) CheckCertificate(ctx context.Context, in *CheckCertificateRequest, opts ...grpc.CallOption) (*CheckCertificateResponse, error) {
	out := new(CheckCertificateResponse)
	err := c.cc.Invoke(ctx, "/tokenserver.admin.CertificateAuthorities/CheckCertificate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertificateAuthoritiesServer is the server API for CertificateAuthorities service.
type CertificateAuthoritiesServer interface {
	// FetchCRL makes the server fetch a CRL for some CA.
	FetchCRL(context.Context, *FetchCRLRequest) (*FetchCRLResponse, error)
	// ListCAs returns a list of Common Names of registered CAs.
	ListCAs(context.Context, *empty.Empty) (*ListCAsResponse, error)
	// GetCAStatus returns configuration of some CA defined in the config.
	GetCAStatus(context.Context, *GetCAStatusRequest) (*GetCAStatusResponse, error)
	// IsRevokedCert says whether a certificate serial number is in the CRL.
	IsRevokedCert(context.Context, *IsRevokedCertRequest) (*IsRevokedCertResponse, error)
	// CheckCertificate says whether a certificate is valid or not.
	CheckCertificate(context.Context, *CheckCertificateRequest) (*CheckCertificateResponse, error)
}

// UnimplementedCertificateAuthoritiesServer can be embedded to have forward compatible implementations.
type UnimplementedCertificateAuthoritiesServer struct {
}

func (*UnimplementedCertificateAuthoritiesServer) FetchCRL(ctx context.Context, req *FetchCRLRequest) (*FetchCRLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCRL not implemented")
}
func (*UnimplementedCertificateAuthoritiesServer) ListCAs(ctx context.Context, req *empty.Empty) (*ListCAsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCAs not implemented")
}
func (*UnimplementedCertificateAuthoritiesServer) GetCAStatus(ctx context.Context, req *GetCAStatusRequest) (*GetCAStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCAStatus not implemented")
}
func (*UnimplementedCertificateAuthoritiesServer) IsRevokedCert(ctx context.Context, req *IsRevokedCertRequest) (*IsRevokedCertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsRevokedCert not implemented")
}
func (*UnimplementedCertificateAuthoritiesServer) CheckCertificate(ctx context.Context, req *CheckCertificateRequest) (*CheckCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCertificate not implemented")
}

func RegisterCertificateAuthoritiesServer(s prpc.Registrar, srv CertificateAuthoritiesServer) {
	s.RegisterService(&_CertificateAuthorities_serviceDesc, srv)
}

func _CertificateAuthorities_FetchCRL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCRLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthoritiesServer).FetchCRL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.CertificateAuthorities/FetchCRL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthoritiesServer).FetchCRL(ctx, req.(*FetchCRLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorities_ListCAs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthoritiesServer).ListCAs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.CertificateAuthorities/ListCAs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthoritiesServer).ListCAs(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorities_GetCAStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCAStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthoritiesServer).GetCAStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.CertificateAuthorities/GetCAStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthoritiesServer).GetCAStatus(ctx, req.(*GetCAStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorities_IsRevokedCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsRevokedCertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthoritiesServer).IsRevokedCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.CertificateAuthorities/IsRevokedCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthoritiesServer).IsRevokedCert(ctx, req.(*IsRevokedCertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertificateAuthorities_CheckCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertificateAuthoritiesServer).CheckCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenserver.admin.CertificateAuthorities/CheckCertificate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertificateAuthoritiesServer).CheckCertificate(ctx, req.(*CheckCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CertificateAuthorities_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenserver.admin.CertificateAuthorities",
	HandlerType: (*CertificateAuthoritiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchCRL",
			Handler:    _CertificateAuthorities_FetchCRL_Handler,
		},
		{
			MethodName: "ListCAs",
			Handler:    _CertificateAuthorities_ListCAs_Handler,
		},
		{
			MethodName: "GetCAStatus",
			Handler:    _CertificateAuthorities_GetCAStatus_Handler,
		},
		{
			MethodName: "IsRevokedCert",
			Handler:    _CertificateAuthorities_IsRevokedCert_Handler,
		},
		{
			MethodName: "CheckCertificate",
			Handler:    _CertificateAuthorities_CheckCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tetrafolium/luci-go/tokenserver/api/admin/v1/certificate_authorities.proto",
}
