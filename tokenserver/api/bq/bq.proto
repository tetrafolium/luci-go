// Copyright 2018 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

syntax = "proto3";

package tokenserver.bq;

option go_package = "bq";

import "google/protobuf/timestamp.proto";

import "github.com/tetrafolium/luci-go/server/auth/delegation/messages/delegation.proto";
import "github.com/tetrafolium/luci-go/tokenserver/api/machine_token.proto";
import "github.com/tetrafolium/luci-go/tokenserver/api/minter/v1/token_minter.proto";


// Issued delegation tokens.
message DelegationToken {
  // First 16 bytes of SHA256 of the token body, hex-encoded.
  string fingerprint = 1;
  // Kind of the token.
  messages.Subtoken.Kind token_kind = 2;
  // Identifier of this token as generated by the token server.
  string token_id = 3;

  // Identity whose authority is delegated.
  string delegated_identity = 4;
  // Who requested this token.
  string requestor_identity = 5;

  // When the token was generated.
  google.protobuf.Timestamp issued_at = 6;
  // When the token expires.
  google.protobuf.Timestamp expiration = 7;

  // Who can present this token.
  repeated string target_audience = 8;
  // What services should accept this token
  repeated string target_services = 9;

  // Token validity duration (in seconds), as requested by the caller.
  int64 requested_validity = 10;
  // An intent string provided by the caller.
  string requested_intent = 11;
  // Arbitrary key:value pairs embedded into the token.
  repeated string tags = 12;

  // Revision of the luci-config repo with rules.
  string config_rev = 13;
  // Name of the rule used to authorize this call.
  string config_rule = 14;
  // IP address of the caller.
  string peer_ip = 15;
  // Identifier of the token server GAE app and version.
  string service_version = 16;
  // ID of the GAE request that handled the call.
  string gae_request_id = 17;
  // Revision of the authorization database used to authorize this call.
  int64 auth_db_rev = 18;
}


// Issued machine tokens.
message MachineToken {
  // First 16 bytes of SHA256 of the token body, hex-encoded.
  string fingerprint = 1;
  // Machine domain name encoded in the token.
  string machine_fqdn = 2;
  // Type of the machine token.
  tokenserver.MachineTokenType token_type = 3;

  // When the token was generated.
  google.protobuf.Timestamp issued_at = 4;
  // When the token expires.
  google.protobuf.Timestamp expiration = 5;

  // Serial number of the peer certificate.
  string cert_serial_number = 6;
  // Type of the signature used to proof possession of the private key.
  tokenserver.minter.SignatureAlgorithm signature_algorithm = 7;
  // Common Name of a CA that signed the peer certificate.
  string ca_common_name = 8;
  // Revision of the luci-config repo that contains the CA.
  string ca_config_rev = 9;

  // IP address of the caller.
  string peer_ip = 10;
  // Identifier of the token server GAE app and version.
  string service_version = 11;
  // ID of the GAE request that handled the call.
  string gae_request_id = 12;
}


// Issued OAuth token grants.
message OAuthTokenGrant {
  // First 16 bytes of SHA256 of the token body, hex-encoded.
  string fingerprint = 1;
  // Identifier of this token as generated by the token server.
  string token_id = 2;

  // Service account email the end user wants to act as.
  string service_account = 3;
  // Who requested and who can use this token.
  string proxy_identity = 4;
  // On whose behalf the token is generated.
  string end_user_identity = 5;

  // When the token was generated.
  google.protobuf.Timestamp issued_at = 6;
  // When the token expires.
  google.protobuf.Timestamp expiration = 7;

  // Arbitrary key:value pairs provided by the caller.
  repeated string audit_tags = 8;
  // Revision of the luci-config repo with rules.
  string config_rev = 9;
  // Name of the rule used to authorize this call.
  string config_rule = 10;
  // IP address of the caller.
  string peer_ip = 11;
  // Identifier of the token server GAE app and version.
  string service_version = 12;
  // ID of the GAE request that handled the call.
  string gae_request_id = 13;
  // Revision of the authorization database used to authorize this call.
  int64 auth_db_rev = 14;
}


// Issued OAuth tokens.
message OAuthToken {
  // First 16 bytes of SHA256 of the token body, hex-encoded.
  string fingerprint = 1;
  // First 16 bytes of SHA256 of the oauth grant, hex-encoded.
  string grant_fingerprint = 2;
  // Service account email the end user wants to act as.
  string service_account = 3;
  // Requested OAuth scopes.
  repeated string oauth_scopes = 4;

  // Who requested and who can use this token.
  string proxy_identity = 5;
  // On whose behalf the token is generated.
  string end_user_identity = 6;

  // When this request happened.
  google.protobuf.Timestamp requested_at = 7;
  // When the token expires.
  google.protobuf.Timestamp expiration = 8;

  // Arbitrary key:value pairs provided by the caller.
  repeated string audit_tags = 9;
  // Revision of the luci-config repo with rules.
  string config_rev = 10;
  // Name of the rule used to authorize this call.
  string config_rule = 11;
  // IP address of the caller.
  string peer_ip = 12;
  // Identifier of the token server GAE app and version.
  string service_version = 13;
  // ID of the GAE request that handled the call.
  string gae_request_id = 14;
  // Revision of the authorization database used to authorize this call.
  int64 auth_db_rev = 15;
}


// Issued Project tokens.
message ProjectToken {
  // First 16 bytes of SHA256 of the token body, hex-encoded.
  string fingerprint = 1;
  // Service account email the luci service wants to act as.
  string service_account = 2;
  // Requested OAuth scopes.
  repeated string oauth_scopes = 3;
  // LUCI project for which token is requested.
  string luci_project = 4;
  // Who requested and who can use this token.
  string service_identity = 5;
  // When this request happened.
  google.protobuf.Timestamp requested_at = 6;
  // When the token expires.
  google.protobuf.Timestamp expiration = 7;
  // Arbitrary key:value pairs provided by the caller.
  repeated string audit_tags = 8;
  // IP address of the caller.
  string peer_ip = 9;
  // Identifier of the token server GAE app and version.
  string service_version = 10;
  // ID of the GAE request that handled the call.
  string gae_request_id = 11;
  // Revision of the authorization database used to authorize this call.
  int64 auth_db_rev = 12;
}


// Issued service account tokens.
message ServiceAccountToken {
  // First 16 bytes of SHA256 of the token body, hex-encoded.
  string fingerprint = 1;
  // The kind of the token requested (OAuth2 access token or ID token).
  tokenserver.minter.ServiceAccountTokenKind kind = 2;
  // Service account email the luci service wants to act as.
  string service_account = 3;
  // LUCI realm used to authorize the call.
  string realm = 4;
  // Requested OAuth scopes when minting OAuth tokens.
  repeated string oauth_scopes = 5;
  // Requested audience when minting ID tokens.
  string id_token_audience = 6;
  // Identity used to authorize the call.
  string request_identity = 7;
  // Identity of a service that made the RPC.
  string peer_identity = 8;
  // When this request happened.
  google.protobuf.Timestamp requested_at = 9;
  // When the token expires.
  google.protobuf.Timestamp expiration = 10;
  // Arbitrary key:value pairs provided by the caller.
  repeated string audit_tags = 11;
  // Revision of the luci-config repo with project_owned_accounts.cfg.
  string config_rev = 12;
  // IP address of the caller.
  string peer_ip = 13;
  // Identifier of the token server GAE app and version.
  string service_version = 14;
  // ID of the GAE request that handled the call.
  string gae_request_id = 15;
  // Revision of the authorization database used to authorize this call.
  int64 auth_db_rev = 16;
}
