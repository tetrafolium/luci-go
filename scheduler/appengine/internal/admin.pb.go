// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/scheduler/appengine/internal/admin.proto

package internal

import prpc "github.com/tetrafolium/luci-go/grpc/prpc"

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	v1 "github.com/tetrafolium/luci-go/scheduler/api/scheduler/v1"
	pb "github.com/tetrafolium/luci-go/scheduler/appengine/task/gitiles/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// DebugJobState loosely matches Job entity and associated data structures.
//
// See the engine implementation for details.
//
// Next tag: 10.
type DebugJobState struct {
	Enabled              bool                     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Paused               bool                     `protobuf:"varint,2,opt,name=paused,proto3" json:"paused,omitempty"`
	LastTriage           *timestamp.Timestamp     `protobuf:"bytes,3,opt,name=last_triage,json=lastTriage,proto3" json:"last_triage,omitempty"`
	CronState            *DebugJobState_CronState `protobuf:"bytes,4,opt,name=cron_state,json=cronState,proto3" json:"cron_state,omitempty"`
	ManagerState         *DebugManagerState       `protobuf:"bytes,9,opt,name=manager_state,json=managerState,proto3" json:"manager_state,omitempty"`
	ActiveInvocations    []int64                  `protobuf:"varint,5,rep,packed,name=active_invocations,json=activeInvocations,proto3" json:"active_invocations,omitempty"`
	FinishedInvocations  []*FinishedInvocation    `protobuf:"bytes,6,rep,name=finished_invocations,json=finishedInvocations,proto3" json:"finished_invocations,omitempty"`
	RecentlyFinishedSet  []int64                  `protobuf:"varint,7,rep,packed,name=recently_finished_set,json=recentlyFinishedSet,proto3" json:"recently_finished_set,omitempty"`
	PendingTriggersSet   []*Trigger               `protobuf:"bytes,8,rep,name=pending_triggers_set,json=pendingTriggersSet,proto3" json:"pending_triggers_set,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *DebugJobState) Reset()         { *m = DebugJobState{} }
func (m *DebugJobState) String() string { return proto.CompactTextString(m) }
func (*DebugJobState) ProtoMessage()    {}
func (*DebugJobState) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f1f51de3cab948, []int{0}
}

func (m *DebugJobState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugJobState.Unmarshal(m, b)
}
func (m *DebugJobState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugJobState.Marshal(b, m, deterministic)
}
func (m *DebugJobState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugJobState.Merge(m, src)
}
func (m *DebugJobState) XXX_Size() int {
	return xxx_messageInfo_DebugJobState.Size(m)
}
func (m *DebugJobState) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugJobState.DiscardUnknown(m)
}

var xxx_messageInfo_DebugJobState proto.InternalMessageInfo

func (m *DebugJobState) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *DebugJobState) GetPaused() bool {
	if m != nil {
		return m.Paused
	}
	return false
}

func (m *DebugJobState) GetLastTriage() *timestamp.Timestamp {
	if m != nil {
		return m.LastTriage
	}
	return nil
}

func (m *DebugJobState) GetCronState() *DebugJobState_CronState {
	if m != nil {
		return m.CronState
	}
	return nil
}

func (m *DebugJobState) GetManagerState() *DebugManagerState {
	if m != nil {
		return m.ManagerState
	}
	return nil
}

func (m *DebugJobState) GetActiveInvocations() []int64 {
	if m != nil {
		return m.ActiveInvocations
	}
	return nil
}

func (m *DebugJobState) GetFinishedInvocations() []*FinishedInvocation {
	if m != nil {
		return m.FinishedInvocations
	}
	return nil
}

func (m *DebugJobState) GetRecentlyFinishedSet() []int64 {
	if m != nil {
		return m.RecentlyFinishedSet
	}
	return nil
}

func (m *DebugJobState) GetPendingTriggersSet() []*Trigger {
	if m != nil {
		return m.PendingTriggersSet
	}
	return nil
}

type DebugJobState_CronState struct {
	Enabled              bool                 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Generation           int64                `protobuf:"varint,2,opt,name=generation,proto3" json:"generation,omitempty"`
	LastRewind           *timestamp.Timestamp `protobuf:"bytes,3,opt,name=last_rewind,json=lastRewind,proto3" json:"last_rewind,omitempty"`
	LastTickWhen         *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_tick_when,json=lastTickWhen,proto3" json:"last_tick_when,omitempty"`
	LastTickNonce        int64                `protobuf:"varint,5,opt,name=last_tick_nonce,json=lastTickNonce,proto3" json:"last_tick_nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DebugJobState_CronState) Reset()         { *m = DebugJobState_CronState{} }
func (m *DebugJobState_CronState) String() string { return proto.CompactTextString(m) }
func (*DebugJobState_CronState) ProtoMessage()    {}
func (*DebugJobState_CronState) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f1f51de3cab948, []int{0, 0}
}

func (m *DebugJobState_CronState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugJobState_CronState.Unmarshal(m, b)
}
func (m *DebugJobState_CronState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugJobState_CronState.Marshal(b, m, deterministic)
}
func (m *DebugJobState_CronState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugJobState_CronState.Merge(m, src)
}
func (m *DebugJobState_CronState) XXX_Size() int {
	return xxx_messageInfo_DebugJobState_CronState.Size(m)
}
func (m *DebugJobState_CronState) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugJobState_CronState.DiscardUnknown(m)
}

var xxx_messageInfo_DebugJobState_CronState proto.InternalMessageInfo

func (m *DebugJobState_CronState) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *DebugJobState_CronState) GetGeneration() int64 {
	if m != nil {
		return m.Generation
	}
	return 0
}

func (m *DebugJobState_CronState) GetLastRewind() *timestamp.Timestamp {
	if m != nil {
		return m.LastRewind
	}
	return nil
}

func (m *DebugJobState_CronState) GetLastTickWhen() *timestamp.Timestamp {
	if m != nil {
		return m.LastTickWhen
	}
	return nil
}

func (m *DebugJobState_CronState) GetLastTickNonce() int64 {
	if m != nil {
		return m.LastTickNonce
	}
	return 0
}

// DebugManagerState is whatever is reported by task.Manager.GetDebugState.
type DebugManagerState struct {
	Error                string         `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	DebugLog             string         `protobuf:"bytes,2,opt,name=debug_log,json=debugLog,proto3" json:"debug_log,omitempty"`
	GitilesPoller        *pb.DebugState `protobuf:"bytes,3,opt,name=gitiles_poller,json=gitilesPoller,proto3" json:"gitiles_poller,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DebugManagerState) Reset()         { *m = DebugManagerState{} }
func (m *DebugManagerState) String() string { return proto.CompactTextString(m) }
func (*DebugManagerState) ProtoMessage()    {}
func (*DebugManagerState) Descriptor() ([]byte, []int) {
	return fileDescriptor_44f1f51de3cab948, []int{1}
}

func (m *DebugManagerState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugManagerState.Unmarshal(m, b)
}
func (m *DebugManagerState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugManagerState.Marshal(b, m, deterministic)
}
func (m *DebugManagerState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugManagerState.Merge(m, src)
}
func (m *DebugManagerState) XXX_Size() int {
	return xxx_messageInfo_DebugManagerState.Size(m)
}
func (m *DebugManagerState) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugManagerState.DiscardUnknown(m)
}

var xxx_messageInfo_DebugManagerState proto.InternalMessageInfo

func (m *DebugManagerState) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *DebugManagerState) GetDebugLog() string {
	if m != nil {
		return m.DebugLog
	}
	return ""
}

func (m *DebugManagerState) GetGitilesPoller() *pb.DebugState {
	if m != nil {
		return m.GitilesPoller
	}
	return nil
}

func init() {
	proto.RegisterType((*DebugJobState)(nil), "internal.admin.DebugJobState")
	proto.RegisterType((*DebugJobState_CronState)(nil), "internal.admin.DebugJobState.CronState")
	proto.RegisterType((*DebugManagerState)(nil), "internal.admin.DebugManagerState")
}

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/scheduler/appengine/internal/admin.proto", fileDescriptor_44f1f51de3cab948)
}

var fileDescriptor_44f1f51de3cab948 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x55, 0x29, 0xed, 0xda, 0xbb, 0x75, 0x30, 0x6f, 0xa0, 0xa8, 0x7c, 0xac, 0xec, 0x01, 0xfa,
	0x82, 0x23, 0xca, 0x1b, 0x08, 0x31, 0xd8, 0xb4, 0x89, 0x69, 0x43, 0x28, 0x9b, 0x84, 0xc4, 0x4b,
	0xe4, 0x24, 0xb7, 0xae, 0xb5, 0xc4, 0x8e, 0x6c, 0x77, 0x13, 0xaf, 0xbc, 0xf2, 0x57, 0xf9, 0x11,
	0xa8, 0x8e, 0xd3, 0xae, 0x1a, 0x1a, 0xdb, 0x9b, 0xef, 0xc7, 0x39, 0x3e, 0xce, 0x3d, 0x37, 0xf0,
	0x81, 0x2b, 0x9a, 0x4e, 0xb4, 0x2a, 0xc4, 0xb4, 0xa0, 0x4a, 0xf3, 0x30, 0x9f, 0xa6, 0x22, 0x34,
	0xe9, 0x04, 0xb3, 0x69, 0x8e, 0x3a, 0x64, 0x65, 0x89, 0x92, 0x0b, 0x89, 0xa1, 0x90, 0x16, 0xb5,
	0x64, 0x79, 0xc8, 0xb2, 0x42, 0x48, 0x5a, 0x6a, 0x65, 0x15, 0x59, 0xaf, 0xb3, 0xd4, 0x65, 0xfb,
	0xdb, 0x5c, 0x29, 0x9e, 0x63, 0xe8, 0xaa, 0xc9, 0x74, 0x1c, 0x5a, 0x51, 0xa0, 0xb1, 0xac, 0x28,
	0x2b, 0x40, 0xff, 0xe3, 0x7f, 0xef, 0xbb, 0x1a, 0x5d, 0xbc, 0x59, 0x04, 0x9e, 0xe0, 0xdd, 0xdd,
	0x05, 0x67, 0x89, 0xc7, 0xee, 0xde, 0x1d, 0x6b, 0xb5, 0xe0, 0x1c, 0xb5, 0xf1, 0x0c, 0x87, 0xb7,
	0x66, 0xb0, 0xcc, 0x9c, 0x87, 0x5c, 0x58, 0x91, 0xa3, 0x09, 0xcb, 0x24, 0x2c, 0xd0, 0x18, 0xc6,
	0xd1, 0x13, 0xed, 0xfc, 0x6a, 0x43, 0x6f, 0x1f, 0x93, 0x29, 0x3f, 0x52, 0xc9, 0xa9, 0x65, 0x16,
	0x49, 0x00, 0x2b, 0x28, 0x59, 0x92, 0x63, 0x16, 0x34, 0x06, 0x8d, 0x61, 0x27, 0xaa, 0x43, 0xf2,
	0x18, 0xda, 0x25, 0x9b, 0x1a, 0xcc, 0x82, 0x7b, 0xae, 0xe0, 0x23, 0xf2, 0x1e, 0x56, 0x73, 0x66,
	0x6c, 0x6c, 0xb5, 0x60, 0x1c, 0x83, 0xe6, 0xa0, 0x31, 0x5c, 0x1d, 0xf5, 0x69, 0x35, 0x02, 0x5a,
	0x8f, 0x80, 0x9e, 0xd5, 0x23, 0x88, 0x60, 0xd6, 0x7e, 0xe6, 0xba, 0xc9, 0x01, 0x40, 0xaa, 0x95,
	0x8c, 0xcd, 0xec, 0xf2, 0xe0, 0xbe, 0xc3, 0xbe, 0xa2, 0xcb, 0xe3, 0xa4, 0x4b, 0x0a, 0xe9, 0x9e,
	0x56, 0xd2, 0x9d, 0xa2, 0x6e, 0x5a, 0x1f, 0xc9, 0x01, 0xf4, 0x0a, 0x26, 0x19, 0x47, 0xed, 0xa9,
	0xba, 0x8e, 0xea, 0xc5, 0x3f, 0xa9, 0x4e, 0xaa, 0xce, 0x8a, 0x64, 0xad, 0xb8, 0x12, 0x91, 0xd7,
	0x40, 0x58, 0x6a, 0xc5, 0x05, 0xc6, 0x42, 0x5e, 0xa8, 0x94, 0x59, 0xa1, 0xa4, 0x09, 0x5a, 0x83,
	0xe6, 0xb0, 0x19, 0x6d, 0x54, 0x95, 0x2f, 0x8b, 0x02, 0x89, 0x60, 0x6b, 0x2c, 0xa4, 0x30, 0x13,
	0xcc, 0x96, 0x00, 0xed, 0x41, 0x73, 0xb8, 0x3a, 0xda, 0x5e, 0xdc, 0x9e, 0x25, 0xf4, 0xc0, 0x37,
	0x2e, 0xf0, 0xd1, 0xe6, 0xf8, 0x5a, 0xce, 0x90, 0x11, 0x3c, 0xd2, 0x98, 0xa2, 0xb4, 0xf9, 0xcf,
	0x78, 0x4e, 0x6e, 0xd0, 0x06, 0x2b, 0x4e, 0xc5, 0x66, 0x5d, 0xac, 0xf9, 0x4e, 0xd1, 0x92, 0x63,
	0xd8, 0x2a, 0x51, 0x66, 0x42, 0xf2, 0xb8, 0xb6, 0x8a, 0x83, 0x74, 0x9c, 0x8e, 0xfe, 0x42, 0xc7,
	0xdc, 0x48, 0x67, 0xd5, 0x21, 0x22, 0x1e, 0xe7, 0x63, 0x73, 0x8a, 0xb6, 0xff, 0xa7, 0x01, 0xdd,
	0xf9, 0x57, 0xbe, 0xc1, 0x11, 0xcf, 0x01, 0x38, 0x4a, 0xd4, 0x4e, 0xb8, 0x73, 0x45, 0x33, 0xba,
	0x92, 0x99, 0x3b, 0x43, 0xe3, 0xa5, 0x90, 0xd9, 0x6d, 0x9d, 0x11, 0xb9, 0x6e, 0xb2, 0x0b, 0xeb,
	0x95, 0xad, 0x44, 0x7a, 0x1e, 0x5f, 0x4e, 0x50, 0x7a, 0x77, 0xdc, 0x84, 0x5f, 0x73, 0xce, 0x12,
	0xe9, 0xf9, 0xf7, 0x09, 0x4a, 0xf2, 0x12, 0x1e, 0x2c, 0x18, 0xa4, 0x92, 0x29, 0x06, 0x2d, 0xa7,
	0xb1, 0x57, 0xb7, 0x7d, 0x9d, 0x25, 0x77, 0x7e, 0x37, 0x60, 0xe3, 0x9a, 0x2f, 0xc8, 0x16, 0xb4,
	0x50, 0x6b, 0xa5, 0xdd, 0xa3, 0xbb, 0x51, 0x15, 0x90, 0x27, 0xd0, 0xcd, 0x66, 0xad, 0x71, 0xae,
	0xb8, 0x7b, 0x71, 0x37, 0xea, 0xb8, 0xc4, 0xb1, 0xe2, 0x64, 0x0f, 0xd6, 0xfd, 0xaa, 0xc5, 0xa5,
	0xca, 0x73, 0xd4, 0xfe, 0xc9, 0x4f, 0xa9, 0x4f, 0xd3, 0xf9, 0xfa, 0xb9, 0xfb, 0x2a, 0x03, 0xf6,
	0x7c, 0xf1, 0x9b, 0x83, 0x8c, 0x4e, 0xa0, 0xf5, 0x69, 0x66, 0x55, 0xb2, 0x0f, 0x0f, 0x0f, 0xd1,
	0x2e, 0x6f, 0xe7, 0x06, 0x5d, 0xfc, 0x88, 0x8e, 0x54, 0x12, 0xe1, 0xb8, 0xff, 0xec, 0xc6, 0x6d,
	0xf9, 0x0c, 0x3f, 0x3a, 0x75, 0x3d, 0x69, 0xbb, 0x4f, 0xf6, 0xf6, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x8c, 0xa9, 0x71, 0x00, 0x6e, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// GetDebugJobState returns detailed report about the job state.
	//
	// Useful when debugging internal issues.
	GetDebugJobState(ctx context.Context, in *v1.JobRef, opts ...grpc.CallOption) (*DebugJobState, error)
}
type adminPRPCClient struct {
	client *prpc.Client
}

func NewAdminPRPCClient(client *prpc.Client) AdminClient {
	return &adminPRPCClient{client}
}

func (c *adminPRPCClient) GetDebugJobState(ctx context.Context, in *v1.JobRef, opts ...grpc.CallOption) (*DebugJobState, error) {
	out := new(DebugJobState)
	err := c.client.Call(ctx, "internal.admin.Admin", "GetDebugJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetDebugJobState(ctx context.Context, in *v1.JobRef, opts ...grpc.CallOption) (*DebugJobState, error) {
	out := new(DebugJobState)
	err := c.cc.Invoke(ctx, "/internal.admin.Admin/GetDebugJobState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// GetDebugJobState returns detailed report about the job state.
	//
	// Useful when debugging internal issues.
	GetDebugJobState(context.Context, *v1.JobRef) (*DebugJobState, error)
}

// UnimplementedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) GetDebugJobState(ctx context.Context, req *v1.JobRef) (*DebugJobState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDebugJobState not implemented")
}

func RegisterAdminServer(s prpc.Registrar, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_GetDebugJobState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.JobRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDebugJobState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/internal.admin.Admin/GetDebugJobState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDebugJobState(ctx, req.(*v1.JobRef))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "internal.admin.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDebugJobState",
			Handler:    _Admin_GetDebugJobState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/tetrafolium/luci-go/scheduler/appengine/internal/admin.proto",
}
