// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/scheduler/appengine/internal/tq.proto

package internal

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ReadProjectConfigTask is used to import jobs of some project.
//
// Queue: "read-project-config".
type ReadProjectConfigTask struct {
	ProjectId            string   `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadProjectConfigTask) Reset()         { *m = ReadProjectConfigTask{} }
func (m *ReadProjectConfigTask) String() string { return proto.CompactTextString(m) }
func (*ReadProjectConfigTask) ProtoMessage()    {}
func (*ReadProjectConfigTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{0}
}

func (m *ReadProjectConfigTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadProjectConfigTask.Unmarshal(m, b)
}
func (m *ReadProjectConfigTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadProjectConfigTask.Marshal(b, m, deterministic)
}
func (m *ReadProjectConfigTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadProjectConfigTask.Merge(m, src)
}
func (m *ReadProjectConfigTask) XXX_Size() int {
	return xxx_messageInfo_ReadProjectConfigTask.Size(m)
}
func (m *ReadProjectConfigTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadProjectConfigTask.DiscardUnknown(m)
}

var xxx_messageInfo_ReadProjectConfigTask proto.InternalMessageInfo

func (m *ReadProjectConfigTask) GetProjectId() string {
	if m != nil {
		return m.ProjectId
	}
	return ""
}

// LaunchInvocationTask is used to start running (or retry a lunch of) a single
// invocation.
//
// It is enqueued non-transactionally, but with the deduplication key.
//
// Queue: "launches".
type LaunchInvocationTask struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	InvId                int64    `protobuf:"varint,2,opt,name=inv_id,json=invId,proto3" json:"inv_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LaunchInvocationTask) Reset()         { *m = LaunchInvocationTask{} }
func (m *LaunchInvocationTask) String() string { return proto.CompactTextString(m) }
func (*LaunchInvocationTask) ProtoMessage()    {}
func (*LaunchInvocationTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{1}
}

func (m *LaunchInvocationTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaunchInvocationTask.Unmarshal(m, b)
}
func (m *LaunchInvocationTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaunchInvocationTask.Marshal(b, m, deterministic)
}
func (m *LaunchInvocationTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchInvocationTask.Merge(m, src)
}
func (m *LaunchInvocationTask) XXX_Size() int {
	return xxx_messageInfo_LaunchInvocationTask.Size(m)
}
func (m *LaunchInvocationTask) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchInvocationTask.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchInvocationTask proto.InternalMessageInfo

func (m *LaunchInvocationTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *LaunchInvocationTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

// LaunchInvocationsBatchTask is used to kick off several invocations at once.
//
// It is enqueued transactionally. It fans out into many LaunchInvocationTask.
//
// Queue: "batches".
type LaunchInvocationsBatchTask struct {
	Tasks                []*LaunchInvocationTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *LaunchInvocationsBatchTask) Reset()         { *m = LaunchInvocationsBatchTask{} }
func (m *LaunchInvocationsBatchTask) String() string { return proto.CompactTextString(m) }
func (*LaunchInvocationsBatchTask) ProtoMessage()    {}
func (*LaunchInvocationsBatchTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{2}
}

func (m *LaunchInvocationsBatchTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LaunchInvocationsBatchTask.Unmarshal(m, b)
}
func (m *LaunchInvocationsBatchTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LaunchInvocationsBatchTask.Marshal(b, m, deterministic)
}
func (m *LaunchInvocationsBatchTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LaunchInvocationsBatchTask.Merge(m, src)
}
func (m *LaunchInvocationsBatchTask) XXX_Size() int {
	return xxx_messageInfo_LaunchInvocationsBatchTask.Size(m)
}
func (m *LaunchInvocationsBatchTask) XXX_DiscardUnknown() {
	xxx_messageInfo_LaunchInvocationsBatchTask.DiscardUnknown(m)
}

var xxx_messageInfo_LaunchInvocationsBatchTask proto.InternalMessageInfo

func (m *LaunchInvocationsBatchTask) GetTasks() []*LaunchInvocationTask {
	if m != nil {
		return m.Tasks
	}
	return nil
}

// TriageJobStateTask looks at the state of the job and decided what to do next.
//
// Enqueued non-transactionally. It is throttled to run approximately once per
// second. It looks at pending triggers and recently finished invocations and
// launches new invocations (or schedules timers to do it later).
//
// Queue: "triages".
type TriageJobStateTask struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TriageJobStateTask) Reset()         { *m = TriageJobStateTask{} }
func (m *TriageJobStateTask) String() string { return proto.CompactTextString(m) }
func (*TriageJobStateTask) ProtoMessage()    {}
func (*TriageJobStateTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{3}
}

func (m *TriageJobStateTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TriageJobStateTask.Unmarshal(m, b)
}
func (m *TriageJobStateTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TriageJobStateTask.Marshal(b, m, deterministic)
}
func (m *TriageJobStateTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriageJobStateTask.Merge(m, src)
}
func (m *TriageJobStateTask) XXX_Size() int {
	return xxx_messageInfo_TriageJobStateTask.Size(m)
}
func (m *TriageJobStateTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TriageJobStateTask.DiscardUnknown(m)
}

var xxx_messageInfo_TriageJobStateTask proto.InternalMessageInfo

func (m *TriageJobStateTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

// KickTriageTask can be used to transactionally initiate a new triage.
//
// We can't transactionally enqueue TriageJobStateTask, since its throttling
// mechanism uses memcache and named tasks, which are not available inside
// transactions. So instead transactions can enqueue KickTriageTask, which in
// turn will enqueue TriageJobStateTask (with throttling).
//
// Queue: "triages".
type KickTriageTask struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KickTriageTask) Reset()         { *m = KickTriageTask{} }
func (m *KickTriageTask) String() string { return proto.CompactTextString(m) }
func (*KickTriageTask) ProtoMessage()    {}
func (*KickTriageTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{4}
}

func (m *KickTriageTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KickTriageTask.Unmarshal(m, b)
}
func (m *KickTriageTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KickTriageTask.Marshal(b, m, deterministic)
}
func (m *KickTriageTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KickTriageTask.Merge(m, src)
}
func (m *KickTriageTask) XXX_Size() int {
	return xxx_messageInfo_KickTriageTask.Size(m)
}
func (m *KickTriageTask) XXX_DiscardUnknown() {
	xxx_messageInfo_KickTriageTask.DiscardUnknown(m)
}

var xxx_messageInfo_KickTriageTask proto.InternalMessageInfo

func (m *KickTriageTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

// InvocationFinishedTask is emitted by the invocation when it finishes.
//
// It is enqueued transactionally.
//
// Queue: "completions".
type InvocationFinishedTask struct {
	JobId                string              `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	InvId                int64               `protobuf:"varint,2,opt,name=inv_id,json=invId,proto3" json:"inv_id,omitempty"`
	Triggers             *FanOutTriggersTask `protobuf:"bytes,3,opt,name=triggers,proto3" json:"triggers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *InvocationFinishedTask) Reset()         { *m = InvocationFinishedTask{} }
func (m *InvocationFinishedTask) String() string { return proto.CompactTextString(m) }
func (*InvocationFinishedTask) ProtoMessage()    {}
func (*InvocationFinishedTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{5}
}

func (m *InvocationFinishedTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InvocationFinishedTask.Unmarshal(m, b)
}
func (m *InvocationFinishedTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InvocationFinishedTask.Marshal(b, m, deterministic)
}
func (m *InvocationFinishedTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InvocationFinishedTask.Merge(m, src)
}
func (m *InvocationFinishedTask) XXX_Size() int {
	return xxx_messageInfo_InvocationFinishedTask.Size(m)
}
func (m *InvocationFinishedTask) XXX_DiscardUnknown() {
	xxx_messageInfo_InvocationFinishedTask.DiscardUnknown(m)
}

var xxx_messageInfo_InvocationFinishedTask proto.InternalMessageInfo

func (m *InvocationFinishedTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *InvocationFinishedTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *InvocationFinishedTask) GetTriggers() *FanOutTriggersTask {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// FanOutTriggersTask is a batch task that emits a bunch of triggers.
//
// It is enqueued transactionally. It fans out into many EnqueueTriggersTask,
// one per job ID.
//
// Queue: "triggers".
type FanOutTriggersTask struct {
	JobIds               []string   `protobuf:"bytes,1,rep,name=job_ids,json=jobIds,proto3" json:"job_ids,omitempty"`
	Triggers             []*Trigger `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *FanOutTriggersTask) Reset()         { *m = FanOutTriggersTask{} }
func (m *FanOutTriggersTask) String() string { return proto.CompactTextString(m) }
func (*FanOutTriggersTask) ProtoMessage()    {}
func (*FanOutTriggersTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{6}
}

func (m *FanOutTriggersTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FanOutTriggersTask.Unmarshal(m, b)
}
func (m *FanOutTriggersTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FanOutTriggersTask.Marshal(b, m, deterministic)
}
func (m *FanOutTriggersTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FanOutTriggersTask.Merge(m, src)
}
func (m *FanOutTriggersTask) XXX_Size() int {
	return xxx_messageInfo_FanOutTriggersTask.Size(m)
}
func (m *FanOutTriggersTask) XXX_DiscardUnknown() {
	xxx_messageInfo_FanOutTriggersTask.DiscardUnknown(m)
}

var xxx_messageInfo_FanOutTriggersTask proto.InternalMessageInfo

func (m *FanOutTriggersTask) GetJobIds() []string {
	if m != nil {
		return m.JobIds
	}
	return nil
}

func (m *FanOutTriggersTask) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// EnqueueTriggersTask adds given triggers to a job's pending triggers set.
//
// Enqueued non-transactionally (from FanOutTriggersTask) and transactionally
// (when emitting single trigger from a cron).
//
// Queue: "triggers".
type EnqueueTriggersTask struct {
	JobId                string     `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Triggers             []*Trigger `protobuf:"bytes,2,rep,name=triggers,proto3" json:"triggers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *EnqueueTriggersTask) Reset()         { *m = EnqueueTriggersTask{} }
func (m *EnqueueTriggersTask) String() string { return proto.CompactTextString(m) }
func (*EnqueueTriggersTask) ProtoMessage()    {}
func (*EnqueueTriggersTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{7}
}

func (m *EnqueueTriggersTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnqueueTriggersTask.Unmarshal(m, b)
}
func (m *EnqueueTriggersTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnqueueTriggersTask.Marshal(b, m, deterministic)
}
func (m *EnqueueTriggersTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueTriggersTask.Merge(m, src)
}
func (m *EnqueueTriggersTask) XXX_Size() int {
	return xxx_messageInfo_EnqueueTriggersTask.Size(m)
}
func (m *EnqueueTriggersTask) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueTriggersTask.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueTriggersTask proto.InternalMessageInfo

func (m *EnqueueTriggersTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *EnqueueTriggersTask) GetTriggers() []*Trigger {
	if m != nil {
		return m.Triggers
	}
	return nil
}

// ScheduleTimersTask adds a bunch of delayed invocation calls.
//
// It is enqueued transactionally. Results in a bunch of TimerTask calls.
//
// Queue: "timers".
type ScheduleTimersTask struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	InvId                int64    `protobuf:"varint,2,opt,name=inv_id,json=invId,proto3" json:"inv_id,omitempty"`
	Timers               []*Timer `protobuf:"bytes,3,rep,name=timers,proto3" json:"timers,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleTimersTask) Reset()         { *m = ScheduleTimersTask{} }
func (m *ScheduleTimersTask) String() string { return proto.CompactTextString(m) }
func (*ScheduleTimersTask) ProtoMessage()    {}
func (*ScheduleTimersTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{8}
}

func (m *ScheduleTimersTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleTimersTask.Unmarshal(m, b)
}
func (m *ScheduleTimersTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleTimersTask.Marshal(b, m, deterministic)
}
func (m *ScheduleTimersTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleTimersTask.Merge(m, src)
}
func (m *ScheduleTimersTask) XXX_Size() int {
	return xxx_messageInfo_ScheduleTimersTask.Size(m)
}
func (m *ScheduleTimersTask) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleTimersTask.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleTimersTask proto.InternalMessageInfo

func (m *ScheduleTimersTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *ScheduleTimersTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *ScheduleTimersTask) GetTimers() []*Timer {
	if m != nil {
		return m.Timers
	}
	return nil
}

// TimerTask corresponds to delayed calls added through AddTimer controller API.
//
// Enqueued either transactionally or not. Deduplicated based on invocation's
// PendingTimers set: any timers not in the set are silently skipped.
//
// Queue: "timers".
type TimerTask struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	InvId                int64    `protobuf:"varint,2,opt,name=inv_id,json=invId,proto3" json:"inv_id,omitempty"`
	Timer                *Timer   `protobuf:"bytes,3,opt,name=timer,proto3" json:"timer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimerTask) Reset()         { *m = TimerTask{} }
func (m *TimerTask) String() string { return proto.CompactTextString(m) }
func (*TimerTask) ProtoMessage()    {}
func (*TimerTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{9}
}

func (m *TimerTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimerTask.Unmarshal(m, b)
}
func (m *TimerTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimerTask.Marshal(b, m, deterministic)
}
func (m *TimerTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimerTask.Merge(m, src)
}
func (m *TimerTask) XXX_Size() int {
	return xxx_messageInfo_TimerTask.Size(m)
}
func (m *TimerTask) XXX_DiscardUnknown() {
	xxx_messageInfo_TimerTask.DiscardUnknown(m)
}

var xxx_messageInfo_TimerTask proto.InternalMessageInfo

func (m *TimerTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *TimerTask) GetInvId() int64 {
	if m != nil {
		return m.InvId
	}
	return 0
}

func (m *TimerTask) GetTimer() *Timer {
	if m != nil {
		return m.Timer
	}
	return nil
}

// CronTickTask is scheduled based on the job's cron schedule.
//
// It is enqueued transactionally when the job changes state (e.g. the job
// appears for the first time or its schedule changes) or from previous cron
// ticks.
//
// Queue: "crons".
type CronTickTask struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	TickNonce            int64    `protobuf:"varint,2,opt,name=tick_nonce,json=tickNonce,proto3" json:"tick_nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CronTickTask) Reset()         { *m = CronTickTask{} }
func (m *CronTickTask) String() string { return proto.CompactTextString(m) }
func (*CronTickTask) ProtoMessage()    {}
func (*CronTickTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_849c5c7c517947ce, []int{10}
}

func (m *CronTickTask) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CronTickTask.Unmarshal(m, b)
}
func (m *CronTickTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CronTickTask.Marshal(b, m, deterministic)
}
func (m *CronTickTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CronTickTask.Merge(m, src)
}
func (m *CronTickTask) XXX_Size() int {
	return xxx_messageInfo_CronTickTask.Size(m)
}
func (m *CronTickTask) XXX_DiscardUnknown() {
	xxx_messageInfo_CronTickTask.DiscardUnknown(m)
}

var xxx_messageInfo_CronTickTask proto.InternalMessageInfo

func (m *CronTickTask) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *CronTickTask) GetTickNonce() int64 {
	if m != nil {
		return m.TickNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*ReadProjectConfigTask)(nil), "internal.tq.ReadProjectConfigTask")
	proto.RegisterType((*LaunchInvocationTask)(nil), "internal.tq.LaunchInvocationTask")
	proto.RegisterType((*LaunchInvocationsBatchTask)(nil), "internal.tq.LaunchInvocationsBatchTask")
	proto.RegisterType((*TriageJobStateTask)(nil), "internal.tq.TriageJobStateTask")
	proto.RegisterType((*KickTriageTask)(nil), "internal.tq.KickTriageTask")
	proto.RegisterType((*InvocationFinishedTask)(nil), "internal.tq.InvocationFinishedTask")
	proto.RegisterType((*FanOutTriggersTask)(nil), "internal.tq.FanOutTriggersTask")
	proto.RegisterType((*EnqueueTriggersTask)(nil), "internal.tq.EnqueueTriggersTask")
	proto.RegisterType((*ScheduleTimersTask)(nil), "internal.tq.ScheduleTimersTask")
	proto.RegisterType((*TimerTask)(nil), "internal.tq.TimerTask")
	proto.RegisterType((*CronTickTask)(nil), "internal.tq.CronTickTask")
}

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/scheduler/appengine/internal/tq.proto", fileDescriptor_849c5c7c517947ce)
}

var fileDescriptor_849c5c7c517947ce = []byte{
	// 456 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xdf, 0x6b, 0x13, 0x41,
	0x10, 0xc7, 0xb9, 0x86, 0xc4, 0xde, 0x44, 0x7c, 0x38, 0x6d, 0x0d, 0x81, 0x62, 0xbc, 0x17, 0x03,
	0xca, 0x1d, 0x54, 0xa8, 0xa0, 0x20, 0xd2, 0xd6, 0x42, 0x54, 0x54, 0xae, 0xe7, 0x8b, 0x2f, 0x65,
	0xb3, 0xb7, 0xde, 0x4d, 0x7e, 0xcc, 0x26, 0xbb, 0x7b, 0xf9, 0x07, 0xfc, 0xc7, 0xe5, 0x76, 0x2f,
	0xed, 0x55, 0x6d, 0xa0, 0xf7, 0xfa, 0xdd, 0x99, 0xef, 0x67, 0x66, 0x76, 0x06, 0xde, 0xe6, 0x32,
	0xe2, 0x85, 0x92, 0x4b, 0x2c, 0x97, 0x91, 0x54, 0x79, 0xbc, 0x28, 0x39, 0xc6, 0x9a, 0x17, 0x22,
	0x2b, 0x17, 0x42, 0xc5, 0x6c, 0xb5, 0x12, 0x94, 0x23, 0x89, 0x18, 0xc9, 0x08, 0x45, 0x6c, 0x11,
	0x9b, 0x75, 0xb4, 0x52, 0xd2, 0xc8, 0xa0, 0xbf, 0x95, 0x22, 0xb3, 0x1e, 0xbe, 0x6f, 0x61, 0x84,
	0x4b, 0xa1, 0xb4, 0x33, 0x1b, 0x7e, 0x68, 0x91, 0xaf, 0x30, 0xcf, 0xaf, 0x1d, 0xc2, 0x13, 0x38,
	0x48, 0x04, 0xcb, 0xbe, 0x2b, 0x39, 0x13, 0xdc, 0x9c, 0x49, 0xfa, 0x85, 0x79, 0xca, 0xf4, 0x3c,
	0x38, 0x02, 0x58, 0x39, 0xf1, 0x0a, 0xb3, 0x81, 0x37, 0xf2, 0xc6, 0x7e, 0xe2, 0xd7, 0xca, 0x24,
	0x0b, 0xcf, 0xe1, 0xc9, 0x17, 0x56, 0x12, 0x2f, 0x26, 0xb4, 0x91, 0x9c, 0x19, 0x94, 0x64, 0xd3,
	0x0e, 0xa0, 0x37, 0x93, 0xd3, 0x9b, 0x94, 0xee, 0x4c, 0x4e, 0x27, 0x59, 0x25, 0x23, 0x6d, 0x2a,
	0x79, 0x6f, 0xe4, 0x8d, 0x3b, 0x49, 0x17, 0x69, 0x33, 0xc9, 0xc2, 0x1f, 0x30, 0xfc, 0xdb, 0x45,
	0x9f, 0x32, 0xc3, 0x0b, 0xeb, 0xf5, 0x06, 0xba, 0x86, 0xe9, 0xb9, 0x1e, 0x78, 0xa3, 0xce, 0xb8,
	0x7f, 0xfc, 0x3c, 0x6a, 0x8c, 0x2e, 0xfa, 0x1f, 0x3d, 0x71, 0xf1, 0xe1, 0x4b, 0x08, 0x52, 0x85,
	0x2c, 0x17, 0x9f, 0xe4, 0xf4, 0xd2, 0x30, 0x23, 0x76, 0x94, 0x16, 0xbe, 0x80, 0x47, 0x9f, 0x91,
	0xcf, 0x5d, 0xc2, 0xae, 0xc0, 0xdf, 0x1e, 0x1c, 0xde, 0xf0, 0x2e, 0x90, 0x50, 0x17, 0x22, 0xbb,
	0x7f, 0xd7, 0xc1, 0x3b, 0xd8, 0xdf, 0xfe, 0xc2, 0xa0, 0x33, 0xf2, 0xc6, 0xfd, 0xe3, 0x67, 0xb7,
	0x5a, 0xbb, 0x60, 0xf4, 0xad, 0x34, 0x69, 0x1d, 0x62, 0x1b, 0xbb, 0x4e, 0x08, 0x05, 0x04, 0xff,
	0xbe, 0x07, 0x4f, 0xe1, 0x81, 0x2b, 0xc0, 0x0d, 0xcb, 0x4f, 0x7a, 0xb6, 0x02, 0x1d, 0x9c, 0x34,
	0x58, 0x7b, 0x76, 0x8c, 0xc3, 0x06, 0x6b, 0xbb, 0x0b, 0xb5, 0x57, 0x03, 0x93, 0xc1, 0xe3, 0x8f,
	0xb4, 0x2e, 0x45, 0x29, 0x6e, 0x71, 0xee, 0x68, 0xb4, 0x2d, 0x45, 0x41, 0x70, 0x59, 0x2f, 0x6b,
	0x6a, 0xf7, 0xba, 0xc5, 0x34, 0x23, 0xe8, 0xb9, 0x9b, 0x18, 0x74, 0x2c, 0xf9, 0xb0, 0x41, 0x76,
	0xb7, 0x62, 0xad, 0x93, 0x3a, 0x2a, 0xcc, 0xc1, 0xb7, 0x42, 0x0b, 0xd4, 0x2b, 0xe8, 0x5a, 0x93,
	0xfa, 0xd7, 0xee, 0x22, 0xb9, 0xa0, 0xf0, 0x1c, 0x1e, 0x9e, 0x29, 0x49, 0x69, 0xb5, 0x5c, 0x3b,
	0x58, 0x47, 0x00, 0x06, 0xf9, 0xfc, 0x8a, 0x24, 0x71, 0x51, 0xf3, 0xfc, 0x4a, 0xf9, 0x5a, 0x09,
	0xa7, 0xf0, 0x73, 0x7f, 0x4b, 0x99, 0xf6, 0xec, 0xcd, 0xbe, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff,
	0xab, 0x8d, 0x71, 0x7c, 0x80, 0x04, 0x00, 0x00,
}
