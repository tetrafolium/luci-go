// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/tetrafolium/luci-go/server/cmd/statsd-to-tsmon/config/config.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Kind int32

const (
	Kind_KIND_UNSPECIFIED        Kind = 0
	Kind_GAUGE                   Kind = 1
	Kind_COUNTER                 Kind = 2
	Kind_CUMULATIVE_DISTRIBUTION Kind = 3
)

var Kind_name = map[int32]string{
	0: "KIND_UNSPECIFIED",
	1: "GAUGE",
	2: "COUNTER",
	3: "CUMULATIVE_DISTRIBUTION",
}

var Kind_value = map[string]int32{
	"KIND_UNSPECIFIED":        0,
	"GAUGE":                   1,
	"COUNTER":                 2,
	"CUMULATIVE_DISTRIBUTION": 3,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}

func (Kind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac0c70a7998f78d, []int{0}
}

type Unit int32

const (
	Unit_UNIT_UNSPECIFIED Unit = 0
	Unit_MILLISECONDS     Unit = 1
	Unit_BYTES            Unit = 2
)

var Unit_name = map[int32]string{
	0: "UNIT_UNSPECIFIED",
	1: "MILLISECONDS",
	2: "BYTES",
}

var Unit_value = map[string]int32{
	"UNIT_UNSPECIFIED": 0,
	"MILLISECONDS":     1,
	"BYTES":            2,
}

func (x Unit) String() string {
	return proto.EnumName(Unit_name, int32(x))
}

func (Unit) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ac0c70a7998f78d, []int{1}
}

type Config struct {
	// A collection of tsmon metrics and rules for how to extract them from statsd
	// metrics.
	Metrics              []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac0c70a7998f78d, []int{0}
}

func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Metric struct {
	// Name of the tsmon metric to produce, required.
	Metric string `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	// A kind of the metric, required.
	Kind Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=statsd_to_tsmon.config.Kind" json:"kind,omitempty"`
	// Metric description. Optional, but recommended.
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	// Units of the metric value. Optional, but recommended.
	Units Unit `protobuf:"varint,4,opt,name=units,proto3,enum=statsd_to_tsmon.config.Unit" json:"units,omitempty"`
	// A set of fields of this metric.
	Fields []string `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	// A list of rules that map statds metrics to fields of this metric.
	//
	// Each rule is represented by a statsd metric name pattern (that looks like
	// e.g. "something.*.${var}.*.sfx") and a recipe of how to get tsmon field
	// name of metrics matching the pattern.
	//
	// In the current implementation the last component of each pattern must be
	// some static string (i.e. not `*` and not a var) and all such suffixes must
	// be unique across the entire configuration file.
	Rules                []*Rule  `protobuf:"bytes,6,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac0c70a7998f78d, []int{1}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *Metric) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_KIND_UNSPECIFIED
}

func (m *Metric) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Metric) GetUnits() Unit {
	if m != nil {
		return m.Units
	}
	return Unit_UNIT_UNSPECIFIED
}

func (m *Metric) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Metric) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type Rule struct {
	// A pattern to match statsd metric name against.
	//
	// Also used to "extract" interesting portions of the metric name to use them
	// in `fields`.
	//
	// For example, if the pattern is "something.*.${var}.*.sfx", statds metric
	// "something.foo.val.bar.sfx" matches it, and `var` value is set to "val".
	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// A map "field name => its value".
	//
	// The set of field names should be equal to the set of fields specified
	// in the metric definition.
	//
	// Each field value is either a static string ("foo"), or a reference to
	// some variable ("${var}") parsed from the statsd metric name according to
	// the pattern.
	Fields               map[string]string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Rule) Reset()         { *m = Rule{} }
func (m *Rule) String() string { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()    {}
func (*Rule) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ac0c70a7998f78d, []int{2}
}

func (m *Rule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rule.Unmarshal(m, b)
}
func (m *Rule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rule.Marshal(b, m, deterministic)
}
func (m *Rule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rule.Merge(m, src)
}
func (m *Rule) XXX_Size() int {
	return xxx_messageInfo_Rule.Size(m)
}
func (m *Rule) XXX_DiscardUnknown() {
	xxx_messageInfo_Rule.DiscardUnknown(m)
}

var xxx_messageInfo_Rule proto.InternalMessageInfo

func (m *Rule) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

func (m *Rule) GetFields() map[string]string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func init() {
	proto.RegisterEnum("statsd_to_tsmon.config.Kind", Kind_name, Kind_value)
	proto.RegisterEnum("statsd_to_tsmon.config.Unit", Unit_name, Unit_value)
	proto.RegisterType((*Config)(nil), "statsd_to_tsmon.config.Config")
	proto.RegisterType((*Metric)(nil), "statsd_to_tsmon.config.Metric")
	proto.RegisterType((*Rule)(nil), "statsd_to_tsmon.config.Rule")
	proto.RegisterMapType((map[string]string)(nil), "statsd_to_tsmon.config.Rule.FieldsEntry")
}

func init() {
	proto.RegisterFile("github.com/tetrafolium/luci-go/server/cmd/statsd-to-tsmon/config/config.proto", fileDescriptor_1ac0c70a7998f78d)
}

var fileDescriptor_1ac0c70a7998f78d = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xdd, 0x6a, 0xdb, 0x30,
	0x14, 0xc7, 0xe7, 0x8f, 0x38, 0xcb, 0xc9, 0x18, 0x46, 0x94, 0xce, 0x6c, 0x63, 0x84, 0x5c, 0x85,
	0x42, 0xed, 0x91, 0xdd, 0xb4, 0xbb, 0x5a, 0xe3, 0xb8, 0x45, 0x34, 0x71, 0x36, 0x7f, 0x0c, 0xb6,
	0x9b, 0x90, 0xd9, 0x6a, 0x66, 0x6a, 0x5b, 0x45, 0x92, 0x0b, 0x7d, 0x98, 0xbd, 0xde, 0x9e, 0x63,
	0x48, 0x4a, 0xc6, 0x18, 0x6d, 0xae, 0x74, 0xfe, 0x47, 0x7f, 0xfd, 0xce, 0x07, 0x82, 0x70, 0x4b,
	0xfd, 0xe2, 0x27, 0xa3, 0x4d, 0xd5, 0x35, 0x3e, 0x65, 0xdb, 0xa0, 0xee, 0x8a, 0x2a, 0xe0, 0x84,
	0xdd, 0x13, 0x16, 0x14, 0x4d, 0x19, 0x70, 0xb1, 0x11, 0xbc, 0x3c, 0x15, 0xf4, 0x54, 0xf0, 0x86,
	0xb6, 0x41, 0x41, 0xdb, 0x9b, 0x6a, 0xbb, 0x3b, 0xfc, 0x3b, 0x46, 0x05, 0x45, 0xc7, 0xda, 0xb4,
	0x16, 0x74, 0xad, 0x4c, 0xbe, 0xbe, 0x1d, 0xcf, 0xc0, 0x09, 0x55, 0x84, 0xce, 0xa0, 0xdf, 0x10,
	0xc1, 0xaa, 0x82, 0x7b, 0xc6, 0xc8, 0x9a, 0x0c, 0xa7, 0xef, 0xfc, 0xc7, 0xdf, 0xf8, 0x4b, 0x65,
	0x4b, 0xf6, 0xf6, 0xf1, 0x6f, 0x03, 0x1c, 0x9d, 0x43, 0xc7, 0xe0, 0xe8, 0xac, 0x67, 0x8c, 0x8c,
	0xc9, 0x20, 0xd9, 0x29, 0xf4, 0x1e, 0xec, 0xdb, 0xaa, 0x2d, 0x3d, 0x73, 0x64, 0x4c, 0x5e, 0x4e,
	0xdf, 0x3e, 0x45, 0xbe, 0xae, 0xda, 0x32, 0x51, 0x4e, 0x84, 0xc0, 0x2e, 0x09, 0x2f, 0x3c, 0x4b,
	0x71, 0x54, 0x8c, 0xa6, 0xd0, 0xeb, 0xda, 0x4a, 0x70, 0xcf, 0x3e, 0x8c, 0xc9, 0xdb, 0x4a, 0x24,
	0xda, 0x2a, 0x3b, 0xba, 0xa9, 0x48, 0x5d, 0x72, 0xaf, 0x37, 0xb2, 0x64, 0x47, 0x5a, 0x49, 0x16,
	0xeb, 0x6a, 0xc2, 0x3d, 0x47, 0x0d, 0xfb, 0x24, 0x2b, 0xe9, 0x6a, 0x92, 0x68, 0xeb, 0xf8, 0x97,
	0x01, 0xb6, 0xd4, 0xc8, 0x83, 0xfe, 0xdd, 0x46, 0x08, 0xc2, 0xda, 0xdd, 0x9c, 0x7b, 0x89, 0x3e,
	0xfd, 0x2d, 0x67, 0x2a, 0xee, 0xe4, 0x10, 0xd7, 0xbf, 0x54, 0xd6, 0xa8, 0x15, 0xec, 0x61, 0xdf,
	0xd8, 0xeb, 0x73, 0x18, 0xfe, 0x93, 0x46, 0x2e, 0x58, 0xb7, 0xe4, 0x61, 0x57, 0x46, 0x86, 0xe8,
	0x08, 0x7a, 0xf7, 0x9b, 0xba, 0x23, 0x6a, 0x99, 0x83, 0x44, 0x8b, 0x8f, 0xe6, 0x99, 0x71, 0xf2,
	0x05, 0x6c, 0xb9, 0x41, 0x74, 0x04, 0xee, 0x35, 0x8e, 0xe7, 0xeb, 0x3c, 0x4e, 0x3f, 0x47, 0x21,
	0xbe, 0xc4, 0xd1, 0xdc, 0x7d, 0x86, 0x06, 0xd0, 0xbb, 0xba, 0xc8, 0xaf, 0x22, 0xd7, 0x40, 0x43,
	0xe8, 0x87, 0xab, 0x3c, 0xce, 0xa2, 0xc4, 0x35, 0xd1, 0x1b, 0x78, 0x15, 0xe6, 0xcb, 0x7c, 0x71,
	0x91, 0xe1, 0xaf, 0xd1, 0x7a, 0x8e, 0xd3, 0x2c, 0xc1, 0xb3, 0x3c, 0xc3, 0xab, 0xd8, 0xb5, 0x4e,
	0xce, 0xc1, 0x96, 0xdb, 0x94, 0xc8, 0x3c, 0xc6, 0xd9, 0x7f, 0x48, 0x17, 0x5e, 0x2c, 0xf1, 0x62,
	0x81, 0xd3, 0x28, 0x5c, 0xc5, 0xf3, 0xd4, 0x35, 0x64, 0x91, 0xd9, 0xb7, 0x2c, 0x4a, 0x5d, 0x73,
	0xf6, 0xfc, 0xbb, 0xa3, 0x67, 0xfd, 0xe1, 0xa8, 0x3f, 0xf8, 0xe1, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x1b, 0x8b, 0xca, 0xcb, 0xca, 0x02, 0x00, 0x00,
}
