// Copyright 2018 The LUCI Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package appengine.mapper.internal.tasks;

option go_package = "github.com/tetrafolium/luci-go/appengine/mapper/internal/tasks";


// SplitAndLaunch task splits the key range into shards and kicks off processing
// of each individual shard.
//
// Enqueued transactionally when creating a new mapping job.
message SplitAndLaunch {
  int64 job_id = 1;
}


// FanOutShards enqueues a bunch of ProcessShard named tasks (one per shard).
//
// Enqueued transactionally by SplitAndLaunch after it has constructed shards.
message FanOutShards {
  int64 job_id = 1;
}


// ProcessShard sequentially reads the entities belonging to a key range
// assigned to a shard and applies the mapper to them.
//
// Upon reaching 1 min mark, relaunches itself, increasing task_num. Thus
// ProcessShard is actually a chain of tasks that runs as long as needed to
// completely process the shard.
message ProcessShard {
  int64 job_id = 1;
  int64 shard_id = 2;
  int64 task_num = 3;
}


// RequestJobStateUpdate is transactionally emitted by ProcessShard when shard's
// state changes.
//
// It eventually (with some throttling) causes UpdateJobState to be emitted,
// which updates the job state based on states of the shards.
message RequestJobStateUpdate {
  int64 job_id = 1;
  int64 shard_id = 2; // mostly FYI
}


// UpdateJobState is emitted after one or more shards have changed their state.
//
// It recalculates the job's state based on state of all its shards. Throttled
// to 0.5 QPS.
message UpdateJobState {
  int64 job_id = 1;
}
